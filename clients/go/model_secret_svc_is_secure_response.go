/*
OpenOrch

On-premise AI platform and microservices ecosystem.

API version: 0.3.0-rc.9
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SecretSvcIsSecureResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretSvcIsSecureResponse{}

// SecretSvcIsSecureResponse struct for SecretSvcIsSecureResponse
type SecretSvcIsSecureResponse struct {
	IsSecure *bool `json:"isSecure,omitempty"`
}

// NewSecretSvcIsSecureResponse instantiates a new SecretSvcIsSecureResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretSvcIsSecureResponse() *SecretSvcIsSecureResponse {
	this := SecretSvcIsSecureResponse{}
	return &this
}

// NewSecretSvcIsSecureResponseWithDefaults instantiates a new SecretSvcIsSecureResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretSvcIsSecureResponseWithDefaults() *SecretSvcIsSecureResponse {
	this := SecretSvcIsSecureResponse{}
	return &this
}

// GetIsSecure returns the IsSecure field value if set, zero value otherwise.
func (o *SecretSvcIsSecureResponse) GetIsSecure() bool {
	if o == nil || IsNil(o.IsSecure) {
		var ret bool
		return ret
	}
	return *o.IsSecure
}

// GetIsSecureOk returns a tuple with the IsSecure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretSvcIsSecureResponse) GetIsSecureOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecure) {
		return nil, false
	}
	return o.IsSecure, true
}

// HasIsSecure returns a boolean if a field has been set.
func (o *SecretSvcIsSecureResponse) HasIsSecure() bool {
	if o != nil && !IsNil(o.IsSecure) {
		return true
	}

	return false
}

// SetIsSecure gets a reference to the given bool and assigns it to the IsSecure field.
func (o *SecretSvcIsSecureResponse) SetIsSecure(v bool) {
	o.IsSecure = &v
}

func (o SecretSvcIsSecureResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretSvcIsSecureResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsSecure) {
		toSerialize["isSecure"] = o.IsSecure
	}
	return toSerialize, nil
}

type NullableSecretSvcIsSecureResponse struct {
	value *SecretSvcIsSecureResponse
	isSet bool
}

func (v NullableSecretSvcIsSecureResponse) Get() *SecretSvcIsSecureResponse {
	return v.value
}

func (v *NullableSecretSvcIsSecureResponse) Set(val *SecretSvcIsSecureResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretSvcIsSecureResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretSvcIsSecureResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretSvcIsSecureResponse(val *SecretSvcIsSecureResponse) *NullableSecretSvcIsSecureResponse {
	return &NullableSecretSvcIsSecureResponse{value: val, isSet: true}
}

func (v NullableSecretSvcIsSecureResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretSvcIsSecureResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


