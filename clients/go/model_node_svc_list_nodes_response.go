/*
Singulatron

Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.

API version: 0.2
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NodeSvcListNodesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeSvcListNodesResponse{}

// NodeSvcListNodesResponse struct for NodeSvcListNodesResponse
type NodeSvcListNodesResponse struct {
	Nodes []NodeSvcNode `json:"nodes,omitempty"`
}

// NewNodeSvcListNodesResponse instantiates a new NodeSvcListNodesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeSvcListNodesResponse() *NodeSvcListNodesResponse {
	this := NodeSvcListNodesResponse{}
	return &this
}

// NewNodeSvcListNodesResponseWithDefaults instantiates a new NodeSvcListNodesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeSvcListNodesResponseWithDefaults() *NodeSvcListNodesResponse {
	this := NodeSvcListNodesResponse{}
	return &this
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *NodeSvcListNodesResponse) GetNodes() []NodeSvcNode {
	if o == nil || IsNil(o.Nodes) {
		var ret []NodeSvcNode
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeSvcListNodesResponse) GetNodesOk() ([]NodeSvcNode, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *NodeSvcListNodesResponse) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []NodeSvcNode and assigns it to the Nodes field.
func (o *NodeSvcListNodesResponse) SetNodes(v []NodeSvcNode) {
	o.Nodes = v
}

func (o NodeSvcListNodesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeSvcListNodesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	return toSerialize, nil
}

type NullableNodeSvcListNodesResponse struct {
	value *NodeSvcListNodesResponse
	isSet bool
}

func (v NullableNodeSvcListNodesResponse) Get() *NodeSvcListNodesResponse {
	return v.value
}

func (v *NullableNodeSvcListNodesResponse) Set(val *NodeSvcListNodesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeSvcListNodesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeSvcListNodesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeSvcListNodesResponse(val *NodeSvcListNodesResponse) *NullableNodeSvcListNodesResponse {
	return &NullableNodeSvcListNodesResponse{value: val, isSet: true}
}

func (v NullableNodeSvcListNodesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeSvcListNodesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


