// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//

// Package openapi is a generated GoMock package.
package openapi

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockContainerSvcAPI is a mock of ContainerSvcAPI interface.
type MockContainerSvcAPI struct {
	ctrl     *gomock.Controller
	recorder *MockContainerSvcAPIMockRecorder
	isgomock struct{}
}

// MockContainerSvcAPIMockRecorder is the mock recorder for MockContainerSvcAPI.
type MockContainerSvcAPIMockRecorder struct {
	mock *MockContainerSvcAPI
}

// NewMockContainerSvcAPI creates a new mock instance.
func NewMockContainerSvcAPI(ctrl *gomock.Controller) *MockContainerSvcAPI {
	mock := &MockContainerSvcAPI{ctrl: ctrl}
	mock.recorder = &MockContainerSvcAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerSvcAPI) EXPECT() *MockContainerSvcAPIMockRecorder {
	return m.recorder
}

// BuildImage mocks base method.
func (m *MockContainerSvcAPI) BuildImage(ctx context.Context) ApiBuildImageRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildImage", ctx)
	ret0, _ := ret[0].(ApiBuildImageRequest)
	return ret0
}

// BuildImage indicates an expected call of BuildImage.
func (mr *MockContainerSvcAPIMockRecorder) BuildImage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildImage", reflect.TypeOf((*MockContainerSvcAPI)(nil).BuildImage), ctx)
}

// BuildImageExecute mocks base method.
func (m *MockContainerSvcAPI) BuildImageExecute(r ApiBuildImageRequest) (map[string]any, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildImageExecute", r)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuildImageExecute indicates an expected call of BuildImageExecute.
func (mr *MockContainerSvcAPIMockRecorder) BuildImageExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildImageExecute", reflect.TypeOf((*MockContainerSvcAPI)(nil).BuildImageExecute), r)
}

// ContainerIsRunning mocks base method.
func (m *MockContainerSvcAPI) ContainerIsRunning(ctx context.Context) ApiContainerIsRunningRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerIsRunning", ctx)
	ret0, _ := ret[0].(ApiContainerIsRunningRequest)
	return ret0
}

// ContainerIsRunning indicates an expected call of ContainerIsRunning.
func (mr *MockContainerSvcAPIMockRecorder) ContainerIsRunning(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerIsRunning", reflect.TypeOf((*MockContainerSvcAPI)(nil).ContainerIsRunning), ctx)
}

// ContainerIsRunningExecute mocks base method.
func (m *MockContainerSvcAPI) ContainerIsRunningExecute(r ApiContainerIsRunningRequest) (*ContainerSvcContainerIsRunningResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerIsRunningExecute", r)
	ret0, _ := ret[0].(*ContainerSvcContainerIsRunningResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ContainerIsRunningExecute indicates an expected call of ContainerIsRunningExecute.
func (mr *MockContainerSvcAPIMockRecorder) ContainerIsRunningExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerIsRunningExecute", reflect.TypeOf((*MockContainerSvcAPI)(nil).ContainerIsRunningExecute), r)
}

// ContainerSummary mocks base method.
func (m *MockContainerSvcAPI) ContainerSummary(ctx context.Context) ApiContainerSummaryRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerSummary", ctx)
	ret0, _ := ret[0].(ApiContainerSummaryRequest)
	return ret0
}

// ContainerSummary indicates an expected call of ContainerSummary.
func (mr *MockContainerSvcAPIMockRecorder) ContainerSummary(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerSummary", reflect.TypeOf((*MockContainerSvcAPI)(nil).ContainerSummary), ctx)
}

// ContainerSummaryExecute mocks base method.
func (m *MockContainerSvcAPI) ContainerSummaryExecute(r ApiContainerSummaryRequest) (*ContainerSvcGetContainerSummaryResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerSummaryExecute", r)
	ret0, _ := ret[0].(*ContainerSvcGetContainerSummaryResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ContainerSummaryExecute indicates an expected call of ContainerSummaryExecute.
func (mr *MockContainerSvcAPIMockRecorder) ContainerSummaryExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerSummaryExecute", reflect.TypeOf((*MockContainerSvcAPI)(nil).ContainerSummaryExecute), r)
}

// GetInfo mocks base method.
func (m *MockContainerSvcAPI) GetInfo(ctx context.Context) ApiGetInfoRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx)
	ret0, _ := ret[0].(ApiGetInfoRequest)
	return ret0
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockContainerSvcAPIMockRecorder) GetInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockContainerSvcAPI)(nil).GetInfo), ctx)
}

// GetInfoExecute mocks base method.
func (m *MockContainerSvcAPI) GetInfoExecute(r ApiGetInfoRequest) (*ContainerSvcGetInfoResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfoExecute", r)
	ret0, _ := ret[0].(*ContainerSvcGetInfoResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInfoExecute indicates an expected call of GetInfoExecute.
func (mr *MockContainerSvcAPIMockRecorder) GetInfoExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfoExecute", reflect.TypeOf((*MockContainerSvcAPI)(nil).GetInfoExecute), r)
}

// ImageExists mocks base method.
func (m *MockContainerSvcAPI) ImageExists(ctx context.Context) ApiImageExistsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageExists", ctx)
	ret0, _ := ret[0].(ApiImageExistsRequest)
	return ret0
}

// ImageExists indicates an expected call of ImageExists.
func (mr *MockContainerSvcAPIMockRecorder) ImageExists(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageExists", reflect.TypeOf((*MockContainerSvcAPI)(nil).ImageExists), ctx)
}

// ImageExistsExecute mocks base method.
func (m *MockContainerSvcAPI) ImageExistsExecute(r ApiImageExistsRequest) (*ContainerSvcGetDockerHostResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageExistsExecute", r)
	ret0, _ := ret[0].(*ContainerSvcGetDockerHostResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ImageExistsExecute indicates an expected call of ImageExistsExecute.
func (mr *MockContainerSvcAPIMockRecorder) ImageExistsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageExistsExecute", reflect.TypeOf((*MockContainerSvcAPI)(nil).ImageExistsExecute), r)
}

// RunContainer mocks base method.
func (m *MockContainerSvcAPI) RunContainer(ctx context.Context) ApiRunContainerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunContainer", ctx)
	ret0, _ := ret[0].(ApiRunContainerRequest)
	return ret0
}

// RunContainer indicates an expected call of RunContainer.
func (mr *MockContainerSvcAPIMockRecorder) RunContainer(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunContainer", reflect.TypeOf((*MockContainerSvcAPI)(nil).RunContainer), ctx)
}

// RunContainerExecute mocks base method.
func (m *MockContainerSvcAPI) RunContainerExecute(r ApiRunContainerRequest) (*ContainerSvcRunContainerResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunContainerExecute", r)
	ret0, _ := ret[0].(*ContainerSvcRunContainerResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RunContainerExecute indicates an expected call of RunContainerExecute.
func (mr *MockContainerSvcAPIMockRecorder) RunContainerExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunContainerExecute", reflect.TypeOf((*MockContainerSvcAPI)(nil).RunContainerExecute), r)
}

// StopContainer mocks base method.
func (m *MockContainerSvcAPI) StopContainer(ctx context.Context) ApiStopContainerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContainer", ctx)
	ret0, _ := ret[0].(ApiStopContainerRequest)
	return ret0
}

// StopContainer indicates an expected call of StopContainer.
func (mr *MockContainerSvcAPIMockRecorder) StopContainer(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContainer", reflect.TypeOf((*MockContainerSvcAPI)(nil).StopContainer), ctx)
}

// StopContainerExecute mocks base method.
func (m *MockContainerSvcAPI) StopContainerExecute(r ApiStopContainerRequest) (map[string]any, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContainerExecute", r)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StopContainerExecute indicates an expected call of StopContainerExecute.
func (mr *MockContainerSvcAPIMockRecorder) StopContainerExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContainerExecute", reflect.TypeOf((*MockContainerSvcAPI)(nil).StopContainerExecute), r)
}
