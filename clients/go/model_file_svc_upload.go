/*
OpenOrch

On-premise AI platform and microservices ecosystem.

API version: 0.3.0-rc.10
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FileSvcUpload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileSvcUpload{}

// FileSvcUpload struct for FileSvcUpload
type FileSvcUpload struct {
	FileName *string `json:"fileName,omitempty"`
	FilePath *string `json:"filePath,omitempty"`
	FullFileSize *int64 `json:"fullFileSize,omitempty"`
	Id *string `json:"id,omitempty"`
	NodeId *string `json:"nodeId,omitempty"`
	UserId *string `json:"userId,omitempty"`
}

// NewFileSvcUpload instantiates a new FileSvcUpload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileSvcUpload() *FileSvcUpload {
	this := FileSvcUpload{}
	return &this
}

// NewFileSvcUploadWithDefaults instantiates a new FileSvcUpload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileSvcUploadWithDefaults() *FileSvcUpload {
	this := FileSvcUpload{}
	return &this
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *FileSvcUpload) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSvcUpload) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *FileSvcUpload) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *FileSvcUpload) SetFileName(v string) {
	o.FileName = &v
}

// GetFilePath returns the FilePath field value if set, zero value otherwise.
func (o *FileSvcUpload) GetFilePath() string {
	if o == nil || IsNil(o.FilePath) {
		var ret string
		return ret
	}
	return *o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSvcUpload) GetFilePathOk() (*string, bool) {
	if o == nil || IsNil(o.FilePath) {
		return nil, false
	}
	return o.FilePath, true
}

// HasFilePath returns a boolean if a field has been set.
func (o *FileSvcUpload) HasFilePath() bool {
	if o != nil && !IsNil(o.FilePath) {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given string and assigns it to the FilePath field.
func (o *FileSvcUpload) SetFilePath(v string) {
	o.FilePath = &v
}

// GetFullFileSize returns the FullFileSize field value if set, zero value otherwise.
func (o *FileSvcUpload) GetFullFileSize() int64 {
	if o == nil || IsNil(o.FullFileSize) {
		var ret int64
		return ret
	}
	return *o.FullFileSize
}

// GetFullFileSizeOk returns a tuple with the FullFileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSvcUpload) GetFullFileSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.FullFileSize) {
		return nil, false
	}
	return o.FullFileSize, true
}

// HasFullFileSize returns a boolean if a field has been set.
func (o *FileSvcUpload) HasFullFileSize() bool {
	if o != nil && !IsNil(o.FullFileSize) {
		return true
	}

	return false
}

// SetFullFileSize gets a reference to the given int64 and assigns it to the FullFileSize field.
func (o *FileSvcUpload) SetFullFileSize(v int64) {
	o.FullFileSize = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FileSvcUpload) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSvcUpload) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FileSvcUpload) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FileSvcUpload) SetId(v string) {
	o.Id = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *FileSvcUpload) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSvcUpload) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *FileSvcUpload) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *FileSvcUpload) SetNodeId(v string) {
	o.NodeId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *FileSvcUpload) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSvcUpload) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *FileSvcUpload) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *FileSvcUpload) SetUserId(v string) {
	o.UserId = &v
}

func (o FileSvcUpload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileSvcUpload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.FilePath) {
		toSerialize["filePath"] = o.FilePath
	}
	if !IsNil(o.FullFileSize) {
		toSerialize["fullFileSize"] = o.FullFileSize
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.NodeId) {
		toSerialize["nodeId"] = o.NodeId
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return toSerialize, nil
}

type NullableFileSvcUpload struct {
	value *FileSvcUpload
	isSet bool
}

func (v NullableFileSvcUpload) Get() *FileSvcUpload {
	return v.value
}

func (v *NullableFileSvcUpload) Set(val *FileSvcUpload) {
	v.value = val
	v.isSet = true
}

func (v NullableFileSvcUpload) IsSet() bool {
	return v.isSet
}

func (v *NullableFileSvcUpload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileSvcUpload(val *FileSvcUpload) *NullableFileSvcUpload {
	return &NullableFileSvcUpload{value: val, isSet: true}
}

func (v NullableFileSvcUpload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileSvcUpload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


