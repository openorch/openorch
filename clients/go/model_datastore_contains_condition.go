/*
Singulatron

Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.

API version: 0.2
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatastoreContainsCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreContainsCondition{}

// DatastoreContainsCondition struct for DatastoreContainsCondition
type DatastoreContainsCondition struct {
	// Selector selects one, more or all fields
	Selector *DatastoreFieldSelector `json:"selector,omitempty"`
	Value map[string]interface{} `json:"value,omitempty"`
}

// NewDatastoreContainsCondition instantiates a new DatastoreContainsCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreContainsCondition() *DatastoreContainsCondition {
	this := DatastoreContainsCondition{}
	return &this
}

// NewDatastoreContainsConditionWithDefaults instantiates a new DatastoreContainsCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreContainsConditionWithDefaults() *DatastoreContainsCondition {
	this := DatastoreContainsCondition{}
	return &this
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *DatastoreContainsCondition) GetSelector() DatastoreFieldSelector {
	if o == nil || IsNil(o.Selector) {
		var ret DatastoreFieldSelector
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreContainsCondition) GetSelectorOk() (*DatastoreFieldSelector, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *DatastoreContainsCondition) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given DatastoreFieldSelector and assigns it to the Selector field.
func (o *DatastoreContainsCondition) SetSelector(v DatastoreFieldSelector) {
	o.Selector = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DatastoreContainsCondition) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreContainsCondition) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DatastoreContainsCondition) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *DatastoreContainsCondition) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o DatastoreContainsCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreContainsCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableDatastoreContainsCondition struct {
	value *DatastoreContainsCondition
	isSet bool
}

func (v NullableDatastoreContainsCondition) Get() *DatastoreContainsCondition {
	return v.value
}

func (v *NullableDatastoreContainsCondition) Set(val *DatastoreContainsCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreContainsCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreContainsCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreContainsCondition(val *DatastoreContainsCondition) *NullableDatastoreContainsCondition {
	return &NullableDatastoreContainsCondition{value: val, isSet: true}
}

func (v NullableDatastoreContainsCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreContainsCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


