/*
OpenOrch

On-premise AI platform and microservices ecosystem.

API version: 0.3.0-rc.7
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SecretSvcEncryptValueResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretSvcEncryptValueResponse{}

// SecretSvcEncryptValueResponse struct for SecretSvcEncryptValueResponse
type SecretSvcEncryptValueResponse struct {
	EncryptedValue *string `json:"encryptedValue,omitempty"`
	EncryptedValues []string `json:"encryptedValues,omitempty"`
}

// NewSecretSvcEncryptValueResponse instantiates a new SecretSvcEncryptValueResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretSvcEncryptValueResponse() *SecretSvcEncryptValueResponse {
	this := SecretSvcEncryptValueResponse{}
	return &this
}

// NewSecretSvcEncryptValueResponseWithDefaults instantiates a new SecretSvcEncryptValueResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretSvcEncryptValueResponseWithDefaults() *SecretSvcEncryptValueResponse {
	this := SecretSvcEncryptValueResponse{}
	return &this
}

// GetEncryptedValue returns the EncryptedValue field value if set, zero value otherwise.
func (o *SecretSvcEncryptValueResponse) GetEncryptedValue() string {
	if o == nil || IsNil(o.EncryptedValue) {
		var ret string
		return ret
	}
	return *o.EncryptedValue
}

// GetEncryptedValueOk returns a tuple with the EncryptedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretSvcEncryptValueResponse) GetEncryptedValueOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptedValue) {
		return nil, false
	}
	return o.EncryptedValue, true
}

// HasEncryptedValue returns a boolean if a field has been set.
func (o *SecretSvcEncryptValueResponse) HasEncryptedValue() bool {
	if o != nil && !IsNil(o.EncryptedValue) {
		return true
	}

	return false
}

// SetEncryptedValue gets a reference to the given string and assigns it to the EncryptedValue field.
func (o *SecretSvcEncryptValueResponse) SetEncryptedValue(v string) {
	o.EncryptedValue = &v
}

// GetEncryptedValues returns the EncryptedValues field value if set, zero value otherwise.
func (o *SecretSvcEncryptValueResponse) GetEncryptedValues() []string {
	if o == nil || IsNil(o.EncryptedValues) {
		var ret []string
		return ret
	}
	return o.EncryptedValues
}

// GetEncryptedValuesOk returns a tuple with the EncryptedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretSvcEncryptValueResponse) GetEncryptedValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.EncryptedValues) {
		return nil, false
	}
	return o.EncryptedValues, true
}

// HasEncryptedValues returns a boolean if a field has been set.
func (o *SecretSvcEncryptValueResponse) HasEncryptedValues() bool {
	if o != nil && !IsNil(o.EncryptedValues) {
		return true
	}

	return false
}

// SetEncryptedValues gets a reference to the given []string and assigns it to the EncryptedValues field.
func (o *SecretSvcEncryptValueResponse) SetEncryptedValues(v []string) {
	o.EncryptedValues = v
}

func (o SecretSvcEncryptValueResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretSvcEncryptValueResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EncryptedValue) {
		toSerialize["encryptedValue"] = o.EncryptedValue
	}
	if !IsNil(o.EncryptedValues) {
		toSerialize["encryptedValues"] = o.EncryptedValues
	}
	return toSerialize, nil
}

type NullableSecretSvcEncryptValueResponse struct {
	value *SecretSvcEncryptValueResponse
	isSet bool
}

func (v NullableSecretSvcEncryptValueResponse) Get() *SecretSvcEncryptValueResponse {
	return v.value
}

func (v *NullableSecretSvcEncryptValueResponse) Set(val *SecretSvcEncryptValueResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretSvcEncryptValueResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretSvcEncryptValueResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretSvcEncryptValueResponse(val *SecretSvcEncryptValueResponse) *NullableSecretSvcEncryptValueResponse {
	return &NullableSecretSvcEncryptValueResponse{value: val, isSet: true}
}

func (v NullableSecretSvcEncryptValueResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretSvcEncryptValueResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


