// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//

// Package openapi is a generated GoMock package.
package openapi

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDynamicSvcAPI is a mock of DynamicSvcAPI interface.
type MockDynamicSvcAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDynamicSvcAPIMockRecorder
	isgomock struct{}
}

// MockDynamicSvcAPIMockRecorder is the mock recorder for MockDynamicSvcAPI.
type MockDynamicSvcAPIMockRecorder struct {
	mock *MockDynamicSvcAPI
}

// NewMockDynamicSvcAPI creates a new mock instance.
func NewMockDynamicSvcAPI(ctrl *gomock.Controller) *MockDynamicSvcAPI {
	mock := &MockDynamicSvcAPI{ctrl: ctrl}
	mock.recorder = &MockDynamicSvcAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamicSvcAPI) EXPECT() *MockDynamicSvcAPIMockRecorder {
	return m.recorder
}

// CreateObject mocks base method.
func (m *MockDynamicSvcAPI) CreateObject(ctx context.Context) ApiCreateObjectRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObject", ctx)
	ret0, _ := ret[0].(ApiCreateObjectRequest)
	return ret0
}

// CreateObject indicates an expected call of CreateObject.
func (mr *MockDynamicSvcAPIMockRecorder) CreateObject(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObject", reflect.TypeOf((*MockDynamicSvcAPI)(nil).CreateObject), ctx)
}

// CreateObjectExecute mocks base method.
func (m *MockDynamicSvcAPI) CreateObjectExecute(r ApiCreateObjectRequest) (*DynamicSvcCreateObjectResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectExecute", r)
	ret0, _ := ret[0].(*DynamicSvcCreateObjectResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateObjectExecute indicates an expected call of CreateObjectExecute.
func (mr *MockDynamicSvcAPIMockRecorder) CreateObjectExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectExecute", reflect.TypeOf((*MockDynamicSvcAPI)(nil).CreateObjectExecute), r)
}

// DeleteObjects mocks base method.
func (m *MockDynamicSvcAPI) DeleteObjects(ctx context.Context) ApiDeleteObjectsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjects", ctx)
	ret0, _ := ret[0].(ApiDeleteObjectsRequest)
	return ret0
}

// DeleteObjects indicates an expected call of DeleteObjects.
func (mr *MockDynamicSvcAPIMockRecorder) DeleteObjects(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjects", reflect.TypeOf((*MockDynamicSvcAPI)(nil).DeleteObjects), ctx)
}

// DeleteObjectsExecute mocks base method.
func (m *MockDynamicSvcAPI) DeleteObjectsExecute(r ApiDeleteObjectsRequest) (map[string]any, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectsExecute", r)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteObjectsExecute indicates an expected call of DeleteObjectsExecute.
func (mr *MockDynamicSvcAPIMockRecorder) DeleteObjectsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectsExecute", reflect.TypeOf((*MockDynamicSvcAPI)(nil).DeleteObjectsExecute), r)
}

// Query mocks base method.
func (m *MockDynamicSvcAPI) Query(ctx context.Context) ApiQueryRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx)
	ret0, _ := ret[0].(ApiQueryRequest)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockDynamicSvcAPIMockRecorder) Query(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDynamicSvcAPI)(nil).Query), ctx)
}

// QueryExecute mocks base method.
func (m *MockDynamicSvcAPI) QueryExecute(r ApiQueryRequest) (*DynamicSvcQueryResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryExecute", r)
	ret0, _ := ret[0].(*DynamicSvcQueryResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryExecute indicates an expected call of QueryExecute.
func (mr *MockDynamicSvcAPIMockRecorder) QueryExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryExecute", reflect.TypeOf((*MockDynamicSvcAPI)(nil).QueryExecute), r)
}

// UpdateObjects mocks base method.
func (m *MockDynamicSvcAPI) UpdateObjects(ctx context.Context) ApiUpdateObjectsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObjects", ctx)
	ret0, _ := ret[0].(ApiUpdateObjectsRequest)
	return ret0
}

// UpdateObjects indicates an expected call of UpdateObjects.
func (mr *MockDynamicSvcAPIMockRecorder) UpdateObjects(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjects", reflect.TypeOf((*MockDynamicSvcAPI)(nil).UpdateObjects), ctx)
}

// UpdateObjectsExecute mocks base method.
func (m *MockDynamicSvcAPI) UpdateObjectsExecute(r ApiUpdateObjectsRequest) (map[string]any, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObjectsExecute", r)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateObjectsExecute indicates an expected call of UpdateObjectsExecute.
func (mr *MockDynamicSvcAPIMockRecorder) UpdateObjectsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectsExecute", reflect.TypeOf((*MockDynamicSvcAPI)(nil).UpdateObjectsExecute), r)
}

// UpsertObject mocks base method.
func (m *MockDynamicSvcAPI) UpsertObject(ctx context.Context, objectId string) ApiUpsertObjectRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertObject", ctx, objectId)
	ret0, _ := ret[0].(ApiUpsertObjectRequest)
	return ret0
}

// UpsertObject indicates an expected call of UpsertObject.
func (mr *MockDynamicSvcAPIMockRecorder) UpsertObject(ctx, objectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertObject", reflect.TypeOf((*MockDynamicSvcAPI)(nil).UpsertObject), ctx, objectId)
}

// UpsertObjectExecute mocks base method.
func (m *MockDynamicSvcAPI) UpsertObjectExecute(r ApiUpsertObjectRequest) (*DynamicSvcUpsertObjectResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertObjectExecute", r)
	ret0, _ := ret[0].(*DynamicSvcUpsertObjectResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertObjectExecute indicates an expected call of UpsertObjectExecute.
func (mr *MockDynamicSvcAPIMockRecorder) UpsertObjectExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertObjectExecute", reflect.TypeOf((*MockDynamicSvcAPI)(nil).UpsertObjectExecute), r)
}
