/*
Singulatron

AI management and development platform.

API version: 0.2
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DynamicSvcUpdateObjectRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DynamicSvcUpdateObjectRequest{}

// DynamicSvcUpdateObjectRequest struct for DynamicSvcUpdateObjectRequest
type DynamicSvcUpdateObjectRequest struct {
	Conditions []DatastoreCondition `json:"conditions,omitempty"`
	Object *DynamicSvcGenericObject `json:"object,omitempty"`
	Table *string `json:"table,omitempty"`
}

// NewDynamicSvcUpdateObjectRequest instantiates a new DynamicSvcUpdateObjectRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamicSvcUpdateObjectRequest() *DynamicSvcUpdateObjectRequest {
	this := DynamicSvcUpdateObjectRequest{}
	return &this
}

// NewDynamicSvcUpdateObjectRequestWithDefaults instantiates a new DynamicSvcUpdateObjectRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamicSvcUpdateObjectRequestWithDefaults() *DynamicSvcUpdateObjectRequest {
	this := DynamicSvcUpdateObjectRequest{}
	return &this
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *DynamicSvcUpdateObjectRequest) GetConditions() []DatastoreCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []DatastoreCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicSvcUpdateObjectRequest) GetConditionsOk() ([]DatastoreCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *DynamicSvcUpdateObjectRequest) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []DatastoreCondition and assigns it to the Conditions field.
func (o *DynamicSvcUpdateObjectRequest) SetConditions(v []DatastoreCondition) {
	o.Conditions = v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *DynamicSvcUpdateObjectRequest) GetObject() DynamicSvcGenericObject {
	if o == nil || IsNil(o.Object) {
		var ret DynamicSvcGenericObject
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicSvcUpdateObjectRequest) GetObjectOk() (*DynamicSvcGenericObject, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *DynamicSvcUpdateObjectRequest) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given DynamicSvcGenericObject and assigns it to the Object field.
func (o *DynamicSvcUpdateObjectRequest) SetObject(v DynamicSvcGenericObject) {
	o.Object = &v
}

// GetTable returns the Table field value if set, zero value otherwise.
func (o *DynamicSvcUpdateObjectRequest) GetTable() string {
	if o == nil || IsNil(o.Table) {
		var ret string
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicSvcUpdateObjectRequest) GetTableOk() (*string, bool) {
	if o == nil || IsNil(o.Table) {
		return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *DynamicSvcUpdateObjectRequest) HasTable() bool {
	if o != nil && !IsNil(o.Table) {
		return true
	}

	return false
}

// SetTable gets a reference to the given string and assigns it to the Table field.
func (o *DynamicSvcUpdateObjectRequest) SetTable(v string) {
	o.Table = &v
}

func (o DynamicSvcUpdateObjectRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DynamicSvcUpdateObjectRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Table) {
		toSerialize["table"] = o.Table
	}
	return toSerialize, nil
}

type NullableDynamicSvcUpdateObjectRequest struct {
	value *DynamicSvcUpdateObjectRequest
	isSet bool
}

func (v NullableDynamicSvcUpdateObjectRequest) Get() *DynamicSvcUpdateObjectRequest {
	return v.value
}

func (v *NullableDynamicSvcUpdateObjectRequest) Set(val *DynamicSvcUpdateObjectRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicSvcUpdateObjectRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicSvcUpdateObjectRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicSvcUpdateObjectRequest(val *DynamicSvcUpdateObjectRequest) *NullableDynamicSvcUpdateObjectRequest {
	return &NullableDynamicSvcUpdateObjectRequest{value: val, isSet: true}
}

func (v NullableDynamicSvcUpdateObjectRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicSvcUpdateObjectRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


