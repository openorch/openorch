/*
OpenOrch

On-premise AI platform and microservices ecosystem.

API version: 0.3.0-rc.10
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FileSvcUploadsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileSvcUploadsResponse{}

// FileSvcUploadsResponse struct for FileSvcUploadsResponse
type FileSvcUploadsResponse struct {
	Uploads []FileSvcUpload `json:"uploads,omitempty"`
}

// NewFileSvcUploadsResponse instantiates a new FileSvcUploadsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileSvcUploadsResponse() *FileSvcUploadsResponse {
	this := FileSvcUploadsResponse{}
	return &this
}

// NewFileSvcUploadsResponseWithDefaults instantiates a new FileSvcUploadsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileSvcUploadsResponseWithDefaults() *FileSvcUploadsResponse {
	this := FileSvcUploadsResponse{}
	return &this
}

// GetUploads returns the Uploads field value if set, zero value otherwise.
func (o *FileSvcUploadsResponse) GetUploads() []FileSvcUpload {
	if o == nil || IsNil(o.Uploads) {
		var ret []FileSvcUpload
		return ret
	}
	return o.Uploads
}

// GetUploadsOk returns a tuple with the Uploads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSvcUploadsResponse) GetUploadsOk() ([]FileSvcUpload, bool) {
	if o == nil || IsNil(o.Uploads) {
		return nil, false
	}
	return o.Uploads, true
}

// HasUploads returns a boolean if a field has been set.
func (o *FileSvcUploadsResponse) HasUploads() bool {
	if o != nil && !IsNil(o.Uploads) {
		return true
	}

	return false
}

// SetUploads gets a reference to the given []FileSvcUpload and assigns it to the Uploads field.
func (o *FileSvcUploadsResponse) SetUploads(v []FileSvcUpload) {
	o.Uploads = v
}

func (o FileSvcUploadsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileSvcUploadsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uploads) {
		toSerialize["uploads"] = o.Uploads
	}
	return toSerialize, nil
}

type NullableFileSvcUploadsResponse struct {
	value *FileSvcUploadsResponse
	isSet bool
}

func (v NullableFileSvcUploadsResponse) Get() *FileSvcUploadsResponse {
	return v.value
}

func (v *NullableFileSvcUploadsResponse) Set(val *FileSvcUploadsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFileSvcUploadsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFileSvcUploadsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileSvcUploadsResponse(val *FileSvcUploadsResponse) *NullableFileSvcUploadsResponse {
	return &NullableFileSvcUploadsResponse{value: val, isSet: true}
}

func (v NullableFileSvcUploadsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileSvcUploadsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


