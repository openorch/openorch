// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//

// Package openapi is a generated GoMock package.
package openapi

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDockerSvcAPI is a mock of DockerSvcAPI interface.
type MockDockerSvcAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDockerSvcAPIMockRecorder
	isgomock struct{}
}

// MockDockerSvcAPIMockRecorder is the mock recorder for MockDockerSvcAPI.
type MockDockerSvcAPIMockRecorder struct {
	mock *MockDockerSvcAPI
}

// NewMockDockerSvcAPI creates a new mock instance.
func NewMockDockerSvcAPI(ctrl *gomock.Controller) *MockDockerSvcAPI {
	mock := &MockDockerSvcAPI{ctrl: ctrl}
	mock.recorder = &MockDockerSvcAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerSvcAPI) EXPECT() *MockDockerSvcAPIMockRecorder {
	return m.recorder
}

// GetContainerSummary mocks base method.
func (m *MockDockerSvcAPI) GetContainerSummary(ctx context.Context, hash string, numberOfLines int32) ApiGetContainerSummaryRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSummary", ctx, hash, numberOfLines)
	ret0, _ := ret[0].(ApiGetContainerSummaryRequest)
	return ret0
}

// GetContainerSummary indicates an expected call of GetContainerSummary.
func (mr *MockDockerSvcAPIMockRecorder) GetContainerSummary(ctx, hash, numberOfLines any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSummary", reflect.TypeOf((*MockDockerSvcAPI)(nil).GetContainerSummary), ctx, hash, numberOfLines)
}

// GetContainerSummaryExecute mocks base method.
func (m *MockDockerSvcAPI) GetContainerSummaryExecute(r ApiGetContainerSummaryRequest) (*DockerSvcGetContainerSummaryResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSummaryExecute", r)
	ret0, _ := ret[0].(*DockerSvcGetContainerSummaryResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerSummaryExecute indicates an expected call of GetContainerSummaryExecute.
func (mr *MockDockerSvcAPIMockRecorder) GetContainerSummaryExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSummaryExecute", reflect.TypeOf((*MockDockerSvcAPI)(nil).GetContainerSummaryExecute), r)
}

// GetHost mocks base method.
func (m *MockDockerSvcAPI) GetHost(ctx context.Context) ApiGetHostRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost", ctx)
	ret0, _ := ret[0].(ApiGetHostRequest)
	return ret0
}

// GetHost indicates an expected call of GetHost.
func (mr *MockDockerSvcAPIMockRecorder) GetHost(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockDockerSvcAPI)(nil).GetHost), ctx)
}

// GetHostExecute mocks base method.
func (m *MockDockerSvcAPI) GetHostExecute(r ApiGetHostRequest) (*DockerSvcGetDockerHostResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostExecute", r)
	ret0, _ := ret[0].(*DockerSvcGetDockerHostResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHostExecute indicates an expected call of GetHostExecute.
func (mr *MockDockerSvcAPIMockRecorder) GetHostExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostExecute", reflect.TypeOf((*MockDockerSvcAPI)(nil).GetHostExecute), r)
}

// GetInfo mocks base method.
func (m *MockDockerSvcAPI) GetInfo(ctx context.Context) ApiGetInfoRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx)
	ret0, _ := ret[0].(ApiGetInfoRequest)
	return ret0
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockDockerSvcAPIMockRecorder) GetInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockDockerSvcAPI)(nil).GetInfo), ctx)
}

// GetInfoExecute mocks base method.
func (m *MockDockerSvcAPI) GetInfoExecute(r ApiGetInfoRequest) (*DockerSvcGetInfoResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfoExecute", r)
	ret0, _ := ret[0].(*DockerSvcGetInfoResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInfoExecute indicates an expected call of GetInfoExecute.
func (mr *MockDockerSvcAPIMockRecorder) GetInfoExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfoExecute", reflect.TypeOf((*MockDockerSvcAPI)(nil).GetInfoExecute), r)
}

// IsRunning mocks base method.
func (m *MockDockerSvcAPI) IsRunning(ctx context.Context, hash string) ApiIsRunningRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning", ctx, hash)
	ret0, _ := ret[0].(ApiIsRunningRequest)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockDockerSvcAPIMockRecorder) IsRunning(ctx, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockDockerSvcAPI)(nil).IsRunning), ctx, hash)
}

// IsRunningExecute mocks base method.
func (m *MockDockerSvcAPI) IsRunningExecute(r ApiIsRunningRequest) (*DockerSvcContainerIsRunningResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunningExecute", r)
	ret0, _ := ret[0].(*DockerSvcContainerIsRunningResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsRunningExecute indicates an expected call of IsRunningExecute.
func (mr *MockDockerSvcAPIMockRecorder) IsRunningExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunningExecute", reflect.TypeOf((*MockDockerSvcAPI)(nil).IsRunningExecute), r)
}

// LaunchContainer mocks base method.
func (m *MockDockerSvcAPI) LaunchContainer(ctx context.Context) ApiLaunchContainerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchContainer", ctx)
	ret0, _ := ret[0].(ApiLaunchContainerRequest)
	return ret0
}

// LaunchContainer indicates an expected call of LaunchContainer.
func (mr *MockDockerSvcAPIMockRecorder) LaunchContainer(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchContainer", reflect.TypeOf((*MockDockerSvcAPI)(nil).LaunchContainer), ctx)
}

// LaunchContainerExecute mocks base method.
func (m *MockDockerSvcAPI) LaunchContainerExecute(r ApiLaunchContainerRequest) (*DockerSvcLaunchContainerResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchContainerExecute", r)
	ret0, _ := ret[0].(*DockerSvcLaunchContainerResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LaunchContainerExecute indicates an expected call of LaunchContainerExecute.
func (mr *MockDockerSvcAPIMockRecorder) LaunchContainerExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchContainerExecute", reflect.TypeOf((*MockDockerSvcAPI)(nil).LaunchContainerExecute), r)
}
