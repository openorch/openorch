// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//

// Package openapi is a generated GoMock package.
package openapi

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDockerSvcAPI is a mock of DockerSvcAPI interface.
type MockDockerSvcAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDockerSvcAPIMockRecorder
	isgomock struct{}
}

// MockDockerSvcAPIMockRecorder is the mock recorder for MockDockerSvcAPI.
type MockDockerSvcAPIMockRecorder struct {
	mock *MockDockerSvcAPI
}

// NewMockDockerSvcAPI creates a new mock instance.
func NewMockDockerSvcAPI(ctrl *gomock.Controller) *MockDockerSvcAPI {
	mock := &MockDockerSvcAPI{ctrl: ctrl}
	mock.recorder = &MockDockerSvcAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerSvcAPI) EXPECT() *MockDockerSvcAPIMockRecorder {
	return m.recorder
}

// BuildImage mocks base method.
func (m *MockDockerSvcAPI) BuildImage(ctx context.Context) ApiBuildImageRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildImage", ctx)
	ret0, _ := ret[0].(ApiBuildImageRequest)
	return ret0
}

// BuildImage indicates an expected call of BuildImage.
func (mr *MockDockerSvcAPIMockRecorder) BuildImage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildImage", reflect.TypeOf((*MockDockerSvcAPI)(nil).BuildImage), ctx)
}

// BuildImageExecute mocks base method.
func (m *MockDockerSvcAPI) BuildImageExecute(r ApiBuildImageRequest) (map[string]any, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildImageExecute", r)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuildImageExecute indicates an expected call of BuildImageExecute.
func (mr *MockDockerSvcAPIMockRecorder) BuildImageExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildImageExecute", reflect.TypeOf((*MockDockerSvcAPI)(nil).BuildImageExecute), r)
}

// ContainerIsRunning mocks base method.
func (m *MockDockerSvcAPI) ContainerIsRunning(ctx context.Context, hash string) ApiContainerIsRunningRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerIsRunning", ctx, hash)
	ret0, _ := ret[0].(ApiContainerIsRunningRequest)
	return ret0
}

// ContainerIsRunning indicates an expected call of ContainerIsRunning.
func (mr *MockDockerSvcAPIMockRecorder) ContainerIsRunning(ctx, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerIsRunning", reflect.TypeOf((*MockDockerSvcAPI)(nil).ContainerIsRunning), ctx, hash)
}

// ContainerIsRunningExecute mocks base method.
func (m *MockDockerSvcAPI) ContainerIsRunningExecute(r ApiContainerIsRunningRequest) (*DockerSvcContainerIsRunningResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerIsRunningExecute", r)
	ret0, _ := ret[0].(*DockerSvcContainerIsRunningResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ContainerIsRunningExecute indicates an expected call of ContainerIsRunningExecute.
func (mr *MockDockerSvcAPIMockRecorder) ContainerIsRunningExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerIsRunningExecute", reflect.TypeOf((*MockDockerSvcAPI)(nil).ContainerIsRunningExecute), r)
}

// GetContainerSummary mocks base method.
func (m *MockDockerSvcAPI) GetContainerSummary(ctx context.Context, hash string, numberOfLines int32) ApiGetContainerSummaryRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSummary", ctx, hash, numberOfLines)
	ret0, _ := ret[0].(ApiGetContainerSummaryRequest)
	return ret0
}

// GetContainerSummary indicates an expected call of GetContainerSummary.
func (mr *MockDockerSvcAPIMockRecorder) GetContainerSummary(ctx, hash, numberOfLines any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSummary", reflect.TypeOf((*MockDockerSvcAPI)(nil).GetContainerSummary), ctx, hash, numberOfLines)
}

// GetContainerSummaryExecute mocks base method.
func (m *MockDockerSvcAPI) GetContainerSummaryExecute(r ApiGetContainerSummaryRequest) (*DockerSvcGetContainerSummaryResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSummaryExecute", r)
	ret0, _ := ret[0].(*DockerSvcGetContainerSummaryResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerSummaryExecute indicates an expected call of GetContainerSummaryExecute.
func (mr *MockDockerSvcAPIMockRecorder) GetContainerSummaryExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSummaryExecute", reflect.TypeOf((*MockDockerSvcAPI)(nil).GetContainerSummaryExecute), r)
}

// GetHost mocks base method.
func (m *MockDockerSvcAPI) GetHost(ctx context.Context) ApiGetHostRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost", ctx)
	ret0, _ := ret[0].(ApiGetHostRequest)
	return ret0
}

// GetHost indicates an expected call of GetHost.
func (mr *MockDockerSvcAPIMockRecorder) GetHost(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockDockerSvcAPI)(nil).GetHost), ctx)
}

// GetHostExecute mocks base method.
func (m *MockDockerSvcAPI) GetHostExecute(r ApiGetHostRequest) (*DockerSvcGetDockerHostResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostExecute", r)
	ret0, _ := ret[0].(*DockerSvcGetDockerHostResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHostExecute indicates an expected call of GetHostExecute.
func (mr *MockDockerSvcAPIMockRecorder) GetHostExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostExecute", reflect.TypeOf((*MockDockerSvcAPI)(nil).GetHostExecute), r)
}

// GetInfo mocks base method.
func (m *MockDockerSvcAPI) GetInfo(ctx context.Context) ApiGetInfoRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx)
	ret0, _ := ret[0].(ApiGetInfoRequest)
	return ret0
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockDockerSvcAPIMockRecorder) GetInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockDockerSvcAPI)(nil).GetInfo), ctx)
}

// GetInfoExecute mocks base method.
func (m *MockDockerSvcAPI) GetInfoExecute(r ApiGetInfoRequest) (*DockerSvcGetInfoResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfoExecute", r)
	ret0, _ := ret[0].(*DockerSvcGetInfoResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInfoExecute indicates an expected call of GetInfoExecute.
func (mr *MockDockerSvcAPIMockRecorder) GetInfoExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfoExecute", reflect.TypeOf((*MockDockerSvcAPI)(nil).GetInfoExecute), r)
}

// RunContainer mocks base method.
func (m *MockDockerSvcAPI) RunContainer(ctx context.Context) ApiRunContainerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunContainer", ctx)
	ret0, _ := ret[0].(ApiRunContainerRequest)
	return ret0
}

// RunContainer indicates an expected call of RunContainer.
func (mr *MockDockerSvcAPIMockRecorder) RunContainer(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunContainer", reflect.TypeOf((*MockDockerSvcAPI)(nil).RunContainer), ctx)
}

// RunContainerExecute mocks base method.
func (m *MockDockerSvcAPI) RunContainerExecute(r ApiRunContainerRequest) (*DockerSvcRunContainerResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunContainerExecute", r)
	ret0, _ := ret[0].(*DockerSvcRunContainerResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RunContainerExecute indicates an expected call of RunContainerExecute.
func (mr *MockDockerSvcAPIMockRecorder) RunContainerExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunContainerExecute", reflect.TypeOf((*MockDockerSvcAPI)(nil).RunContainerExecute), r)
}
