/*
OpenOrch

On-premise AI platform and microservices ecosystem.

API version: 0.3.0-rc.11
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StreammanagerChunk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreammanagerChunk{}

// StreammanagerChunk struct for StreammanagerChunk
type StreammanagerChunk struct {
	// TextChunk contains a part of the text output from the stream.
	Text *string `json:"text,omitempty"`
	// Type indicates the type of the stream event (e.g., text, done).
	Type *StreammanagerChunkType `json:"type,omitempty"`
}

// NewStreammanagerChunk instantiates a new StreammanagerChunk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreammanagerChunk() *StreammanagerChunk {
	this := StreammanagerChunk{}
	return &this
}

// NewStreammanagerChunkWithDefaults instantiates a new StreammanagerChunk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreammanagerChunkWithDefaults() *StreammanagerChunk {
	this := StreammanagerChunk{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *StreammanagerChunk) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreammanagerChunk) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *StreammanagerChunk) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *StreammanagerChunk) SetText(v string) {
	o.Text = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StreammanagerChunk) GetType() StreammanagerChunkType {
	if o == nil || IsNil(o.Type) {
		var ret StreammanagerChunkType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreammanagerChunk) GetTypeOk() (*StreammanagerChunkType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StreammanagerChunk) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given StreammanagerChunkType and assigns it to the Type field.
func (o *StreammanagerChunk) SetType(v StreammanagerChunkType) {
	o.Type = &v
}

func (o StreammanagerChunk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreammanagerChunk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableStreammanagerChunk struct {
	value *StreammanagerChunk
	isSet bool
}

func (v NullableStreammanagerChunk) Get() *StreammanagerChunk {
	return v.value
}

func (v *NullableStreammanagerChunk) Set(val *StreammanagerChunk) {
	v.value = val
	v.isSet = true
}

func (v NullableStreammanagerChunk) IsSet() bool {
	return v.isSet
}

func (v *NullableStreammanagerChunk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreammanagerChunk(val *StreammanagerChunk) *NullableStreammanagerChunk {
	return &NullableStreammanagerChunk{value: val, isSet: true}
}

func (v NullableStreammanagerChunk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreammanagerChunk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


