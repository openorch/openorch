// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//

// Package openapi is a generated GoMock package.
package openapi

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSecretSvcAPI is a mock of SecretSvcAPI interface.
type MockSecretSvcAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSecretSvcAPIMockRecorder
	isgomock struct{}
}

// MockSecretSvcAPIMockRecorder is the mock recorder for MockSecretSvcAPI.
type MockSecretSvcAPIMockRecorder struct {
	mock *MockSecretSvcAPI
}

// NewMockSecretSvcAPI creates a new mock instance.
func NewMockSecretSvcAPI(ctrl *gomock.Controller) *MockSecretSvcAPI {
	mock := &MockSecretSvcAPI{ctrl: ctrl}
	mock.recorder = &MockSecretSvcAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretSvcAPI) EXPECT() *MockSecretSvcAPIMockRecorder {
	return m.recorder
}

// ReadSecret mocks base method.
func (m *MockSecretSvcAPI) ReadSecret(ctx context.Context) ApiReadSecretRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSecret", ctx)
	ret0, _ := ret[0].(ApiReadSecretRequest)
	return ret0
}

// ReadSecret indicates an expected call of ReadSecret.
func (mr *MockSecretSvcAPIMockRecorder) ReadSecret(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSecret", reflect.TypeOf((*MockSecretSvcAPI)(nil).ReadSecret), ctx)
}

// ReadSecretExecute mocks base method.
func (m *MockSecretSvcAPI) ReadSecretExecute(r ApiReadSecretRequest) (*SecretSvcReadSecretResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSecretExecute", r)
	ret0, _ := ret[0].(*SecretSvcReadSecretResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadSecretExecute indicates an expected call of ReadSecretExecute.
func (mr *MockSecretSvcAPIMockRecorder) ReadSecretExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSecretExecute", reflect.TypeOf((*MockSecretSvcAPI)(nil).ReadSecretExecute), r)
}

// WriteSecret mocks base method.
func (m *MockSecretSvcAPI) WriteSecret(ctx context.Context) ApiWriteSecretRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSecret", ctx)
	ret0, _ := ret[0].(ApiWriteSecretRequest)
	return ret0
}

// WriteSecret indicates an expected call of WriteSecret.
func (mr *MockSecretSvcAPIMockRecorder) WriteSecret(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSecret", reflect.TypeOf((*MockSecretSvcAPI)(nil).WriteSecret), ctx)
}

// WriteSecretExecute mocks base method.
func (m *MockSecretSvcAPI) WriteSecretExecute(r ApiWriteSecretRequest) (map[string]any, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSecretExecute", r)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WriteSecretExecute indicates an expected call of WriteSecretExecute.
func (mr *MockSecretSvcAPIMockRecorder) WriteSecretExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSecretExecute", reflect.TypeOf((*MockSecretSvcAPI)(nil).WriteSecretExecute), r)
}
