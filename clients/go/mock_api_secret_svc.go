// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//

// Package openapi is a generated GoMock package.
package openapi

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSecretSvcAPI is a mock of SecretSvcAPI interface.
type MockSecretSvcAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSecretSvcAPIMockRecorder
	isgomock struct{}
}

// MockSecretSvcAPIMockRecorder is the mock recorder for MockSecretSvcAPI.
type MockSecretSvcAPIMockRecorder struct {
	mock *MockSecretSvcAPI
}

// NewMockSecretSvcAPI creates a new mock instance.
func NewMockSecretSvcAPI(ctrl *gomock.Controller) *MockSecretSvcAPI {
	mock := &MockSecretSvcAPI{ctrl: ctrl}
	mock.recorder = &MockSecretSvcAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretSvcAPI) EXPECT() *MockSecretSvcAPIMockRecorder {
	return m.recorder
}

// EncryptValue mocks base method.
func (m *MockSecretSvcAPI) EncryptValue(ctx context.Context) ApiEncryptValueRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptValue", ctx)
	ret0, _ := ret[0].(ApiEncryptValueRequest)
	return ret0
}

// EncryptValue indicates an expected call of EncryptValue.
func (mr *MockSecretSvcAPIMockRecorder) EncryptValue(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptValue", reflect.TypeOf((*MockSecretSvcAPI)(nil).EncryptValue), ctx)
}

// EncryptValueExecute mocks base method.
func (m *MockSecretSvcAPI) EncryptValueExecute(r ApiEncryptValueRequest) (*SecretSvcEncryptValueResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptValueExecute", r)
	ret0, _ := ret[0].(*SecretSvcEncryptValueResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EncryptValueExecute indicates an expected call of EncryptValueExecute.
func (mr *MockSecretSvcAPIMockRecorder) EncryptValueExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptValueExecute", reflect.TypeOf((*MockSecretSvcAPI)(nil).EncryptValueExecute), r)
}

// ReadSecrets mocks base method.
func (m *MockSecretSvcAPI) ReadSecrets(ctx context.Context) ApiReadSecretsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSecrets", ctx)
	ret0, _ := ret[0].(ApiReadSecretsRequest)
	return ret0
}

// ReadSecrets indicates an expected call of ReadSecrets.
func (mr *MockSecretSvcAPIMockRecorder) ReadSecrets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSecrets", reflect.TypeOf((*MockSecretSvcAPI)(nil).ReadSecrets), ctx)
}

// ReadSecretsExecute mocks base method.
func (m *MockSecretSvcAPI) ReadSecretsExecute(r ApiReadSecretsRequest) (*SecretSvcReadSecretsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSecretsExecute", r)
	ret0, _ := ret[0].(*SecretSvcReadSecretsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadSecretsExecute indicates an expected call of ReadSecretsExecute.
func (mr *MockSecretSvcAPIMockRecorder) ReadSecretsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSecretsExecute", reflect.TypeOf((*MockSecretSvcAPI)(nil).ReadSecretsExecute), r)
}

// WriteSecrets mocks base method.
func (m *MockSecretSvcAPI) WriteSecrets(ctx context.Context) ApiWriteSecretsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSecrets", ctx)
	ret0, _ := ret[0].(ApiWriteSecretsRequest)
	return ret0
}

// WriteSecrets indicates an expected call of WriteSecrets.
func (mr *MockSecretSvcAPIMockRecorder) WriteSecrets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSecrets", reflect.TypeOf((*MockSecretSvcAPI)(nil).WriteSecrets), ctx)
}

// WriteSecretsExecute mocks base method.
func (m *MockSecretSvcAPI) WriteSecretsExecute(r ApiWriteSecretsRequest) (map[string]any, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSecretsExecute", r)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WriteSecretsExecute indicates an expected call of WriteSecretsExecute.
func (mr *MockSecretSvcAPIMockRecorder) WriteSecretsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSecretsExecute", reflect.TypeOf((*MockSecretSvcAPI)(nil).WriteSecretsExecute), r)
}
