/*
OpenOrch

A language-agnostic microservices framework for building AI applications.

API version: 0.3.0-rc.28
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ContainerSvcEnvVar type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerSvcEnvVar{}

// ContainerSvcEnvVar struct for ContainerSvcEnvVar
type ContainerSvcEnvVar struct {
	// Key is the environment variable name.
	Key *string `json:"key,omitempty"`
	// Value is the environment variable value.
	Value *string `json:"value,omitempty"`
}

// NewContainerSvcEnvVar instantiates a new ContainerSvcEnvVar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerSvcEnvVar() *ContainerSvcEnvVar {
	this := ContainerSvcEnvVar{}
	return &this
}

// NewContainerSvcEnvVarWithDefaults instantiates a new ContainerSvcEnvVar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerSvcEnvVarWithDefaults() *ContainerSvcEnvVar {
	this := ContainerSvcEnvVar{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ContainerSvcEnvVar) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSvcEnvVar) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ContainerSvcEnvVar) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ContainerSvcEnvVar) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ContainerSvcEnvVar) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSvcEnvVar) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ContainerSvcEnvVar) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ContainerSvcEnvVar) SetValue(v string) {
	o.Value = &v
}

func (o ContainerSvcEnvVar) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerSvcEnvVar) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableContainerSvcEnvVar struct {
	value *ContainerSvcEnvVar
	isSet bool
}

func (v NullableContainerSvcEnvVar) Get() *ContainerSvcEnvVar {
	return v.value
}

func (v *NullableContainerSvcEnvVar) Set(val *ContainerSvcEnvVar) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerSvcEnvVar) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerSvcEnvVar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerSvcEnvVar(val *ContainerSvcEnvVar) *NullableContainerSvcEnvVar {
	return &NullableContainerSvcEnvVar{value: val, isSet: true}
}

func (v NullableContainerSvcEnvVar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerSvcEnvVar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


