/*
Singulatron

Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.

API version: 0.2
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatastoreCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreCondition{}

// DatastoreCondition struct for DatastoreCondition
type DatastoreCondition struct {
	// All condition returns all objects.
	All map[string]interface{} `json:"all,omitempty"`
	// Contains condition returns all objects where the field(s) values contain a particular string.
	Contains *DatastoreContainsCondition `json:"contains,omitempty"`
	// Equal condition returns objects where value of a field equals (=) to the specified value in the query.
	Equal *DatastoreEqualCondition `json:"equal,omitempty"`
	// StartsWith condition returns all objects where the field(s) values start with a particular string.
	StartsWith *DatastoreStartsWithCondition `json:"startsWith,omitempty"`
}

// NewDatastoreCondition instantiates a new DatastoreCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreCondition() *DatastoreCondition {
	this := DatastoreCondition{}
	return &this
}

// NewDatastoreConditionWithDefaults instantiates a new DatastoreCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreConditionWithDefaults() *DatastoreCondition {
	this := DatastoreCondition{}
	return &this
}

// GetAll returns the All field value if set, zero value otherwise.
func (o *DatastoreCondition) GetAll() map[string]interface{} {
	if o == nil || IsNil(o.All) {
		var ret map[string]interface{}
		return ret
	}
	return o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreCondition) GetAllOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.All) {
		return map[string]interface{}{}, false
	}
	return o.All, true
}

// HasAll returns a boolean if a field has been set.
func (o *DatastoreCondition) HasAll() bool {
	if o != nil && !IsNil(o.All) {
		return true
	}

	return false
}

// SetAll gets a reference to the given map[string]interface{} and assigns it to the All field.
func (o *DatastoreCondition) SetAll(v map[string]interface{}) {
	o.All = v
}

// GetContains returns the Contains field value if set, zero value otherwise.
func (o *DatastoreCondition) GetContains() DatastoreContainsCondition {
	if o == nil || IsNil(o.Contains) {
		var ret DatastoreContainsCondition
		return ret
	}
	return *o.Contains
}

// GetContainsOk returns a tuple with the Contains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreCondition) GetContainsOk() (*DatastoreContainsCondition, bool) {
	if o == nil || IsNil(o.Contains) {
		return nil, false
	}
	return o.Contains, true
}

// HasContains returns a boolean if a field has been set.
func (o *DatastoreCondition) HasContains() bool {
	if o != nil && !IsNil(o.Contains) {
		return true
	}

	return false
}

// SetContains gets a reference to the given DatastoreContainsCondition and assigns it to the Contains field.
func (o *DatastoreCondition) SetContains(v DatastoreContainsCondition) {
	o.Contains = &v
}

// GetEqual returns the Equal field value if set, zero value otherwise.
func (o *DatastoreCondition) GetEqual() DatastoreEqualCondition {
	if o == nil || IsNil(o.Equal) {
		var ret DatastoreEqualCondition
		return ret
	}
	return *o.Equal
}

// GetEqualOk returns a tuple with the Equal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreCondition) GetEqualOk() (*DatastoreEqualCondition, bool) {
	if o == nil || IsNil(o.Equal) {
		return nil, false
	}
	return o.Equal, true
}

// HasEqual returns a boolean if a field has been set.
func (o *DatastoreCondition) HasEqual() bool {
	if o != nil && !IsNil(o.Equal) {
		return true
	}

	return false
}

// SetEqual gets a reference to the given DatastoreEqualCondition and assigns it to the Equal field.
func (o *DatastoreCondition) SetEqual(v DatastoreEqualCondition) {
	o.Equal = &v
}

// GetStartsWith returns the StartsWith field value if set, zero value otherwise.
func (o *DatastoreCondition) GetStartsWith() DatastoreStartsWithCondition {
	if o == nil || IsNil(o.StartsWith) {
		var ret DatastoreStartsWithCondition
		return ret
	}
	return *o.StartsWith
}

// GetStartsWithOk returns a tuple with the StartsWith field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreCondition) GetStartsWithOk() (*DatastoreStartsWithCondition, bool) {
	if o == nil || IsNil(o.StartsWith) {
		return nil, false
	}
	return o.StartsWith, true
}

// HasStartsWith returns a boolean if a field has been set.
func (o *DatastoreCondition) HasStartsWith() bool {
	if o != nil && !IsNil(o.StartsWith) {
		return true
	}

	return false
}

// SetStartsWith gets a reference to the given DatastoreStartsWithCondition and assigns it to the StartsWith field.
func (o *DatastoreCondition) SetStartsWith(v DatastoreStartsWithCondition) {
	o.StartsWith = &v
}

func (o DatastoreCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.All) {
		toSerialize["all"] = o.All
	}
	if !IsNil(o.Contains) {
		toSerialize["contains"] = o.Contains
	}
	if !IsNil(o.Equal) {
		toSerialize["equal"] = o.Equal
	}
	if !IsNil(o.StartsWith) {
		toSerialize["startsWith"] = o.StartsWith
	}
	return toSerialize, nil
}

type NullableDatastoreCondition struct {
	value *DatastoreCondition
	isSet bool
}

func (v NullableDatastoreCondition) Get() *DatastoreCondition {
	return v.value
}

func (v *NullableDatastoreCondition) Set(val *DatastoreCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreCondition(val *DatastoreCondition) *NullableDatastoreCondition {
	return &NullableDatastoreCondition{value: val, isSet: true}
}

func (v NullableDatastoreCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


