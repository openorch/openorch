/*
OpenOrch

On-premise AI platform and microservices ecosystem.

API version: 0.3.0-rc.10
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"os"
	"bytes"
	"fmt"
)

// checks if the UploadFileRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadFileRequest{}

// UploadFileRequest struct for UploadFileRequest
type UploadFileRequest struct {
	// File to upload
	File *os.File `json:"file"`
}

type _UploadFileRequest UploadFileRequest

// NewUploadFileRequest instantiates a new UploadFileRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadFileRequest(file *os.File) *UploadFileRequest {
	this := UploadFileRequest{}
	this.File = file
	return &this
}

// NewUploadFileRequestWithDefaults instantiates a new UploadFileRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadFileRequestWithDefaults() *UploadFileRequest {
	this := UploadFileRequest{}
	return &this
}

// GetFile returns the File field value
func (o *UploadFileRequest) GetFile() *os.File {
	if o == nil {
		var ret *os.File
		return ret
	}

	return o.File
}

// GetFileOk returns a tuple with the File field value
// and a boolean to check if the value has been set.
func (o *UploadFileRequest) GetFileOk() (**os.File, bool) {
	if o == nil {
		return nil, false
	}
	return &o.File, true
}

// SetFile sets field value
func (o *UploadFileRequest) SetFile(v *os.File) {
	o.File = v
}

func (o UploadFileRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadFileRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file"] = o.File
	return toSerialize, nil
}

func (o *UploadFileRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUploadFileRequest := _UploadFileRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUploadFileRequest)

	if err != nil {
		return err
	}

	*o = UploadFileRequest(varUploadFileRequest)

	return err
}

type NullableUploadFileRequest struct {
	value *UploadFileRequest
	isSet bool
}

func (v NullableUploadFileRequest) Get() *UploadFileRequest {
	return v.value
}

func (v *NullableUploadFileRequest) Set(val *UploadFileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadFileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadFileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadFileRequest(val *UploadFileRequest) *NullableUploadFileRequest {
	return &NullableUploadFileRequest{value: val, isSet: true}
}

func (v NullableUploadFileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadFileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


