/*
OpenOrch

A language-agnostic microservices framework for AI applications.

API version: 0.3.0-rc.19
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ContainerSvcDockerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerSvcDockerInfo{}

// ContainerSvcDockerInfo struct for ContainerSvcDockerInfo
type ContainerSvcDockerInfo struct {
	DockerDaemonAddress *string `json:"dockerDaemonAddress,omitempty"`
	Error *string `json:"error,omitempty"`
	HasDocker *bool `json:"hasDocker,omitempty"`
}

// NewContainerSvcDockerInfo instantiates a new ContainerSvcDockerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerSvcDockerInfo() *ContainerSvcDockerInfo {
	this := ContainerSvcDockerInfo{}
	return &this
}

// NewContainerSvcDockerInfoWithDefaults instantiates a new ContainerSvcDockerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerSvcDockerInfoWithDefaults() *ContainerSvcDockerInfo {
	this := ContainerSvcDockerInfo{}
	return &this
}

// GetDockerDaemonAddress returns the DockerDaemonAddress field value if set, zero value otherwise.
func (o *ContainerSvcDockerInfo) GetDockerDaemonAddress() string {
	if o == nil || IsNil(o.DockerDaemonAddress) {
		var ret string
		return ret
	}
	return *o.DockerDaemonAddress
}

// GetDockerDaemonAddressOk returns a tuple with the DockerDaemonAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSvcDockerInfo) GetDockerDaemonAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DockerDaemonAddress) {
		return nil, false
	}
	return o.DockerDaemonAddress, true
}

// HasDockerDaemonAddress returns a boolean if a field has been set.
func (o *ContainerSvcDockerInfo) HasDockerDaemonAddress() bool {
	if o != nil && !IsNil(o.DockerDaemonAddress) {
		return true
	}

	return false
}

// SetDockerDaemonAddress gets a reference to the given string and assigns it to the DockerDaemonAddress field.
func (o *ContainerSvcDockerInfo) SetDockerDaemonAddress(v string) {
	o.DockerDaemonAddress = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ContainerSvcDockerInfo) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSvcDockerInfo) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ContainerSvcDockerInfo) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ContainerSvcDockerInfo) SetError(v string) {
	o.Error = &v
}

// GetHasDocker returns the HasDocker field value if set, zero value otherwise.
func (o *ContainerSvcDockerInfo) GetHasDocker() bool {
	if o == nil || IsNil(o.HasDocker) {
		var ret bool
		return ret
	}
	return *o.HasDocker
}

// GetHasDockerOk returns a tuple with the HasDocker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSvcDockerInfo) GetHasDockerOk() (*bool, bool) {
	if o == nil || IsNil(o.HasDocker) {
		return nil, false
	}
	return o.HasDocker, true
}

// HasHasDocker returns a boolean if a field has been set.
func (o *ContainerSvcDockerInfo) HasHasDocker() bool {
	if o != nil && !IsNil(o.HasDocker) {
		return true
	}

	return false
}

// SetHasDocker gets a reference to the given bool and assigns it to the HasDocker field.
func (o *ContainerSvcDockerInfo) SetHasDocker(v bool) {
	o.HasDocker = &v
}

func (o ContainerSvcDockerInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerSvcDockerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DockerDaemonAddress) {
		toSerialize["dockerDaemonAddress"] = o.DockerDaemonAddress
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.HasDocker) {
		toSerialize["hasDocker"] = o.HasDocker
	}
	return toSerialize, nil
}

type NullableContainerSvcDockerInfo struct {
	value *ContainerSvcDockerInfo
	isSet bool
}

func (v NullableContainerSvcDockerInfo) Get() *ContainerSvcDockerInfo {
	return v.value
}

func (v *NullableContainerSvcDockerInfo) Set(val *ContainerSvcDockerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerSvcDockerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerSvcDockerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerSvcDockerInfo(val *ContainerSvcDockerInfo) *NullableContainerSvcDockerInfo {
	return &NullableContainerSvcDockerInfo{value: val, isSet: true}
}

func (v NullableContainerSvcDockerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerSvcDockerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


