/*
Singulatron

AI management and development platform.

API version: 0.2
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RegistrySvcNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegistrySvcNode{}

// RegistrySvcNode struct for RegistrySvcNode
type RegistrySvcNode struct {
	// List of GPUs available on the node
	Gpus []RegistrySvcGPU `json:"gpus,omitempty"`
	// URL of the daemon running on the node. If not configured defaults to hostname + default Singulatron daemon port.
	Url *string `json:"url,omitempty"`
}

// NewRegistrySvcNode instantiates a new RegistrySvcNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistrySvcNode() *RegistrySvcNode {
	this := RegistrySvcNode{}
	return &this
}

// NewRegistrySvcNodeWithDefaults instantiates a new RegistrySvcNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistrySvcNodeWithDefaults() *RegistrySvcNode {
	this := RegistrySvcNode{}
	return &this
}

// GetGpus returns the Gpus field value if set, zero value otherwise.
func (o *RegistrySvcNode) GetGpus() []RegistrySvcGPU {
	if o == nil || IsNil(o.Gpus) {
		var ret []RegistrySvcGPU
		return ret
	}
	return o.Gpus
}

// GetGpusOk returns a tuple with the Gpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrySvcNode) GetGpusOk() ([]RegistrySvcGPU, bool) {
	if o == nil || IsNil(o.Gpus) {
		return nil, false
	}
	return o.Gpus, true
}

// HasGpus returns a boolean if a field has been set.
func (o *RegistrySvcNode) HasGpus() bool {
	if o != nil && !IsNil(o.Gpus) {
		return true
	}

	return false
}

// SetGpus gets a reference to the given []RegistrySvcGPU and assigns it to the Gpus field.
func (o *RegistrySvcNode) SetGpus(v []RegistrySvcGPU) {
	o.Gpus = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *RegistrySvcNode) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrySvcNode) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *RegistrySvcNode) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *RegistrySvcNode) SetUrl(v string) {
	o.Url = &v
}

func (o RegistrySvcNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegistrySvcNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Gpus) {
		toSerialize["gpus"] = o.Gpus
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableRegistrySvcNode struct {
	value *RegistrySvcNode
	isSet bool
}

func (v NullableRegistrySvcNode) Get() *RegistrySvcNode {
	return v.value
}

func (v *NullableRegistrySvcNode) Set(val *RegistrySvcNode) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistrySvcNode) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistrySvcNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistrySvcNode(val *RegistrySvcNode) *NullableRegistrySvcNode {
	return &NullableRegistrySvcNode{value: val, isSet: true}
}

func (v NullableRegistrySvcNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistrySvcNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


