/*
Singulatron

Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.

API version: 0.2
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GenericSvcQueryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenericSvcQueryRequest{}

// GenericSvcQueryRequest struct for GenericSvcQueryRequest
type GenericSvcQueryRequest struct {
	Public *bool `json:"public,omitempty"`
	Query *DatastoreQuery `json:"query,omitempty"`
	Table *string `json:"table,omitempty"`
}

// NewGenericSvcQueryRequest instantiates a new GenericSvcQueryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenericSvcQueryRequest() *GenericSvcQueryRequest {
	this := GenericSvcQueryRequest{}
	return &this
}

// NewGenericSvcQueryRequestWithDefaults instantiates a new GenericSvcQueryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenericSvcQueryRequestWithDefaults() *GenericSvcQueryRequest {
	this := GenericSvcQueryRequest{}
	return &this
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *GenericSvcQueryRequest) GetPublic() bool {
	if o == nil || IsNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericSvcQueryRequest) GetPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *GenericSvcQueryRequest) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *GenericSvcQueryRequest) SetPublic(v bool) {
	o.Public = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *GenericSvcQueryRequest) GetQuery() DatastoreQuery {
	if o == nil || IsNil(o.Query) {
		var ret DatastoreQuery
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericSvcQueryRequest) GetQueryOk() (*DatastoreQuery, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *GenericSvcQueryRequest) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given DatastoreQuery and assigns it to the Query field.
func (o *GenericSvcQueryRequest) SetQuery(v DatastoreQuery) {
	o.Query = &v
}

// GetTable returns the Table field value if set, zero value otherwise.
func (o *GenericSvcQueryRequest) GetTable() string {
	if o == nil || IsNil(o.Table) {
		var ret string
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericSvcQueryRequest) GetTableOk() (*string, bool) {
	if o == nil || IsNil(o.Table) {
		return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *GenericSvcQueryRequest) HasTable() bool {
	if o != nil && !IsNil(o.Table) {
		return true
	}

	return false
}

// SetTable gets a reference to the given string and assigns it to the Table field.
func (o *GenericSvcQueryRequest) SetTable(v string) {
	o.Table = &v
}

func (o GenericSvcQueryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenericSvcQueryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.Table) {
		toSerialize["table"] = o.Table
	}
	return toSerialize, nil
}

type NullableGenericSvcQueryRequest struct {
	value *GenericSvcQueryRequest
	isSet bool
}

func (v NullableGenericSvcQueryRequest) Get() *GenericSvcQueryRequest {
	return v.value
}

func (v *NullableGenericSvcQueryRequest) Set(val *GenericSvcQueryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericSvcQueryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericSvcQueryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericSvcQueryRequest(val *GenericSvcQueryRequest) *NullableGenericSvcQueryRequest {
	return &NullableGenericSvcQueryRequest{value: val, isSet: true}
}

func (v NullableGenericSvcQueryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericSvcQueryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


