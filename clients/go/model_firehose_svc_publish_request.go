/*
Singulatron

AI management and development platform.

API version: 0.2
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FirehoseSvcPublishRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirehoseSvcPublishRequest{}

// FirehoseSvcPublishRequest struct for FirehoseSvcPublishRequest
type FirehoseSvcPublishRequest struct {
	Event *FirehoseSvcEvent `json:"event,omitempty"`
}

// NewFirehoseSvcPublishRequest instantiates a new FirehoseSvcPublishRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirehoseSvcPublishRequest() *FirehoseSvcPublishRequest {
	this := FirehoseSvcPublishRequest{}
	return &this
}

// NewFirehoseSvcPublishRequestWithDefaults instantiates a new FirehoseSvcPublishRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirehoseSvcPublishRequestWithDefaults() *FirehoseSvcPublishRequest {
	this := FirehoseSvcPublishRequest{}
	return &this
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *FirehoseSvcPublishRequest) GetEvent() FirehoseSvcEvent {
	if o == nil || IsNil(o.Event) {
		var ret FirehoseSvcEvent
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirehoseSvcPublishRequest) GetEventOk() (*FirehoseSvcEvent, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *FirehoseSvcPublishRequest) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given FirehoseSvcEvent and assigns it to the Event field.
func (o *FirehoseSvcPublishRequest) SetEvent(v FirehoseSvcEvent) {
	o.Event = &v
}

func (o FirehoseSvcPublishRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirehoseSvcPublishRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	return toSerialize, nil
}

type NullableFirehoseSvcPublishRequest struct {
	value *FirehoseSvcPublishRequest
	isSet bool
}

func (v NullableFirehoseSvcPublishRequest) Get() *FirehoseSvcPublishRequest {
	return v.value
}

func (v *NullableFirehoseSvcPublishRequest) Set(val *FirehoseSvcPublishRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFirehoseSvcPublishRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFirehoseSvcPublishRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirehoseSvcPublishRequest(val *FirehoseSvcPublishRequest) *NullableFirehoseSvcPublishRequest {
	return &NullableFirehoseSvcPublishRequest{value: val, isSet: true}
}

func (v NullableFirehoseSvcPublishRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirehoseSvcPublishRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


