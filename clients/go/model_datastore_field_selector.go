/*
Singulatron

Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.

API version: 0.2
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatastoreFieldSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreFieldSelector{}

// DatastoreFieldSelector struct for DatastoreFieldSelector
type DatastoreFieldSelector struct {
	// Any matches any fields in the object
	Any *bool `json:"any,omitempty"`
	// Field matchies a single field
	Field *string `json:"field,omitempty"`
	// OneOf matches a number of fields
	OneOf []string `json:"oneOf,omitempty"`
}

// NewDatastoreFieldSelector instantiates a new DatastoreFieldSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreFieldSelector() *DatastoreFieldSelector {
	this := DatastoreFieldSelector{}
	return &this
}

// NewDatastoreFieldSelectorWithDefaults instantiates a new DatastoreFieldSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreFieldSelectorWithDefaults() *DatastoreFieldSelector {
	this := DatastoreFieldSelector{}
	return &this
}

// GetAny returns the Any field value if set, zero value otherwise.
func (o *DatastoreFieldSelector) GetAny() bool {
	if o == nil || IsNil(o.Any) {
		var ret bool
		return ret
	}
	return *o.Any
}

// GetAnyOk returns a tuple with the Any field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreFieldSelector) GetAnyOk() (*bool, bool) {
	if o == nil || IsNil(o.Any) {
		return nil, false
	}
	return o.Any, true
}

// HasAny returns a boolean if a field has been set.
func (o *DatastoreFieldSelector) HasAny() bool {
	if o != nil && !IsNil(o.Any) {
		return true
	}

	return false
}

// SetAny gets a reference to the given bool and assigns it to the Any field.
func (o *DatastoreFieldSelector) SetAny(v bool) {
	o.Any = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *DatastoreFieldSelector) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreFieldSelector) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *DatastoreFieldSelector) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *DatastoreFieldSelector) SetField(v string) {
	o.Field = &v
}

// GetOneOf returns the OneOf field value if set, zero value otherwise.
func (o *DatastoreFieldSelector) GetOneOf() []string {
	if o == nil || IsNil(o.OneOf) {
		var ret []string
		return ret
	}
	return o.OneOf
}

// GetOneOfOk returns a tuple with the OneOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreFieldSelector) GetOneOfOk() ([]string, bool) {
	if o == nil || IsNil(o.OneOf) {
		return nil, false
	}
	return o.OneOf, true
}

// HasOneOf returns a boolean if a field has been set.
func (o *DatastoreFieldSelector) HasOneOf() bool {
	if o != nil && !IsNil(o.OneOf) {
		return true
	}

	return false
}

// SetOneOf gets a reference to the given []string and assigns it to the OneOf field.
func (o *DatastoreFieldSelector) SetOneOf(v []string) {
	o.OneOf = v
}

func (o DatastoreFieldSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreFieldSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Any) {
		toSerialize["any"] = o.Any
	}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.OneOf) {
		toSerialize["oneOf"] = o.OneOf
	}
	return toSerialize, nil
}

type NullableDatastoreFieldSelector struct {
	value *DatastoreFieldSelector
	isSet bool
}

func (v NullableDatastoreFieldSelector) Get() *DatastoreFieldSelector {
	return v.value
}

func (v *NullableDatastoreFieldSelector) Set(val *DatastoreFieldSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreFieldSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreFieldSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreFieldSelector(val *DatastoreFieldSelector) *NullableDatastoreFieldSelector {
	return &NullableDatastoreFieldSelector{value: val, isSet: true}
}

func (v NullableDatastoreFieldSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreFieldSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


