/*
OpenOrch

On-premise AI platform and microservices ecosystem.

API version: 0.3.0-rc.11
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StreammanagerChunkType the model 'StreammanagerChunkType'
type StreammanagerChunkType string

// List of streammanager.ChunkType
const (
	ChunkTypeProgress StreammanagerChunkType = "progress"
	ChunkTypeDone StreammanagerChunkType = "done"
)

// All allowed values of StreammanagerChunkType enum
var AllowedStreammanagerChunkTypeEnumValues = []StreammanagerChunkType{
	"progress",
	"done",
}

func (v *StreammanagerChunkType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreammanagerChunkType(value)
	for _, existing := range AllowedStreammanagerChunkTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreammanagerChunkType", value)
}

// NewStreammanagerChunkTypeFromValue returns a pointer to a valid StreammanagerChunkType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreammanagerChunkTypeFromValue(v string) (*StreammanagerChunkType, error) {
	ev := StreammanagerChunkType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreammanagerChunkType: valid values are %v", v, AllowedStreammanagerChunkTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreammanagerChunkType) IsValid() bool {
	for _, existing := range AllowedStreammanagerChunkTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to streammanager.ChunkType value
func (v StreammanagerChunkType) Ptr() *StreammanagerChunkType {
	return &v
}

type NullableStreammanagerChunkType struct {
	value *StreammanagerChunkType
	isSet bool
}

func (v NullableStreammanagerChunkType) Get() *StreammanagerChunkType {
	return v.value
}

func (v *NullableStreammanagerChunkType) Set(val *StreammanagerChunkType) {
	v.value = val
	v.isSet = true
}

func (v NullableStreammanagerChunkType) IsSet() bool {
	return v.isSet
}

func (v *NullableStreammanagerChunkType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreammanagerChunkType(val *StreammanagerChunkType) *NullableStreammanagerChunkType {
	return &NullableStreammanagerChunkType{value: val, isSet: true}
}

func (v NullableStreammanagerChunkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreammanagerChunkType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

