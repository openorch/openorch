/*
OpenOrch

On-premise AI platform and microservices ecosystem.

API version: 0.3.0-rc.7
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SecretSvcReadSecretsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretSvcReadSecretsRequest{}

// SecretSvcReadSecretsRequest struct for SecretSvcReadSecretsRequest
type SecretSvcReadSecretsRequest struct {
	Key *string `json:"key,omitempty"`
	Keys []string `json:"keys,omitempty"`
}

// NewSecretSvcReadSecretsRequest instantiates a new SecretSvcReadSecretsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretSvcReadSecretsRequest() *SecretSvcReadSecretsRequest {
	this := SecretSvcReadSecretsRequest{}
	return &this
}

// NewSecretSvcReadSecretsRequestWithDefaults instantiates a new SecretSvcReadSecretsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretSvcReadSecretsRequestWithDefaults() *SecretSvcReadSecretsRequest {
	this := SecretSvcReadSecretsRequest{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SecretSvcReadSecretsRequest) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretSvcReadSecretsRequest) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SecretSvcReadSecretsRequest) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SecretSvcReadSecretsRequest) SetKey(v string) {
	o.Key = &v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *SecretSvcReadSecretsRequest) GetKeys() []string {
	if o == nil || IsNil(o.Keys) {
		var ret []string
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretSvcReadSecretsRequest) GetKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *SecretSvcReadSecretsRequest) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []string and assigns it to the Keys field.
func (o *SecretSvcReadSecretsRequest) SetKeys(v []string) {
	o.Keys = v
}

func (o SecretSvcReadSecretsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretSvcReadSecretsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	return toSerialize, nil
}

type NullableSecretSvcReadSecretsRequest struct {
	value *SecretSvcReadSecretsRequest
	isSet bool
}

func (v NullableSecretSvcReadSecretsRequest) Get() *SecretSvcReadSecretsRequest {
	return v.value
}

func (v *NullableSecretSvcReadSecretsRequest) Set(val *SecretSvcReadSecretsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretSvcReadSecretsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretSvcReadSecretsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretSvcReadSecretsRequest(val *SecretSvcReadSecretsRequest) *NullableSecretSvcReadSecretsRequest {
	return &NullableSecretSvcReadSecretsRequest{value: val, isSet: true}
}

func (v NullableSecretSvcReadSecretsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretSvcReadSecretsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


