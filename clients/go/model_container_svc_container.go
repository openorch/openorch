/*
OpenOrch

A language-agnostic microservices framework for building AI applications.

API version: 0.3.0-rc.27
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ContainerSvcContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerSvcContainer{}

// ContainerSvcContainer struct for ContainerSvcContainer
type ContainerSvcContainer struct {
	// Envs are environment variables set within the container.
	Envs []string `json:"envs,omitempty"`
	// GPUEnabled specifies whether GPU support is enabled for the container.
	GpuEnabled *bool `json:"gpuEnabled,omitempty"`
	// Hash is a unique identifier associated with the container.
	Hash *string `json:"hash,omitempty"`
	// HostPort is the port on the host machine mapped to the containerâ€™s internal port.
	HostPort *int32 `json:"hostPort,omitempty"`
	// Id is the unique identifier for the container instance.
	Id *string `json:"id,omitempty"`
	// Image is the Docker image used to create the container.
	Image *string `json:"image,omitempty"`
	// Keeps are paths that persist across container restarts. They function like mounts or volumes, but their external storage location is irrelevant.
	Keeps []string `json:"keeps,omitempty"`
	// Labels are metadata tags assigned to the container.
	Labels *map[string]string `json:"labels,omitempty"`
	// Name is the human-readable name assigned to the container.
	Name *string `json:"name,omitempty"`
	// Node Id Please see the documentation for the envar OPENORCH_NODE_ID
	NodeId *string `json:"nodeId,omitempty"`
	// Port is the internal port exposed by the container.
	Port *int32 `json:"port,omitempty"`
	// Status indicates the current state of the container (e.g., running, stopped).
	Status *string `json:"status,omitempty"`
}

// NewContainerSvcContainer instantiates a new ContainerSvcContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerSvcContainer() *ContainerSvcContainer {
	this := ContainerSvcContainer{}
	return &this
}

// NewContainerSvcContainerWithDefaults instantiates a new ContainerSvcContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerSvcContainerWithDefaults() *ContainerSvcContainer {
	this := ContainerSvcContainer{}
	return &this
}

// GetEnvs returns the Envs field value if set, zero value otherwise.
func (o *ContainerSvcContainer) GetEnvs() []string {
	if o == nil || IsNil(o.Envs) {
		var ret []string
		return ret
	}
	return o.Envs
}

// GetEnvsOk returns a tuple with the Envs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSvcContainer) GetEnvsOk() ([]string, bool) {
	if o == nil || IsNil(o.Envs) {
		return nil, false
	}
	return o.Envs, true
}

// HasEnvs returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasEnvs() bool {
	if o != nil && !IsNil(o.Envs) {
		return true
	}

	return false
}

// SetEnvs gets a reference to the given []string and assigns it to the Envs field.
func (o *ContainerSvcContainer) SetEnvs(v []string) {
	o.Envs = v
}

// GetGpuEnabled returns the GpuEnabled field value if set, zero value otherwise.
func (o *ContainerSvcContainer) GetGpuEnabled() bool {
	if o == nil || IsNil(o.GpuEnabled) {
		var ret bool
		return ret
	}
	return *o.GpuEnabled
}

// GetGpuEnabledOk returns a tuple with the GpuEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSvcContainer) GetGpuEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.GpuEnabled) {
		return nil, false
	}
	return o.GpuEnabled, true
}

// HasGpuEnabled returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasGpuEnabled() bool {
	if o != nil && !IsNil(o.GpuEnabled) {
		return true
	}

	return false
}

// SetGpuEnabled gets a reference to the given bool and assigns it to the GpuEnabled field.
func (o *ContainerSvcContainer) SetGpuEnabled(v bool) {
	o.GpuEnabled = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *ContainerSvcContainer) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSvcContainer) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *ContainerSvcContainer) SetHash(v string) {
	o.Hash = &v
}

// GetHostPort returns the HostPort field value if set, zero value otherwise.
func (o *ContainerSvcContainer) GetHostPort() int32 {
	if o == nil || IsNil(o.HostPort) {
		var ret int32
		return ret
	}
	return *o.HostPort
}

// GetHostPortOk returns a tuple with the HostPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSvcContainer) GetHostPortOk() (*int32, bool) {
	if o == nil || IsNil(o.HostPort) {
		return nil, false
	}
	return o.HostPort, true
}

// HasHostPort returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasHostPort() bool {
	if o != nil && !IsNil(o.HostPort) {
		return true
	}

	return false
}

// SetHostPort gets a reference to the given int32 and assigns it to the HostPort field.
func (o *ContainerSvcContainer) SetHostPort(v int32) {
	o.HostPort = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ContainerSvcContainer) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSvcContainer) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ContainerSvcContainer) SetId(v string) {
	o.Id = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *ContainerSvcContainer) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSvcContainer) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *ContainerSvcContainer) SetImage(v string) {
	o.Image = &v
}

// GetKeeps returns the Keeps field value if set, zero value otherwise.
func (o *ContainerSvcContainer) GetKeeps() []string {
	if o == nil || IsNil(o.Keeps) {
		var ret []string
		return ret
	}
	return o.Keeps
}

// GetKeepsOk returns a tuple with the Keeps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSvcContainer) GetKeepsOk() ([]string, bool) {
	if o == nil || IsNil(o.Keeps) {
		return nil, false
	}
	return o.Keeps, true
}

// HasKeeps returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasKeeps() bool {
	if o != nil && !IsNil(o.Keeps) {
		return true
	}

	return false
}

// SetKeeps gets a reference to the given []string and assigns it to the Keeps field.
func (o *ContainerSvcContainer) SetKeeps(v []string) {
	o.Keeps = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ContainerSvcContainer) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSvcContainer) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *ContainerSvcContainer) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ContainerSvcContainer) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSvcContainer) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ContainerSvcContainer) SetName(v string) {
	o.Name = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *ContainerSvcContainer) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSvcContainer) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *ContainerSvcContainer) SetNodeId(v string) {
	o.NodeId = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *ContainerSvcContainer) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSvcContainer) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *ContainerSvcContainer) SetPort(v int32) {
	o.Port = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ContainerSvcContainer) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerSvcContainer) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ContainerSvcContainer) SetStatus(v string) {
	o.Status = &v
}

func (o ContainerSvcContainer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerSvcContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Envs) {
		toSerialize["envs"] = o.Envs
	}
	if !IsNil(o.GpuEnabled) {
		toSerialize["gpuEnabled"] = o.GpuEnabled
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.HostPort) {
		toSerialize["hostPort"] = o.HostPort
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.Keeps) {
		toSerialize["keeps"] = o.Keeps
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NodeId) {
		toSerialize["nodeId"] = o.NodeId
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableContainerSvcContainer struct {
	value *ContainerSvcContainer
	isSet bool
}

func (v NullableContainerSvcContainer) Get() *ContainerSvcContainer {
	return v.value
}

func (v *NullableContainerSvcContainer) Set(val *ContainerSvcContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerSvcContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerSvcContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerSvcContainer(val *ContainerSvcContainer) *NullableContainerSvcContainer {
	return &NullableContainerSvcContainer{value: val, isSet: true}
}

func (v NullableContainerSvcContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerSvcContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


