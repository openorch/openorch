/*
Superplatform

On-premise AI platform and microservices ecosystem.

API version: 0.3.0-rc.1
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SecretSvcSecret type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretSvcSecret{}

// SecretSvcSecret struct for SecretSvcSecret
type SecretSvcSecret struct {
	// Id of the secret
	Id *string `json:"id,omitempty"`
	// Envar or slug-like key of the secret
	Key *string `json:"key,omitempty"`
	// Slugs of services/users who can read the secret
	Readers []string `json:"readers,omitempty"`
	// Secret Value
	Value *string `json:"value,omitempty"`
	// Slugs of services/users who can modify the secret
	Writers []string `json:"writers,omitempty"`
}

// NewSecretSvcSecret instantiates a new SecretSvcSecret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretSvcSecret() *SecretSvcSecret {
	this := SecretSvcSecret{}
	return &this
}

// NewSecretSvcSecretWithDefaults instantiates a new SecretSvcSecret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretSvcSecretWithDefaults() *SecretSvcSecret {
	this := SecretSvcSecret{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SecretSvcSecret) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretSvcSecret) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SecretSvcSecret) SetId(v string) {
	o.Id = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SecretSvcSecret) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretSvcSecret) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SecretSvcSecret) SetKey(v string) {
	o.Key = &v
}

// GetReaders returns the Readers field value if set, zero value otherwise.
func (o *SecretSvcSecret) GetReaders() []string {
	if o == nil || IsNil(o.Readers) {
		var ret []string
		return ret
	}
	return o.Readers
}

// GetReadersOk returns a tuple with the Readers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretSvcSecret) GetReadersOk() ([]string, bool) {
	if o == nil || IsNil(o.Readers) {
		return nil, false
	}
	return o.Readers, true
}

// HasReaders returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasReaders() bool {
	if o != nil && !IsNil(o.Readers) {
		return true
	}

	return false
}

// SetReaders gets a reference to the given []string and assigns it to the Readers field.
func (o *SecretSvcSecret) SetReaders(v []string) {
	o.Readers = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SecretSvcSecret) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretSvcSecret) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SecretSvcSecret) SetValue(v string) {
	o.Value = &v
}

// GetWriters returns the Writers field value if set, zero value otherwise.
func (o *SecretSvcSecret) GetWriters() []string {
	if o == nil || IsNil(o.Writers) {
		var ret []string
		return ret
	}
	return o.Writers
}

// GetWritersOk returns a tuple with the Writers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretSvcSecret) GetWritersOk() ([]string, bool) {
	if o == nil || IsNil(o.Writers) {
		return nil, false
	}
	return o.Writers, true
}

// HasWriters returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasWriters() bool {
	if o != nil && !IsNil(o.Writers) {
		return true
	}

	return false
}

// SetWriters gets a reference to the given []string and assigns it to the Writers field.
func (o *SecretSvcSecret) SetWriters(v []string) {
	o.Writers = v
}

func (o SecretSvcSecret) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretSvcSecret) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Readers) {
		toSerialize["readers"] = o.Readers
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Writers) {
		toSerialize["writers"] = o.Writers
	}
	return toSerialize, nil
}

type NullableSecretSvcSecret struct {
	value *SecretSvcSecret
	isSet bool
}

func (v NullableSecretSvcSecret) Get() *SecretSvcSecret {
	return v.value
}

func (v *NullableSecretSvcSecret) Set(val *SecretSvcSecret) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretSvcSecret) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretSvcSecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretSvcSecret(val *SecretSvcSecret) *NullableSecretSvcSecret {
	return &NullableSecretSvcSecret{value: val, isSet: true}
}

func (v NullableSecretSvcSecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretSvcSecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


