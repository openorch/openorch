/*
Superplatform

On-premise AI platform and microservices ecosystem.

API version: 0.3.0-rc.3
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DockerSvcRunInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DockerSvcRunInfo{}

// DockerSvcRunInfo struct for DockerSvcRunInfo
type DockerSvcRunInfo struct {
	NewContainerStarted *bool `json:"newContainerStarted,omitempty"`
	PortNumber *int32 `json:"portNumber,omitempty"`
}

// NewDockerSvcRunInfo instantiates a new DockerSvcRunInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDockerSvcRunInfo() *DockerSvcRunInfo {
	this := DockerSvcRunInfo{}
	return &this
}

// NewDockerSvcRunInfoWithDefaults instantiates a new DockerSvcRunInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDockerSvcRunInfoWithDefaults() *DockerSvcRunInfo {
	this := DockerSvcRunInfo{}
	return &this
}

// GetNewContainerStarted returns the NewContainerStarted field value if set, zero value otherwise.
func (o *DockerSvcRunInfo) GetNewContainerStarted() bool {
	if o == nil || IsNil(o.NewContainerStarted) {
		var ret bool
		return ret
	}
	return *o.NewContainerStarted
}

// GetNewContainerStartedOk returns a tuple with the NewContainerStarted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerSvcRunInfo) GetNewContainerStartedOk() (*bool, bool) {
	if o == nil || IsNil(o.NewContainerStarted) {
		return nil, false
	}
	return o.NewContainerStarted, true
}

// HasNewContainerStarted returns a boolean if a field has been set.
func (o *DockerSvcRunInfo) HasNewContainerStarted() bool {
	if o != nil && !IsNil(o.NewContainerStarted) {
		return true
	}

	return false
}

// SetNewContainerStarted gets a reference to the given bool and assigns it to the NewContainerStarted field.
func (o *DockerSvcRunInfo) SetNewContainerStarted(v bool) {
	o.NewContainerStarted = &v
}

// GetPortNumber returns the PortNumber field value if set, zero value otherwise.
func (o *DockerSvcRunInfo) GetPortNumber() int32 {
	if o == nil || IsNil(o.PortNumber) {
		var ret int32
		return ret
	}
	return *o.PortNumber
}

// GetPortNumberOk returns a tuple with the PortNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerSvcRunInfo) GetPortNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.PortNumber) {
		return nil, false
	}
	return o.PortNumber, true
}

// HasPortNumber returns a boolean if a field has been set.
func (o *DockerSvcRunInfo) HasPortNumber() bool {
	if o != nil && !IsNil(o.PortNumber) {
		return true
	}

	return false
}

// SetPortNumber gets a reference to the given int32 and assigns it to the PortNumber field.
func (o *DockerSvcRunInfo) SetPortNumber(v int32) {
	o.PortNumber = &v
}

func (o DockerSvcRunInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DockerSvcRunInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NewContainerStarted) {
		toSerialize["newContainerStarted"] = o.NewContainerStarted
	}
	if !IsNil(o.PortNumber) {
		toSerialize["portNumber"] = o.PortNumber
	}
	return toSerialize, nil
}

type NullableDockerSvcRunInfo struct {
	value *DockerSvcRunInfo
	isSet bool
}

func (v NullableDockerSvcRunInfo) Get() *DockerSvcRunInfo {
	return v.value
}

func (v *NullableDockerSvcRunInfo) Set(val *DockerSvcRunInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDockerSvcRunInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDockerSvcRunInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockerSvcRunInfo(val *DockerSvcRunInfo) *NullableDockerSvcRunInfo {
	return &NullableDockerSvcRunInfo{value: val, isSet: true}
}

func (v NullableDockerSvcRunInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDockerSvcRunInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


