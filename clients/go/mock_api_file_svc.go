// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//

// Package openapi is a generated GoMock package.
package openapi

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileSvcAPI is a mock of FileSvcAPI interface.
type MockFileSvcAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFileSvcAPIMockRecorder
	isgomock struct{}
}

// MockFileSvcAPIMockRecorder is the mock recorder for MockFileSvcAPI.
type MockFileSvcAPIMockRecorder struct {
	mock *MockFileSvcAPI
}

// NewMockFileSvcAPI creates a new mock instance.
func NewMockFileSvcAPI(ctrl *gomock.Controller) *MockFileSvcAPI {
	mock := &MockFileSvcAPI{ctrl: ctrl}
	mock.recorder = &MockFileSvcAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSvcAPI) EXPECT() *MockFileSvcAPIMockRecorder {
	return m.recorder
}

// DownloadFile mocks base method.
func (m *MockFileSvcAPI) DownloadFile(ctx context.Context) ApiDownloadFileRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", ctx)
	ret0, _ := ret[0].(ApiDownloadFileRequest)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockFileSvcAPIMockRecorder) DownloadFile(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFileSvcAPI)(nil).DownloadFile), ctx)
}

// DownloadFileExecute mocks base method.
func (m *MockFileSvcAPI) DownloadFileExecute(r ApiDownloadFileRequest) (map[string]any, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFileExecute", r)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadFileExecute indicates an expected call of DownloadFileExecute.
func (mr *MockFileSvcAPIMockRecorder) DownloadFileExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFileExecute", reflect.TypeOf((*MockFileSvcAPI)(nil).DownloadFileExecute), r)
}

// GetDownload mocks base method.
func (m *MockFileSvcAPI) GetDownload(ctx context.Context, downloadId string) ApiGetDownloadRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownload", ctx, downloadId)
	ret0, _ := ret[0].(ApiGetDownloadRequest)
	return ret0
}

// GetDownload indicates an expected call of GetDownload.
func (mr *MockFileSvcAPIMockRecorder) GetDownload(ctx, downloadId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownload", reflect.TypeOf((*MockFileSvcAPI)(nil).GetDownload), ctx, downloadId)
}

// GetDownloadExecute mocks base method.
func (m *MockFileSvcAPI) GetDownloadExecute(r ApiGetDownloadRequest) (*FileSvcGetDownloadResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadExecute", r)
	ret0, _ := ret[0].(*FileSvcGetDownloadResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDownloadExecute indicates an expected call of GetDownloadExecute.
func (mr *MockFileSvcAPIMockRecorder) GetDownloadExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadExecute", reflect.TypeOf((*MockFileSvcAPI)(nil).GetDownloadExecute), r)
}

// ListDownloads mocks base method.
func (m *MockFileSvcAPI) ListDownloads(ctx context.Context) ApiListDownloadsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDownloads", ctx)
	ret0, _ := ret[0].(ApiListDownloadsRequest)
	return ret0
}

// ListDownloads indicates an expected call of ListDownloads.
func (mr *MockFileSvcAPIMockRecorder) ListDownloads(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDownloads", reflect.TypeOf((*MockFileSvcAPI)(nil).ListDownloads), ctx)
}

// ListDownloadsExecute mocks base method.
func (m *MockFileSvcAPI) ListDownloadsExecute(r ApiListDownloadsRequest) (*FileSvcDownloadsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDownloadsExecute", r)
	ret0, _ := ret[0].(*FileSvcDownloadsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDownloadsExecute indicates an expected call of ListDownloadsExecute.
func (mr *MockFileSvcAPIMockRecorder) ListDownloadsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDownloadsExecute", reflect.TypeOf((*MockFileSvcAPI)(nil).ListDownloadsExecute), r)
}

// PauseDownload mocks base method.
func (m *MockFileSvcAPI) PauseDownload(ctx context.Context, downloadId string) ApiPauseDownloadRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseDownload", ctx, downloadId)
	ret0, _ := ret[0].(ApiPauseDownloadRequest)
	return ret0
}

// PauseDownload indicates an expected call of PauseDownload.
func (mr *MockFileSvcAPIMockRecorder) PauseDownload(ctx, downloadId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseDownload", reflect.TypeOf((*MockFileSvcAPI)(nil).PauseDownload), ctx, downloadId)
}

// PauseDownloadExecute mocks base method.
func (m *MockFileSvcAPI) PauseDownloadExecute(r ApiPauseDownloadRequest) (map[string]any, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseDownloadExecute", r)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PauseDownloadExecute indicates an expected call of PauseDownloadExecute.
func (mr *MockFileSvcAPIMockRecorder) PauseDownloadExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseDownloadExecute", reflect.TypeOf((*MockFileSvcAPI)(nil).PauseDownloadExecute), r)
}
