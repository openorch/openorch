/*
Superplatform

On-premise AI platform and microservices ecosystem.

API version: 0.3.0-rc.7
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DockerSvcRunContainerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DockerSvcRunContainerRequest{}

// DockerSvcRunContainerRequest struct for DockerSvcRunContainerRequest
type DockerSvcRunContainerRequest struct {
	// HostPort is the port on the host machine that will be mapped to the container's port
	HostPort *int32 `json:"hostPort,omitempty"`
	// Image is the Docker image to use for the container
	Image string `json:"image"`
	// Options provides additional options for launching the container
	Options *DockerSvcRunContainerOptions `json:"options,omitempty"`
	// Port is the port number that the container will expose
	Port int32 `json:"port"`
}

type _DockerSvcRunContainerRequest DockerSvcRunContainerRequest

// NewDockerSvcRunContainerRequest instantiates a new DockerSvcRunContainerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDockerSvcRunContainerRequest(image string, port int32) *DockerSvcRunContainerRequest {
	this := DockerSvcRunContainerRequest{}
	this.Image = image
	this.Port = port
	return &this
}

// NewDockerSvcRunContainerRequestWithDefaults instantiates a new DockerSvcRunContainerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDockerSvcRunContainerRequestWithDefaults() *DockerSvcRunContainerRequest {
	this := DockerSvcRunContainerRequest{}
	return &this
}

// GetHostPort returns the HostPort field value if set, zero value otherwise.
func (o *DockerSvcRunContainerRequest) GetHostPort() int32 {
	if o == nil || IsNil(o.HostPort) {
		var ret int32
		return ret
	}
	return *o.HostPort
}

// GetHostPortOk returns a tuple with the HostPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerSvcRunContainerRequest) GetHostPortOk() (*int32, bool) {
	if o == nil || IsNil(o.HostPort) {
		return nil, false
	}
	return o.HostPort, true
}

// HasHostPort returns a boolean if a field has been set.
func (o *DockerSvcRunContainerRequest) HasHostPort() bool {
	if o != nil && !IsNil(o.HostPort) {
		return true
	}

	return false
}

// SetHostPort gets a reference to the given int32 and assigns it to the HostPort field.
func (o *DockerSvcRunContainerRequest) SetHostPort(v int32) {
	o.HostPort = &v
}

// GetImage returns the Image field value
func (o *DockerSvcRunContainerRequest) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *DockerSvcRunContainerRequest) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *DockerSvcRunContainerRequest) SetImage(v string) {
	o.Image = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *DockerSvcRunContainerRequest) GetOptions() DockerSvcRunContainerOptions {
	if o == nil || IsNil(o.Options) {
		var ret DockerSvcRunContainerOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerSvcRunContainerRequest) GetOptionsOk() (*DockerSvcRunContainerOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *DockerSvcRunContainerRequest) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given DockerSvcRunContainerOptions and assigns it to the Options field.
func (o *DockerSvcRunContainerRequest) SetOptions(v DockerSvcRunContainerOptions) {
	o.Options = &v
}

// GetPort returns the Port field value
func (o *DockerSvcRunContainerRequest) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *DockerSvcRunContainerRequest) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *DockerSvcRunContainerRequest) SetPort(v int32) {
	o.Port = v
}

func (o DockerSvcRunContainerRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DockerSvcRunContainerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HostPort) {
		toSerialize["hostPort"] = o.HostPort
	}
	toSerialize["image"] = o.Image
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	toSerialize["port"] = o.Port
	return toSerialize, nil
}

func (o *DockerSvcRunContainerRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image",
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDockerSvcRunContainerRequest := _DockerSvcRunContainerRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDockerSvcRunContainerRequest)

	if err != nil {
		return err
	}

	*o = DockerSvcRunContainerRequest(varDockerSvcRunContainerRequest)

	return err
}

type NullableDockerSvcRunContainerRequest struct {
	value *DockerSvcRunContainerRequest
	isSet bool
}

func (v NullableDockerSvcRunContainerRequest) Get() *DockerSvcRunContainerRequest {
	return v.value
}

func (v *NullableDockerSvcRunContainerRequest) Set(val *DockerSvcRunContainerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDockerSvcRunContainerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDockerSvcRunContainerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockerSvcRunContainerRequest(val *DockerSvcRunContainerRequest) *NullableDockerSvcRunContainerRequest {
	return &NullableDockerSvcRunContainerRequest{value: val, isSet: true}
}

func (v NullableDockerSvcRunContainerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDockerSvcRunContainerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


