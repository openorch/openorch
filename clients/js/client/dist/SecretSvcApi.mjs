import { a as BaseAPI, _ as __awaiter, J as JSONApiResponse, b as RequiredError } from './runtime2.mjs';
import { SecretSvcReadSecretsRequestToJSON } from './SecretSvcReadSecretsRequest.mjs';
import { SecretSvcReadSecretsResponseFromJSON } from './SecretSvcReadSecretsResponse.mjs';
import { SecretSvcWriteSecretsRequestToJSON } from './SecretSvcWriteSecretsRequest.mjs';
import './SecretSvcSecret.mjs';

/* tslint:disable */
/* eslint-disable */
/**
 * OpenOrch
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.3.0-rc.7
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 */
class SecretSvcApi extends BaseAPI {
    /**
     * Read secrets by key(s) if authorized.
     * Read Secrets
     */
    readSecretsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/secret-svc/secrets`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: SecretSvcReadSecretsRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => SecretSvcReadSecretsResponseFromJSON(jsonValue));
        });
    }
    /**
     * Read secrets by key(s) if authorized.
     * Read Secrets
     */
    readSecrets() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.readSecretsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Write secrets if authorized to do so
     * Write Secrets
     */
    writeSecretsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['body'] == null) {
                throw new RequiredError('body', 'Required parameter "body" was null or undefined when calling writeSecrets().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/secret-svc/secrets`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: SecretSvcWriteSecretsRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Write secrets if authorized to do so
     * Write Secrets
     */
    writeSecrets(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.writeSecretsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}

export { SecretSvcApi };
