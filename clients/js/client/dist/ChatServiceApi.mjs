import { a as BaseAPI, _ as __awaiter, b as RequiredError, J as JSONApiResponse } from './runtime2.mjs';
import { ChattypesAddMessageRequestToJSON } from './ChattypesAddMessageRequest.mjs';
import { ChattypesAddThreadRequestToJSON } from './ChattypesAddThreadRequest.mjs';
import { ChattypesAddThreadResponseFromJSON } from './ChattypesAddThreadResponse.mjs';
import { ChattypesGetMessagesResponseFromJSON } from './ChattypesGetMessagesResponse.mjs';
import { ChattypesGetThreadResponseFromJSON } from './ChattypesGetThreadResponse.mjs';
import { ChattypesGetThreadsResponseFromJSON } from './ChattypesGetThreadsResponse.mjs';
import { ChattypesUpdateThreadRequestToJSON } from './ChattypesUpdateThreadRequest.mjs';
import './ChattypesMessage.mjs';
import './ChattypesThread.mjs';
import './ChattypesAsset.mjs';

/* tslint:disable */
/* eslint-disable */
/**
 * Singulatron
 * Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 */
class ChatServiceApi extends BaseAPI {
    /**
     * Add a new message to a specific thread.
     * Add Message
     */
    addMessageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['threadId'] == null) {
                throw new RequiredError('threadId', 'Required parameter "threadId" was null or undefined when calling addMessage().');
            }
            if (requestParameters['request'] == null) {
                throw new RequiredError('request', 'Required parameter "request" was null or undefined when calling addMessage().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/chat-svc/thread/{threadId}/message`.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ChattypesAddMessageRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Add a new message to a specific thread.
     * Add Message
     */
    addMessage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.addMessageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new chat thread and add the requesting user to it. Requires the `chat-svc:thread:create` permission.
     * Add Thread
     */
    addThreadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new RequiredError('request', 'Required parameter "request" was null or undefined when calling addThread().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/chat-svc/thread`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ChattypesAddThreadRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => ChattypesAddThreadResponseFromJSON(jsonValue));
        });
    }
    /**
     * Create a new chat thread and add the requesting user to it. Requires the `chat-svc:thread:create` permission.
     * Add Thread
     */
    addThread(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.addThreadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a specific message from a chat thread by its ID
     * Delete a Message
     */
    deleteMessageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['messageId'] == null) {
                throw new RequiredError('messageId', 'Required parameter "messageId" was null or undefined when calling deleteMessage().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/chat-svc/message/{messageId}`.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters['messageId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Delete a specific message from a chat thread by its ID
     * Delete a Message
     */
    deleteMessage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMessageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a specific chat thread by its ID
     * Delete a Thread
     */
    deleteThreadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['threadId'] == null) {
                throw new RequiredError('threadId', 'Required parameter "threadId" was null or undefined when calling deleteThread().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/chat-svc/thread/{threadId}`.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Delete a specific chat thread by its ID
     * Delete a Thread
     */
    deleteThread(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteThreadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Fetch messages (and associated assets) for a specific chat thread.
     * List Messages
     */
    getMessagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['threadId'] == null) {
                throw new RequiredError('threadId', 'Required parameter "threadId" was null or undefined when calling getMessages().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/chat-svc/thread/{threadId}/messages`.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => ChattypesGetMessagesResponseFromJSON(jsonValue));
        });
    }
    /**
     * Fetch messages (and associated assets) for a specific chat thread.
     * List Messages
     */
    getMessages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMessagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Fetch information about a specific chat thread by its ID
     * Get Thread
     */
    getThreadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['threadId'] == null) {
                throw new RequiredError('threadId', 'Required parameter "threadId" was null or undefined when calling getThread().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/chat-svc/thread/{threadId}`.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => ChattypesGetThreadResponseFromJSON(jsonValue));
        });
    }
    /**
     * Fetch information about a specific chat thread by its ID
     * Get Thread
     */
    getThread(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getThreadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Fetch all chat threads associated with a specific user
     * Get Threads
     */
    getThreadsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new RequiredError('request', 'Required parameter "request" was null or undefined when calling getThreads().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/chat-svc/threads`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['request'],
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => ChattypesGetThreadsResponseFromJSON(jsonValue));
        });
    }
    /**
     * Fetch all chat threads associated with a specific user
     * Get Threads
     */
    getThreads(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getThreadsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Modify the details of a specific chat thread
     * Update Thread
     */
    updateThreadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['threadId'] == null) {
                throw new RequiredError('threadId', 'Required parameter "threadId" was null or undefined when calling updateThread().');
            }
            if (requestParameters['request'] == null) {
                throw new RequiredError('request', 'Required parameter "request" was null or undefined when calling updateThread().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/chat-svc/thread/{threadId}`.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: ChattypesUpdateThreadRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => ChattypesAddThreadResponseFromJSON(jsonValue));
        });
    }
    /**
     * Modify the details of a specific chat thread
     * Update Thread
     */
    updateThread(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateThreadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}

export { ChatServiceApi };
