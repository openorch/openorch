/**
 * Singulatron
 * Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ChatAddMessageRequest, ChatAddThreadRequest, ChatAddThreadResponse, ChatGetMessagesResponse, ChatGetThreadResponse, ChatGetThreadsResponse, ChatUpdateThreadRequest } from '../models/index';
export interface AddMessageRequest {
    threadId: string;
    request: ChatAddMessageRequest;
}
export interface AddThreadRequest {
    request: ChatAddThreadRequest;
}
export interface DeleteMessageRequest {
    messageId: string;
}
export interface DeleteThreadRequest {
    threadId: string;
}
export interface GetMessagesRequest {
    threadId: string;
}
export interface GetThreadRequest {
    threadId: string;
}
export interface GetThreadsRequest {
    request: object;
}
export interface UpdateThreadRequest {
    threadId: string;
    request: ChatUpdateThreadRequest;
}
/**
 *
 */
export declare class ChatServiceApi extends runtime.BaseAPI {
    /**
     * Add a new message to a specific thread.
     * Add Message
     */
    addMessageRaw(requestParameters: AddMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Add a new message to a specific thread.
     * Add Message
     */
    addMessage(requestParameters: AddMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Create a new chat thread and add the requesting user to it. Requires the `chat-svc:thread:create` permission.
     * Add Thread
     */
    addThreadRaw(requestParameters: AddThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatAddThreadResponse>>;
    /**
     * Create a new chat thread and add the requesting user to it. Requires the `chat-svc:thread:create` permission.
     * Add Thread
     */
    addThread(requestParameters: AddThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatAddThreadResponse>;
    /**
     * Delete a specific message from a chat thread by its ID
     * Delete a Message
     */
    deleteMessageRaw(requestParameters: DeleteMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Delete a specific message from a chat thread by its ID
     * Delete a Message
     */
    deleteMessage(requestParameters: DeleteMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Delete a specific chat thread by its ID
     * Delete a Thread
     */
    deleteThreadRaw(requestParameters: DeleteThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Delete a specific chat thread by its ID
     * Delete a Thread
     */
    deleteThread(requestParameters: DeleteThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Fetch messages (and associated assets) for a specific chat thread.
     * List Messages
     */
    getMessagesRaw(requestParameters: GetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatGetMessagesResponse>>;
    /**
     * Fetch messages (and associated assets) for a specific chat thread.
     * List Messages
     */
    getMessages(requestParameters: GetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatGetMessagesResponse>;
    /**
     * Fetch information about a specific chat thread by its ID
     * Get Thread
     */
    getThreadRaw(requestParameters: GetThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatGetThreadResponse>>;
    /**
     * Fetch information about a specific chat thread by its ID
     * Get Thread
     */
    getThread(requestParameters: GetThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatGetThreadResponse>;
    /**
     * Fetch all chat threads associated with a specific user
     * Get Threads
     */
    getThreadsRaw(requestParameters: GetThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatGetThreadsResponse>>;
    /**
     * Fetch all chat threads associated with a specific user
     * Get Threads
     */
    getThreads(requestParameters: GetThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatGetThreadsResponse>;
    /**
     * Modify the details of a specific chat thread
     * Update Thread
     */
    updateThreadRaw(requestParameters: UpdateThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatAddThreadResponse>>;
    /**
     * Modify the details of a specific chat thread
     * Update Thread
     */
    updateThread(requestParameters: UpdateThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatAddThreadResponse>;
}
