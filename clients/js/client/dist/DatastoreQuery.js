'use strict';

var DatastoreCondition = require('./DatastoreCondition.js');
var DatastoreOrderBy = require('./DatastoreOrderBy.js');
require('./DatastoreEqualCondition.js');
require('./DatastoreFieldSelector.js');
require('./DatastoreContainsCondition.js');
require('./DatastoreStartsWithCondition.js');

/* tslint:disable */
/* eslint-disable */
/**
 * Singulatron
 * AI management and development platform.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Check if a given object implements the DatastoreQuery interface.
 */
function instanceOfDatastoreQuery(value) {
    return true;
}
function DatastoreQueryFromJSON(json) {
    return DatastoreQueryFromJSONTyped(json);
}
function DatastoreQueryFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'after': json['after'] == null ? undefined : json['after'],
        'conditions': json['conditions'] == null ? undefined : (json['conditions'].map(DatastoreCondition.DatastoreConditionFromJSON)),
        'count': json['count'] == null ? undefined : json['count'],
        'limit': json['limit'] == null ? undefined : json['limit'],
        'orderBys': json['orderBys'] == null ? undefined : (json['orderBys'].map(DatastoreOrderBy.DatastoreOrderByFromJSON)),
    };
}
function DatastoreQueryToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'after': value['after'],
        'conditions': value['conditions'] == null ? undefined : (value['conditions'].map(DatastoreCondition.DatastoreConditionToJSON)),
        'count': value['count'],
        'limit': value['limit'],
        'orderBys': value['orderBys'] == null ? undefined : (value['orderBys'].map(DatastoreOrderBy.DatastoreOrderByToJSON)),
    };
}

exports.DatastoreQueryFromJSON = DatastoreQueryFromJSON;
exports.DatastoreQueryFromJSONTyped = DatastoreQueryFromJSONTyped;
exports.DatastoreQueryToJSON = DatastoreQueryToJSON;
exports.instanceOfDatastoreQuery = instanceOfDatastoreQuery;
