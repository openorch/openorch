import { a as BaseAPI, _ as __awaiter, b as RequiredError, J as JSONApiResponse } from './runtime2.mjs';
import { GenericSvcCreateObjectRequestToJSON } from './GenericSvcCreateObjectRequest.mjs';
import { GenericSvcCreateObjectResponseFromJSON } from './GenericSvcCreateObjectResponse.mjs';
import { GenericSvcDeleteObjectRequestToJSON } from './GenericSvcDeleteObjectRequest.mjs';
import { GenericSvcQueryRequestToJSON } from './GenericSvcQueryRequest.mjs';
import { GenericSvcQueryResponseFromJSON } from './GenericSvcQueryResponse.mjs';
import { GenericSvcUpdateObjectRequestToJSON } from './GenericSvcUpdateObjectRequest.mjs';
import { GenericSvcUpsertObjectRequestToJSON } from './GenericSvcUpsertObjectRequest.mjs';
import { GenericSvcUpsertObjectResponseFromJSON } from './GenericSvcUpsertObjectResponse.mjs';
import './GenericSvcGenericObjectCreateFields.mjs';
import './GenericSvcGenericObject.mjs';
import './DatastoreCondition.mjs';
import './DatastoreEqualCondition.mjs';
import './DatastoreFieldSelector.mjs';
import './DatastoreContainsCondition.mjs';
import './DatastoreStartsWithCondition.mjs';
import './DatastoreQuery.mjs';
import './DatastoreOrderBy.mjs';

/* tslint:disable */
/* eslint-disable */
/**
 * Singulatron
 * Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 */
class GenericSvcApi extends BaseAPI {
    /**
     * Creates a new object with the provided details. Requires authorization and user authentication.
     * Create a Generic Object
     */
    createObjectRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['body'] == null) {
                throw new RequiredError('body', 'Required parameter "body" was null or undefined when calling createObject().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/generic-svc/object`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: GenericSvcCreateObjectRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => GenericSvcCreateObjectResponseFromJSON(jsonValue));
        });
    }
    /**
     * Creates a new object with the provided details. Requires authorization and user authentication.
     * Create a Generic Object
     */
    createObject(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createObjectRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Removes a generic object from the system based on the provided conditions. Requires authorization and user authentication.
     * Delete a Generic Object
     */
    deleteObjectRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['objectId'] == null) {
                throw new RequiredError('objectId', 'Required parameter "objectId" was null or undefined when calling deleteObject().');
            }
            if (requestParameters['body'] == null) {
                throw new RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteObject().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/generic-svc/object/{objectId}`.replace(`{${"objectId"}}`, encodeURIComponent(String(requestParameters['objectId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: GenericSvcDeleteObjectRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Removes a generic object from the system based on the provided conditions. Requires authorization and user authentication.
     * Delete a Generic Object
     */
    deleteObject(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteObjectRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves objects from a specified table based on search criteria. Requires authorization and user authentication.   Use helper functions in your respective client library such as condition constructors (`equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
     * Find Generic Objects
     */
    queryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/generic-svc/objects`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: GenericSvcQueryRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => GenericSvcQueryResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves objects from a specified table based on search criteria. Requires authorization and user authentication.   Use helper functions in your respective client library such as condition constructors (`equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
     * Find Generic Objects
     */
    query() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.queryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Updates objects in a specified table based on provided conditions. Requires authorization and user authentication.
     * Update Generic Objects
     */
    updateObjectsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['body'] == null) {
                throw new RequiredError('body', 'Required parameter "body" was null or undefined when calling updateObjects().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/generic-svc/objects/update`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: GenericSvcUpdateObjectRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Updates objects in a specified table based on provided conditions. Requires authorization and user authentication.
     * Update Generic Objects
     */
    updateObjects(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateObjectsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Creates a new generic object or updates an existing one based on the provided data. Requires authorization and user authentication.
     * Upsert a Generic Object
     */
    upsertObjectRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['objectId'] == null) {
                throw new RequiredError('objectId', 'Required parameter "objectId" was null or undefined when calling upsertObject().');
            }
            if (requestParameters['body'] == null) {
                throw new RequiredError('body', 'Required parameter "body" was null or undefined when calling upsertObject().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/generic-svc/object/{objectId}`.replace(`{${"objectId"}}`, encodeURIComponent(String(requestParameters['objectId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: GenericSvcUpsertObjectRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => GenericSvcUpsertObjectResponseFromJSON(jsonValue));
        });
    }
    /**
     * Creates a new generic object or updates an existing one based on the provided data. Requires authorization and user authentication.
     * Upsert a Generic Object
     */
    upsertObject(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.upsertObjectRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}

export { GenericSvcApi };
