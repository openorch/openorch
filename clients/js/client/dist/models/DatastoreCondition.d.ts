/**
 * Singulatron
 * AI management and development platform.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { DatastoreEqualCondition } from './DatastoreEqualCondition';
import type { DatastoreContainsCondition } from './DatastoreContainsCondition';
import type { DatastoreStartsWithCondition } from './DatastoreStartsWithCondition';
/**
 *
 * @export
 * @interface DatastoreCondition
 */
export interface DatastoreCondition {
    /**
     * All condition returns all objects.
     * @type {object}
     * @memberof DatastoreCondition
     */
    all?: object;
    /**
     * Contains condition returns all objects where the field(s) values contain a particular string.
     * @type {DatastoreContainsCondition}
     * @memberof DatastoreCondition
     */
    contains?: DatastoreContainsCondition;
    /**
     * Equal condition returns objects where value of a field equals (=) to the specified value in the query.
     * @type {DatastoreEqualCondition}
     * @memberof DatastoreCondition
     */
    equal?: DatastoreEqualCondition;
    /**
     * StartsWith condition returns all objects where the field(s) values start with a particular string.
     * @type {DatastoreStartsWithCondition}
     * @memberof DatastoreCondition
     */
    startsWith?: DatastoreStartsWithCondition;
}
/**
 * Check if a given object implements the DatastoreCondition interface.
 */
export declare function instanceOfDatastoreCondition(value: object): value is DatastoreCondition;
export declare function DatastoreConditionFromJSON(json: any): DatastoreCondition;
export declare function DatastoreConditionFromJSONTyped(json: any, ignoreDiscriminator: boolean): DatastoreCondition;
export declare function DatastoreConditionToJSON(value?: DatastoreCondition | null): any;
