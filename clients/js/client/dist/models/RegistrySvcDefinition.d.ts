/**
 * OpenOrch
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.3.0-rc.8
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { RegistrySvcAPISpec } from './RegistrySvcAPISpec';
import type { RegistrySvcImageSpec } from './RegistrySvcImageSpec';
import type { RegistrySvcRepositorySpec } from './RegistrySvcRepositorySpec';
import type { RegistrySvcClient } from './RegistrySvcClient';
/**
 *
 * @export
 * @interface RegistrySvcDefinition
 */
export interface RegistrySvcDefinition {
    /**
     * API Specs such as OpenAPI definitions etc.
     * @type {Array<RegistrySvcAPISpec>}
     * @memberof RegistrySvcDefinition
     */
    apiSpecs?: Array<RegistrySvcAPISpec>;
    /**
     * Programming language clients such as on npm or GitHub.
     * @type {Array<RegistrySvcClient>}
     * @memberof RegistrySvcDefinition
     */
    clients?: Array<RegistrySvcClient>;
    /**
     * Envars is a map of Renvironment variables that a deployment (see Deploy Svc Deployment) of this definition will REQUIRE to run.
     * E.g., {"DB_URL": "mysql://user:password@host:port/db"}
     * These will be injected into the service instances (see Registry Svc Instance) at runtime.
     * The value of a key here is the default value. The actual value can be overridden at deployment time.
     * @type {{ [key: string]: string; }}
     * @memberof RegistrySvcDefinition
     */
    envars?: {
        [key: string]: string;
    };
    /**
     * HostPort is a clutch until automatic port assignment works.
     * It will go a way as it doesn't make any sense in a Definition.
     * @type {number}
     * @memberof RegistrySvcDefinition
     */
    hostPort?: number;
    /**
     *
     * @type {string}
     * @memberof RegistrySvcDefinition
     */
    id: string;
    /**
     * Container specifications for Docker, K8s, etc.
     * Use this to deploy already built images.
     * @type {RegistrySvcImageSpec}
     * @memberof RegistrySvcDefinition
     */
    image?: RegistrySvcImageSpec;
    /**
     * Repository based definitions is an alternative to Image definitions.
     * Instead of deploying an already built and pushed image, a source code repository
     * url can be provided. The container will be built from the source.
     * @type {RegistrySvcRepositorySpec}
     * @memberof RegistrySvcDefinition
     */
    repository?: RegistrySvcRepositorySpec;
}
/**
 * Check if a given object implements the RegistrySvcDefinition interface.
 */
export declare function instanceOfRegistrySvcDefinition(value: object): value is RegistrySvcDefinition;
export declare function RegistrySvcDefinitionFromJSON(json: any): RegistrySvcDefinition;
export declare function RegistrySvcDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegistrySvcDefinition;
export declare function RegistrySvcDefinitionToJSON(json: any): RegistrySvcDefinition;
export declare function RegistrySvcDefinitionToJSONTyped(value?: RegistrySvcDefinition | null, ignoreDiscriminator?: boolean): any;
