'use strict';

var RegistrySvcAPISpec = require('./RegistrySvcAPISpec.js');
var RegistrySvcImageSpec = require('./RegistrySvcImageSpec.js');
var RegistrySvcClient = require('./RegistrySvcClient.js');
require('./RegistrySvcLanguage.js');

/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Check if a given object implements the RegistrySvcDefinition interface.
 */
function instanceOfRegistrySvcDefinition(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('image' in value) || value['image'] === undefined)
        return false;
    return true;
}
function RegistrySvcDefinitionFromJSON(json) {
    return RegistrySvcDefinitionFromJSONTyped(json);
}
function RegistrySvcDefinitionFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'apiSpecs': json['apiSpecs'] == null ? undefined : (json['apiSpecs'].map(RegistrySvcAPISpec.RegistrySvcAPISpecFromJSON)),
        'clients': json['clients'] == null ? undefined : (json['clients'].map(RegistrySvcClient.RegistrySvcClientFromJSON)),
        'id': json['id'],
        'image': RegistrySvcImageSpec.RegistrySvcImageSpecFromJSON(json['image']),
    };
}
function RegistrySvcDefinitionToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'apiSpecs': value['apiSpecs'] == null ? undefined : (value['apiSpecs'].map(RegistrySvcAPISpec.RegistrySvcAPISpecToJSON)),
        'clients': value['clients'] == null ? undefined : (value['clients'].map(RegistrySvcClient.RegistrySvcClientToJSON)),
        'id': value['id'],
        'image': RegistrySvcImageSpec.RegistrySvcImageSpecToJSON(value['image']),
    };
}

exports.RegistrySvcDefinitionFromJSON = RegistrySvcDefinitionFromJSON;
exports.RegistrySvcDefinitionFromJSONTyped = RegistrySvcDefinitionFromJSONTyped;
exports.RegistrySvcDefinitionToJSON = RegistrySvcDefinitionToJSON;
exports.instanceOfRegistrySvcDefinition = instanceOfRegistrySvcDefinition;
