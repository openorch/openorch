'use strict';

var runtime = require('./runtime2.js');
var DockerSvcBuildImageRequest = require('./DockerSvcBuildImageRequest.js');
var DockerSvcContainerIsRunningResponse = require('./DockerSvcContainerIsRunningResponse.js');
var DockerSvcGetContainerSummaryResponse = require('./DockerSvcGetContainerSummaryResponse.js');
var DockerSvcGetDockerHostResponse = require('./DockerSvcGetDockerHostResponse.js');
var DockerSvcGetInfoResponse = require('./DockerSvcGetInfoResponse.js');
var DockerSvcRunContainerRequest = require('./DockerSvcRunContainerRequest.js');
var DockerSvcRunContainerResponse = require('./DockerSvcRunContainerResponse.js');
var DockerSvcStopContainerRequest = require('./DockerSvcStopContainerRequest.js');
require('./DockerSvcDockerInfo.js');
require('./DockerSvcRunContainerOptions.js');
require('./DockerSvcRunInfo.js');

/* tslint:disable */
/* eslint-disable */
/**
 * OpenOrch
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.3.0-rc.8
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 */
class DockerSvcApi extends runtime.BaseAPI {
    /**
     * Builds a Docker image with the specified parameters.  Requires the `docker-svc:image:build` permission.
     * Build an Image
     */
    buildImageRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling buildImage().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/image`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: DockerSvcBuildImageRequest.DockerSvcBuildImageRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Builds a Docker image with the specified parameters.  Requires the `docker-svc:image:build` permission.
     * Build an Image
     */
    buildImage(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildImageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Check if a Docker container is running, identified by hash or name.
     * Check If a Container Is Running
     */
    containerIsRunningRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['hash'] != null) {
                queryParameters['hash'] = requestParameters['hash'];
            }
            if (requestParameters['name'] != null) {
                queryParameters['name'] = requestParameters['name'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/container/is-running`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DockerSvcContainerIsRunningResponse.DockerSvcContainerIsRunningResponseFromJSON(jsonValue));
        });
    }
    /**
     * Check if a Docker container is running, identified by hash or name.
     * Check If a Container Is Running
     */
    containerIsRunning() {
        return runtime.__awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.containerIsRunningRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a summary of the Docker container identified by hash or name, limited to a specified number of lines.
     * Get Container Summary
     */
    containerSummaryRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['hash'] != null) {
                queryParameters['hash'] = requestParameters['hash'];
            }
            if (requestParameters['name'] != null) {
                queryParameters['name'] = requestParameters['name'];
            }
            if (requestParameters['lines'] != null) {
                queryParameters['lines'] = requestParameters['lines'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/container/summary`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DockerSvcGetContainerSummaryResponse.DockerSvcGetContainerSummaryResponseFromJSON(jsonValue));
        });
    }
    /**
     * Get a summary of the Docker container identified by hash or name, limited to a specified number of lines.
     * Get Container Summary
     */
    containerSummary() {
        return runtime.__awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.containerSummaryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve information about the Docker host
     * Get Docker Host
     */
    getHostRaw(initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/host`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DockerSvcGetDockerHostResponse.DockerSvcGetDockerHostResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve information about the Docker host
     * Get Docker Host
     */
    getHost(initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHostRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve detailed information about the Docker service
     * Get Docker Service Information
     */
    getInfoRaw(initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/info`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DockerSvcGetInfoResponse.DockerSvcGetInfoResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve detailed information about the Docker service
     * Get Docker Service Information
     */
    getInfo(initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.getInfoRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Runs a Docker container with the specified parameters.  Requires the `docker-svc:container:run` permission.
     * Run a Container
     */
    runContainerRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling runContainer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/container`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: DockerSvcRunContainerRequest.DockerSvcRunContainerRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DockerSvcRunContainerResponse.DockerSvcRunContainerResponseFromJSON(jsonValue));
        });
    }
    /**
     * Runs a Docker container with the specified parameters.  Requires the `docker-svc:container:run` permission.
     * Run a Container
     */
    runContainer(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.runContainerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Stops a Docker container with the specified parameters.  Requires the `docker-svc:container:stop` permission.
     * Stop a Container
     */
    stopContainerRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling stopContainer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/container/stop`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: DockerSvcStopContainerRequest.DockerSvcStopContainerRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Stops a Docker container with the specified parameters.  Requires the `docker-svc:container:stop` permission.
     * Stop a Container
     */
    stopContainer(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.stopContainerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}

exports.DockerSvcApi = DockerSvcApi;
