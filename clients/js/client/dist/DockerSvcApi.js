'use strict';

var runtime = require('./runtime2.js');
var DockerSvcBuildImageRequest = require('./DockerSvcBuildImageRequest.js');
var DockerSvcContainerIsRunningResponse = require('./DockerSvcContainerIsRunningResponse.js');
var DockerSvcGetContainerSummaryResponse = require('./DockerSvcGetContainerSummaryResponse.js');
var DockerSvcGetDockerHostResponse = require('./DockerSvcGetDockerHostResponse.js');
var DockerSvcGetInfoResponse = require('./DockerSvcGetInfoResponse.js');
var DockerSvcRunContainerRequest = require('./DockerSvcRunContainerRequest.js');
var DockerSvcRunContainerResponse = require('./DockerSvcRunContainerResponse.js');
require('./DockerSvcDockerInfo.js');
require('./DockerSvcRunContainerOptions.js');
require('./DockerSvcRunInfo.js');

/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 */
class DockerSvcApi extends runtime.BaseAPI {
    /**
     * Builds a Docker image with the specified parameters.  Requires the `docker-svc:image:build` permission.
     * Build an Image
     */
    buildImageRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new runtime.RequiredError('request', 'Required parameter "request" was null or undefined when calling buildImage().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/image`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: DockerSvcBuildImageRequest.DockerSvcBuildImageRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Builds a Docker image with the specified parameters.  Requires the `docker-svc:image:build` permission.
     * Build an Image
     */
    buildImage(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildImageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Check if a Docker container identified by the hash is running
     * Check If a Container Is Running
     */
    containerIsRunningRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            if (requestParameters['hash'] == null) {
                throw new runtime.RequiredError('hash', 'Required parameter "hash" was null or undefined when calling containerIsRunning().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/container/{hash}/is-running`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DockerSvcContainerIsRunningResponse.DockerSvcContainerIsRunningResponseFromJSON(jsonValue));
        });
    }
    /**
     * Check if a Docker container identified by the hash is running
     * Check If a Container Is Running
     */
    containerIsRunning(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.containerIsRunningRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a summary of the Docker container identified by the hash, limited to a specified number of lines
     * Get Container Summary
     */
    getContainerSummaryRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            if (requestParameters['hash'] == null) {
                throw new runtime.RequiredError('hash', 'Required parameter "hash" was null or undefined when calling getContainerSummary().');
            }
            if (requestParameters['numberOfLines'] == null) {
                throw new runtime.RequiredError('numberOfLines', 'Required parameter "numberOfLines" was null or undefined when calling getContainerSummary().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/container/{hash}/summary/{numberOfLines}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))).replace(`{${"numberOfLines"}}`, encodeURIComponent(String(requestParameters['numberOfLines']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DockerSvcGetContainerSummaryResponse.DockerSvcGetContainerSummaryResponseFromJSON(jsonValue));
        });
    }
    /**
     * Get a summary of the Docker container identified by the hash, limited to a specified number of lines
     * Get Container Summary
     */
    getContainerSummary(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.getContainerSummaryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve information about the Docker host
     * Get Docker Host
     */
    getHostRaw(initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/host`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DockerSvcGetDockerHostResponse.DockerSvcGetDockerHostResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve information about the Docker host
     * Get Docker Host
     */
    getHost(initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHostRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve detailed information about the Docker service
     * Get Docker Service Information
     */
    getInfoRaw(initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/info`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DockerSvcGetInfoResponse.DockerSvcGetInfoResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve detailed information about the Docker service
     * Get Docker Service Information
     */
    getInfo(initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.getInfoRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Runs a Docker container with the specified parameters.  Requires the `docker-svc:container:run` permission.
     * Run a Container
     */
    runContainerRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new runtime.RequiredError('request', 'Required parameter "request" was null or undefined when calling runContainer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/container`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: DockerSvcRunContainerRequest.DockerSvcRunContainerRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DockerSvcRunContainerResponse.DockerSvcRunContainerResponseFromJSON(jsonValue));
        });
    }
    /**
     * Runs a Docker container with the specified parameters.  Requires the `docker-svc:container:run` permission.
     * Run a Container
     */
    runContainer(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.runContainerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}

exports.DockerSvcApi = DockerSvcApi;
