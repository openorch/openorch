'use strict';

var runtime = require('./runtime2.js');
var PromptSvcAddPromptRequest = require('./PromptSvcAddPromptRequest.js');
var PromptSvcAddPromptResponse = require('./PromptSvcAddPromptResponse.js');
var PromptSvcListPromptsRequest = require('./PromptSvcListPromptsRequest.js');
var PromptSvcListPromptsResponse = require('./PromptSvcListPromptsResponse.js');
var PromptSvcRemovePromptRequest = require('./PromptSvcRemovePromptRequest.js');
require('./PromptSvcPrompt.js');
require('./PromptSvcPromptStatus.js');
require('./DatastoreQuery.js');
require('./DatastoreFilter.js');
require('./DatastoreOp.js');
require('./DatastoreOrderBy.js');

/* tslint:disable */
/* eslint-disable */
/**
 * Singulatron
 * AI management and development platform.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 */
class PromptSvcApi extends runtime.BaseAPI {
    /**
     * Adds a new prompt to the prompt queue and either waits for the response (if `sync` is set to true), or returns immediately.
     * Add Prompt
     */
    addPromptRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new runtime.RequiredError('request', 'Required parameter "request" was null or undefined when calling addPrompt().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/prompt-svc/prompt`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: PromptSvcAddPromptRequest.PromptSvcAddPromptRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PromptSvcAddPromptResponse.PromptSvcAddPromptResponseFromJSON(jsonValue));
        });
    }
    /**
     * Adds a new prompt to the prompt queue and either waits for the response (if `sync` is set to true), or returns immediately.
     * Add Prompt
     */
    addPrompt(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.addPromptRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List prompts that satisfy a query.
     * List Prompts
     */
    getPromptsRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/prompt-svc/prompts`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: PromptSvcListPromptsRequest.PromptSvcListPromptsRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PromptSvcListPromptsResponse.PromptSvcListPromptsResponseFromJSON(jsonValue));
        });
    }
    /**
     * List prompts that satisfy a query.
     * List Prompts
     */
    getPrompts() {
        return runtime.__awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.getPromptsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove a prompt by ID.
     * Remove Prompt
     */
    removePromptRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new runtime.RequiredError('request', 'Required parameter "request" was null or undefined when calling removePrompt().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/prompt-svc/remove`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: PromptSvcRemovePromptRequest.PromptSvcRemovePromptRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Remove a prompt by ID.
     * Remove Prompt
     */
    removePrompt(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.removePromptRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Subscribe to prompt responses via Server-Sent Events (SSE)
     * Subscribe to Prompt
     */
    subscribeRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            if (requestParameters['threadId'] == null) {
                throw new runtime.RequiredError('threadId', 'Required parameter "threadId" was null or undefined when calling subscribe().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/prompt-svc/{threadId}/subscribe`.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Subscribe to prompt responses via Server-Sent Events (SSE)
     * Subscribe to Prompt
     */
    subscribe(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscribeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}

exports.PromptSvcApi = PromptSvcApi;
