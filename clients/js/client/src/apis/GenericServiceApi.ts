/* tslint:disable */
/* eslint-disable */
/**
 * Singulatron
 * Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GenerictypesCreateRequest,
  GenerictypesCreateResponse,
  GenerictypesDeleteRequest,
  GenerictypesErrorResponse,
  GenerictypesQueryRequest,
  GenerictypesQueryResponse,
  GenerictypesUpdateRequest,
  GenerictypesUpsertRequest,
  GenerictypesUpsertResponse,
} from '../models/index';
import {
    GenerictypesCreateRequestFromJSON,
    GenerictypesCreateRequestToJSON,
    GenerictypesCreateResponseFromJSON,
    GenerictypesCreateResponseToJSON,
    GenerictypesDeleteRequestFromJSON,
    GenerictypesDeleteRequestToJSON,
    GenerictypesErrorResponseFromJSON,
    GenerictypesErrorResponseToJSON,
    GenerictypesQueryRequestFromJSON,
    GenerictypesQueryRequestToJSON,
    GenerictypesQueryResponseFromJSON,
    GenerictypesQueryResponseToJSON,
    GenerictypesUpdateRequestFromJSON,
    GenerictypesUpdateRequestToJSON,
    GenerictypesUpsertRequestFromJSON,
    GenerictypesUpsertRequestToJSON,
    GenerictypesUpsertResponseFromJSON,
    GenerictypesUpsertResponseToJSON,
} from '../models/index';

export interface GenericSvcCreatePostRequest {
    body: GenerictypesCreateRequest;
}

export interface GenericSvcObjectObjectIdDeleteRequest {
    objectId: string;
    body: GenerictypesDeleteRequest;
}

export interface GenericSvcObjectObjectIdPutRequest {
    objectId: string;
    body: GenerictypesUpsertRequest;
}

export interface GenericSvcObjectsPostRequest {
    body?: GenerictypesQueryRequest;
}

export interface GenericSvcObjectsUpdatePostRequest {
    body: GenerictypesUpdateRequest;
}

/**
 * 
 */
export class GenericServiceApi extends runtime.BaseAPI {

    /**
     * Creates a new object with the provided details. Requires authorization and user authentication.
     * Create a Generic Object
     */
    async genericSvcCreatePostRaw(requestParameters: GenericSvcCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerictypesCreateResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling genericSvcCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/generic-svc/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerictypesCreateRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerictypesCreateResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new object with the provided details. Requires authorization and user authentication.
     * Create a Generic Object
     */
    async genericSvcCreatePost(requestParameters: GenericSvcCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerictypesCreateResponse> {
        const response = await this.genericSvcCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a generic object from the system based on the provided conditions. Requires authorization and user authentication.
     * Delete a Generic Object
     */
    async genericSvcObjectObjectIdDeleteRaw(requestParameters: GenericSvcObjectObjectIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling genericSvcObjectObjectIdDelete().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling genericSvcObjectObjectIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/generic-svc/object/{objectId}`.replace(`{${"objectId"}}`, encodeURIComponent(String(requestParameters['objectId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: GenerictypesDeleteRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Removes a generic object from the system based on the provided conditions. Requires authorization and user authentication.
     * Delete a Generic Object
     */
    async genericSvcObjectObjectIdDelete(requestParameters: GenericSvcObjectObjectIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.genericSvcObjectObjectIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new generic object or updates an existing one based on the provided data. Requires authorization and user authentication.
     * Upsert a Generic Object
     */
    async genericSvcObjectObjectIdPutRaw(requestParameters: GenericSvcObjectObjectIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerictypesUpsertResponse>> {
        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling genericSvcObjectObjectIdPut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling genericSvcObjectObjectIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/generic-svc/object/{objectId}`.replace(`{${"objectId"}}`, encodeURIComponent(String(requestParameters['objectId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GenerictypesUpsertRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerictypesUpsertResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new generic object or updates an existing one based on the provided data. Requires authorization and user authentication.
     * Upsert a Generic Object
     */
    async genericSvcObjectObjectIdPut(requestParameters: GenericSvcObjectObjectIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerictypesUpsertResponse> {
        const response = await this.genericSvcObjectObjectIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves objects from a specified table based on search criteria. Requires authorization and user authentication.   Use helper functions in your respective client library such as condition constructors (`equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
     * Find Generic Objects
     */
    async genericSvcObjectsPostRaw(requestParameters: GenericSvcObjectsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerictypesQueryResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/generic-svc/objects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerictypesQueryRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerictypesQueryResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves objects from a specified table based on search criteria. Requires authorization and user authentication.   Use helper functions in your respective client library such as condition constructors (`equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
     * Find Generic Objects
     */
    async genericSvcObjectsPost(requestParameters: GenericSvcObjectsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerictypesQueryResponse> {
        const response = await this.genericSvcObjectsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates objects in a specified table based on provided conditions. Requires authorization and user authentication.
     * Update Generic Objects
     */
    async genericSvcObjectsUpdatePostRaw(requestParameters: GenericSvcObjectsUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling genericSvcObjectsUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/generic-svc/objects/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerictypesUpdateRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates objects in a specified table based on provided conditions. Requires authorization and user authentication.
     * Update Generic Objects
     */
    async genericSvcObjectsUpdatePost(requestParameters: GenericSvcObjectsUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.genericSvcObjectsUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
