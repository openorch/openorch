/* tslint:disable */
/* eslint-disable */
/**
 * Singulatron
 * Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PrompttypesAddPromptRequest,
  PrompttypesAddPromptResponse,
  PrompttypesErrorResponse,
  PrompttypesListPromptsRequest,
  PrompttypesListPromptsResponse,
  PrompttypesRemovePromptRequest,
} from '../models/index';
import {
    PrompttypesAddPromptRequestFromJSON,
    PrompttypesAddPromptRequestToJSON,
    PrompttypesAddPromptResponseFromJSON,
    PrompttypesAddPromptResponseToJSON,
    PrompttypesErrorResponseFromJSON,
    PrompttypesErrorResponseToJSON,
    PrompttypesListPromptsRequestFromJSON,
    PrompttypesListPromptsRequestToJSON,
    PrompttypesListPromptsResponseFromJSON,
    PrompttypesListPromptsResponseToJSON,
    PrompttypesRemovePromptRequestFromJSON,
    PrompttypesRemovePromptRequestToJSON,
} from '../models/index';

export interface AddPromptRequest {
    request: PrompttypesAddPromptRequest;
}

export interface GetPromptsRequest {
    request?: PrompttypesListPromptsRequest;
}

export interface RemovePromptRequest {
    request: PrompttypesRemovePromptRequest;
}

export interface SubscribeRequest {
    threadId: string;
}

/**
 * 
 */
export class PromptServiceApi extends runtime.BaseAPI {

    /**
     * Adds a new prompt to the prompt queue and either waits for the response (if `sync` is set to true), or returns immediately.
     * Add Prompt
     */
    async addPromptRaw(requestParameters: AddPromptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrompttypesAddPromptResponse>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling addPrompt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/prompt-svc/prompt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PrompttypesAddPromptRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrompttypesAddPromptResponseFromJSON(jsonValue));
    }

    /**
     * Adds a new prompt to the prompt queue and either waits for the response (if `sync` is set to true), or returns immediately.
     * Add Prompt
     */
    async addPrompt(requestParameters: AddPromptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrompttypesAddPromptResponse> {
        const response = await this.addPromptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List prompts that satisfy a query.
     * List Prompts
     */
    async getPromptsRaw(requestParameters: GetPromptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrompttypesListPromptsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/prompt-svc/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PrompttypesListPromptsRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrompttypesListPromptsResponseFromJSON(jsonValue));
    }

    /**
     * List prompts that satisfy a query.
     * List Prompts
     */
    async getPrompts(requestParameters: GetPromptsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrompttypesListPromptsResponse> {
        const response = await this.getPromptsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a prompt by ID.
     * Remove Prompt
     */
    async removePromptRaw(requestParameters: RemovePromptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling removePrompt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/prompt-svc/remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PrompttypesRemovePromptRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Remove a prompt by ID.
     * Remove Prompt
     */
    async removePrompt(requestParameters: RemovePromptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.removePromptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Subscribe to prompt responses via Server-Sent Events (SSE)
     * Subscribe to Prompt
     */
    async subscribeRaw(requestParameters: SubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['threadId'] == null) {
            throw new runtime.RequiredError(
                'threadId',
                'Required parameter "threadId" was null or undefined when calling subscribe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prompt-svc/{threadId}/subscribe`.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Subscribe to prompt responses via Server-Sent Events (SSE)
     * Subscribe to Prompt
     */
    async subscribe(requestParameters: SubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.subscribeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
