/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * AI management and development platform.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RegistrySvcErrorResponse,
  RegistrySvcListNodesResponse,
  RegistrySvcQueryServiceInstancesResponse,
  RegistrySvcRegisterServiceInstanceRequest,
} from '../models/index';
import {
    RegistrySvcErrorResponseFromJSON,
    RegistrySvcErrorResponseToJSON,
    RegistrySvcListNodesResponseFromJSON,
    RegistrySvcListNodesResponseToJSON,
    RegistrySvcQueryServiceInstancesResponseFromJSON,
    RegistrySvcQueryServiceInstancesResponseToJSON,
    RegistrySvcRegisterServiceInstanceRequestFromJSON,
    RegistrySvcRegisterServiceInstanceRequestToJSON,
} from '../models/index';

export interface ListNodesRequest {
    body?: object;
}

export interface QueryServiceInstancesRequest {
    scheme?: string;
    ip?: string;
    host?: string;
    ip2?: string;
    id?: string;
}

export interface RegisterServiceInstanceRequest {
    request: RegistrySvcRegisterServiceInstanceRequest;
}

export interface RemoveServiceInstanceRequest {
    id: string;
}

/**
 * 
 */
export class RegistrySvcApi extends runtime.BaseAPI {

    /**
     * Retrieve a list of nodes.
     * List Nodes
     */
    async listNodesRaw(requestParameters: ListNodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegistrySvcListNodesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/registry-svc/nodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrySvcListNodesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of nodes.
     * List Nodes
     */
    async listNodes(requestParameters: ListNodesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegistrySvcListNodesResponse> {
        const response = await this.listNodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all registered service instances or filters them by specific criteria (e.g., host, IP).
     * Query Service Instances
     */
    async queryServiceInstancesRaw(requestParameters: QueryServiceInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RegistrySvcQueryServiceInstancesResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['scheme'] != null) {
            queryParameters['scheme'] = requestParameters['scheme'];
        }

        if (requestParameters['ip'] != null) {
            queryParameters['ip'] = requestParameters['ip'];
        }

        if (requestParameters['host'] != null) {
            queryParameters['host'] = requestParameters['host'];
        }

        if (requestParameters['ip2'] != null) {
            queryParameters['ip'] = requestParameters['ip2'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/registry-svc/services`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RegistrySvcQueryServiceInstancesResponseFromJSON));
    }

    /**
     * Retrieves a list of all registered service instances or filters them by specific criteria (e.g., host, IP).
     * Query Service Instances
     */
    async queryServiceInstances(requestParameters: QueryServiceInstancesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RegistrySvcQueryServiceInstancesResponse>> {
        const response = await this.queryServiceInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Registers a new service instance, associating an service instance address with a slug acquired from the bearer token.
     * Register Service Instance
     */
    async registerServiceInstanceRaw(requestParameters: RegisterServiceInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling registerServiceInstance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/registry-svc/service-instance`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegistrySvcRegisterServiceInstanceRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Registers a new service instance, associating an service instance address with a slug acquired from the bearer token.
     * Register Service Instance
     */
    async registerServiceInstance(requestParameters: RegisterServiceInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.registerServiceInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a registered service instance based on the service ID.
     * Remove Service Instance
     */
    async removeServiceInstanceRaw(requestParameters: RemoveServiceInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeServiceInstance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/registry-svc/service-instance/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a registered service instance based on the service ID.
     * Remove Service Instance
     */
    async removeServiceInstance(requestParameters: RemoveServiceInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeServiceInstanceRaw(requestParameters, initOverrides);
    }

}
