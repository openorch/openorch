/* tslint:disable */
/* eslint-disable */
/**
 * OpenOrch
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.3.0-rc.7
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SecretSvcReadSecretsRequest,
  SecretSvcReadSecretsResponse,
  SecretSvcWriteSecretsRequest,
} from '../models/index';
import {
    SecretSvcReadSecretsRequestFromJSON,
    SecretSvcReadSecretsRequestToJSON,
    SecretSvcReadSecretsResponseFromJSON,
    SecretSvcReadSecretsResponseToJSON,
    SecretSvcWriteSecretsRequestFromJSON,
    SecretSvcWriteSecretsRequestToJSON,
} from '../models/index';

export interface ReadSecretsRequest {
    body?: SecretSvcReadSecretsRequest;
}

export interface WriteSecretsRequest {
    body: SecretSvcWriteSecretsRequest;
}

/**
 * 
 */
export class SecretSvcApi extends runtime.BaseAPI {

    /**
     * Read secrets by key(s) if authorized.
     * Read Secrets
     */
    async readSecretsRaw(requestParameters: ReadSecretsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SecretSvcReadSecretsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/secret-svc/secrets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecretSvcReadSecretsRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecretSvcReadSecretsResponseFromJSON(jsonValue));
    }

    /**
     * Read secrets by key(s) if authorized.
     * Read Secrets
     */
    async readSecrets(requestParameters: ReadSecretsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SecretSvcReadSecretsResponse> {
        const response = await this.readSecretsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Write secrets if authorized to do so
     * Write Secrets
     */
    async writeSecretsRaw(requestParameters: WriteSecretsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling writeSecrets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/secret-svc/secrets`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SecretSvcWriteSecretsRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Write secrets if authorized to do so
     * Write Secrets
     */
    async writeSecrets(requestParameters: WriteSecretsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.writeSecretsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
