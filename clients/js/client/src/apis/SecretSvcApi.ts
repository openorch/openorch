/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.3.0-rc.4
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SecretSvcReadSecretRequest,
  SecretSvcReadSecretResponse,
  SecretSvcWriteSecretRequest,
} from '../models/index';
import {
    SecretSvcReadSecretRequestFromJSON,
    SecretSvcReadSecretRequestToJSON,
    SecretSvcReadSecretResponseFromJSON,
    SecretSvcReadSecretResponseToJSON,
    SecretSvcWriteSecretRequestFromJSON,
    SecretSvcWriteSecretRequestToJSON,
} from '../models/index';

export interface ReadSecretRequest {
    body?: SecretSvcReadSecretRequest;
}

export interface WriteSecretRequest {
    body: SecretSvcWriteSecretRequest;
}

/**
 * 
 */
export class SecretSvcApi extends runtime.BaseAPI {

    /**
     * Fetch a secret by key, if authorized
     * Read Secret
     */
    async readSecretRaw(requestParameters: ReadSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SecretSvcReadSecretResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/secret-svc/secret`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecretSvcReadSecretRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecretSvcReadSecretResponseFromJSON(jsonValue));
    }

    /**
     * Fetch a secret by key, if authorized
     * Read Secret
     */
    async readSecret(requestParameters: ReadSecretRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SecretSvcReadSecretResponse> {
        const response = await this.readSecretRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Write a secret if authorized
     * Write Secret
     */
    async writeSecretRaw(requestParameters: WriteSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling writeSecret().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/secret-svc/secret`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SecretSvcWriteSecretRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Write a secret if authorized
     * Write Secret
     */
    async writeSecret(requestParameters: WriteSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.writeSecretRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
