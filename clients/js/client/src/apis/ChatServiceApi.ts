/* tslint:disable */
/* eslint-disable */
/**
 * Singulatron
 * Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChattypesAddMessageRequest,
  ChattypesAddThreadRequest,
  ChattypesAddThreadResponse,
  ChattypesGetMessagesResponse,
  ChattypesGetThreadResponse,
  ChattypesGetThreadsResponse,
  ChattypesUpdateThreadRequest,
} from '../models/index';
import {
    ChattypesAddMessageRequestFromJSON,
    ChattypesAddMessageRequestToJSON,
    ChattypesAddThreadRequestFromJSON,
    ChattypesAddThreadRequestToJSON,
    ChattypesAddThreadResponseFromJSON,
    ChattypesAddThreadResponseToJSON,
    ChattypesGetMessagesResponseFromJSON,
    ChattypesGetMessagesResponseToJSON,
    ChattypesGetThreadResponseFromJSON,
    ChattypesGetThreadResponseToJSON,
    ChattypesGetThreadsResponseFromJSON,
    ChattypesGetThreadsResponseToJSON,
    ChattypesUpdateThreadRequestFromJSON,
    ChattypesUpdateThreadRequestToJSON,
} from '../models/index';

export interface AddMessageRequest {
    threadId: string;
    request: ChattypesAddMessageRequest;
}

export interface AddThreadRequest {
    request: ChattypesAddThreadRequest;
}

export interface DeleteMessageRequest {
    messageId: string;
}

export interface DeleteThreadRequest {
    threadId: string;
}

export interface GetMessagesRequest {
    threadId: string;
}

export interface GetThreadRequest {
    threadId: string;
}

export interface GetThreadsRequest {
    request: object;
}

export interface UpdateThreadRequest {
    threadId: string;
    request: ChattypesUpdateThreadRequest;
}

/**
 * 
 */
export class ChatServiceApi extends runtime.BaseAPI {

    /**
     * Add a new message to a specific thread.
     * Add Message
     */
    async addMessageRaw(requestParameters: AddMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['threadId'] == null) {
            throw new runtime.RequiredError(
                'threadId',
                'Required parameter "threadId" was null or undefined when calling addMessage().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling addMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/chat-svc/thread/{threadId}/message`.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChattypesAddMessageRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Add a new message to a specific thread.
     * Add Message
     */
    async addMessage(requestParameters: AddMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.addMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new chat thread and add the requesting user to it. Requires the `chat-svc:thread:create` permission.
     * Add Thread
     */
    async addThreadRaw(requestParameters: AddThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChattypesAddThreadResponse>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling addThread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/chat-svc/thread`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChattypesAddThreadRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChattypesAddThreadResponseFromJSON(jsonValue));
    }

    /**
     * Create a new chat thread and add the requesting user to it. Requires the `chat-svc:thread:create` permission.
     * Add Thread
     */
    async addThread(requestParameters: AddThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChattypesAddThreadResponse> {
        const response = await this.addThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific message from a chat thread by its ID
     * Delete a Message
     */
    async deleteMessageRaw(requestParameters: DeleteMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling deleteMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/chat-svc/message/{messageId}`.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters['messageId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a specific message from a chat thread by its ID
     * Delete a Message
     */
    async deleteMessage(requestParameters: DeleteMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.deleteMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific chat thread by its ID
     * Delete a Thread
     */
    async deleteThreadRaw(requestParameters: DeleteThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['threadId'] == null) {
            throw new runtime.RequiredError(
                'threadId',
                'Required parameter "threadId" was null or undefined when calling deleteThread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/chat-svc/thread/{threadId}`.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a specific chat thread by its ID
     * Delete a Thread
     */
    async deleteThread(requestParameters: DeleteThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.deleteThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch messages (and associated assets) for a specific chat thread.
     * List Messages
     */
    async getMessagesRaw(requestParameters: GetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChattypesGetMessagesResponse>> {
        if (requestParameters['threadId'] == null) {
            throw new runtime.RequiredError(
                'threadId',
                'Required parameter "threadId" was null or undefined when calling getMessages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/chat-svc/thread/{threadId}/messages`.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChattypesGetMessagesResponseFromJSON(jsonValue));
    }

    /**
     * Fetch messages (and associated assets) for a specific chat thread.
     * List Messages
     */
    async getMessages(requestParameters: GetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChattypesGetMessagesResponse> {
        const response = await this.getMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch information about a specific chat thread by its ID
     * Get Thread
     */
    async getThreadRaw(requestParameters: GetThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChattypesGetThreadResponse>> {
        if (requestParameters['threadId'] == null) {
            throw new runtime.RequiredError(
                'threadId',
                'Required parameter "threadId" was null or undefined when calling getThread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/chat-svc/thread/{threadId}`.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChattypesGetThreadResponseFromJSON(jsonValue));
    }

    /**
     * Fetch information about a specific chat thread by its ID
     * Get Thread
     */
    async getThread(requestParameters: GetThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChattypesGetThreadResponse> {
        const response = await this.getThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch all chat threads associated with a specific user
     * Get Threads
     */
    async getThreadsRaw(requestParameters: GetThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChattypesGetThreadsResponse>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling getThreads().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/chat-svc/threads`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['request'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChattypesGetThreadsResponseFromJSON(jsonValue));
    }

    /**
     * Fetch all chat threads associated with a specific user
     * Get Threads
     */
    async getThreads(requestParameters: GetThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChattypesGetThreadsResponse> {
        const response = await this.getThreadsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of a specific chat thread
     * Update Thread
     */
    async updateThreadRaw(requestParameters: UpdateThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChattypesAddThreadResponse>> {
        if (requestParameters['threadId'] == null) {
            throw new runtime.RequiredError(
                'threadId',
                'Required parameter "threadId" was null or undefined when calling updateThread().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling updateThread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/chat-svc/thread/{threadId}`.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChattypesUpdateThreadRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChattypesAddThreadResponseFromJSON(jsonValue));
    }

    /**
     * Modify the details of a specific chat thread
     * Update Thread
     */
    async updateThread(requestParameters: UpdateThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChattypesAddThreadResponse> {
        const response = await this.updateThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
