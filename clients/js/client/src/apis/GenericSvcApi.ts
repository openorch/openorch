/* tslint:disable */
/* eslint-disable */
/**
 * Singulatron
 * Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GenericSvcCreateObjectRequest,
  GenericSvcCreateObjectResponse,
  GenericSvcDeleteObjectRequest,
  GenericSvcErrorResponse,
  GenericSvcQueryRequest,
  GenericSvcQueryResponse,
  GenericSvcUpdateObjectRequest,
  GenericSvcUpsertObjectRequest,
  GenericSvcUpsertObjectResponse,
} from '../models/index';
import {
    GenericSvcCreateObjectRequestFromJSON,
    GenericSvcCreateObjectRequestToJSON,
    GenericSvcCreateObjectResponseFromJSON,
    GenericSvcCreateObjectResponseToJSON,
    GenericSvcDeleteObjectRequestFromJSON,
    GenericSvcDeleteObjectRequestToJSON,
    GenericSvcErrorResponseFromJSON,
    GenericSvcErrorResponseToJSON,
    GenericSvcQueryRequestFromJSON,
    GenericSvcQueryRequestToJSON,
    GenericSvcQueryResponseFromJSON,
    GenericSvcQueryResponseToJSON,
    GenericSvcUpdateObjectRequestFromJSON,
    GenericSvcUpdateObjectRequestToJSON,
    GenericSvcUpsertObjectRequestFromJSON,
    GenericSvcUpsertObjectRequestToJSON,
    GenericSvcUpsertObjectResponseFromJSON,
    GenericSvcUpsertObjectResponseToJSON,
} from '../models/index';

export interface CreateObjectRequest {
    body: GenericSvcCreateObjectRequest;
}

export interface DeleteObjectsRequest {
    objectId: string;
    body: GenericSvcDeleteObjectRequest;
}

export interface QueryRequest {
    body?: GenericSvcQueryRequest;
}

export interface UpdateObjectsRequest {
    body: GenericSvcUpdateObjectRequest;
}

export interface UpsertObjectRequest {
    objectId: string;
    body: GenericSvcUpsertObjectRequest;
}

/**
 * 
 */
export class GenericSvcApi extends runtime.BaseAPI {

    /**
     * Creates a new object with the provided details. Requires authorization and user authentication.
     * Create a Generic Object
     */
    async createObjectRaw(requestParameters: CreateObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericSvcCreateObjectResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createObject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/generic-svc/object`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenericSvcCreateObjectRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericSvcCreateObjectResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new object with the provided details. Requires authorization and user authentication.
     * Create a Generic Object
     */
    async createObject(requestParameters: CreateObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericSvcCreateObjectResponse> {
        const response = await this.createObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a generic object from the system based on the provided conditions. Requires authorization and user authentication.
     * Delete a Generic Object
     */
    async deleteObjectsRaw(requestParameters: DeleteObjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling deleteObjects().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling deleteObjects().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/generic-svc/objects/delete`.replace(`{${"objectId"}}`, encodeURIComponent(String(requestParameters['objectId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenericSvcDeleteObjectRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Removes a generic object from the system based on the provided conditions. Requires authorization and user authentication.
     * Delete a Generic Object
     */
    async deleteObjects(requestParameters: DeleteObjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteObjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves objects from a specified table based on search criteria. Requires authorization and user authentication.   Use helper functions in your respective client library such as condition constructors (`equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
     * Find Generic Objects
     */
    async queryRaw(requestParameters: QueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericSvcQueryResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/generic-svc/objects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenericSvcQueryRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericSvcQueryResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves objects from a specified table based on search criteria. Requires authorization and user authentication.   Use helper functions in your respective client library such as condition constructors (`equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
     * Find Generic Objects
     */
    async query(requestParameters: QueryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericSvcQueryResponse> {
        const response = await this.queryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates objects in a specified table based on provided conditions. Requires authorization and user authentication.
     * Update Generic Objects
     */
    async updateObjectsRaw(requestParameters: UpdateObjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateObjects().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/generic-svc/objects/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenericSvcUpdateObjectRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates objects in a specified table based on provided conditions. Requires authorization and user authentication.
     * Update Generic Objects
     */
    async updateObjects(requestParameters: UpdateObjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateObjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new generic object or updates an existing one based on the provided data. Requires authorization and user authentication.
     * Upsert a Generic Object
     */
    async upsertObjectRaw(requestParameters: UpsertObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericSvcUpsertObjectResponse>> {
        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling upsertObject().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling upsertObject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/generic-svc/object/{objectId}`.replace(`{${"objectId"}}`, encodeURIComponent(String(requestParameters['objectId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GenericSvcUpsertObjectRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericSvcUpsertObjectResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new generic object or updates an existing one based on the provided data. Requires authorization and user authentication.
     * Upsert a Generic Object
     */
    async upsertObject(requestParameters: UpsertObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericSvcUpsertObjectResponse> {
        const response = await this.upsertObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
