/* tslint:disable */
/* eslint-disable */
/**
 * OpenOrch
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.3.0-rc.9
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FileSvcDownloadRequest,
  FileSvcDownloadsResponse,
  FileSvcErrorResponse,
  FileSvcGetDownloadResponse,
} from '../models/index';
import {
    FileSvcDownloadRequestFromJSON,
    FileSvcDownloadRequestToJSON,
    FileSvcDownloadsResponseFromJSON,
    FileSvcDownloadsResponseToJSON,
    FileSvcErrorResponseFromJSON,
    FileSvcErrorResponseToJSON,
    FileSvcGetDownloadResponseFromJSON,
    FileSvcGetDownloadResponseToJSON,
} from '../models/index';

export interface DownloadFileRequest {
    body: FileSvcDownloadRequest;
}

export interface GetDownloadRequest {
    downloadId: string;
}

export interface PauseDownloadRequest {
    downloadId: string;
}

/**
 * 
 */
export class FileSvcApi extends runtime.BaseAPI {

    /**
     * Start or resume the download for a specified URL.  Requires the `file-svc:download:create` permission.
     * Download a File
     */
    async downloadFileRaw(requestParameters: DownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling downloadFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/file-svc/download`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FileSvcDownloadRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Start or resume the download for a specified URL.  Requires the `file-svc:download:create` permission.
     * Download a File
     */
    async downloadFile(requestParameters: DownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.downloadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a download by ID.  Requires the `file-svc:download:view` permission.
     * Get a Download
     */
    async getDownloadRaw(requestParameters: GetDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileSvcGetDownloadResponse>> {
        if (requestParameters['downloadId'] == null) {
            throw new runtime.RequiredError(
                'downloadId',
                'Required parameter "downloadId" was null or undefined when calling getDownload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/file-svc/download/{downloadId}`.replace(`{${"downloadId"}}`, encodeURIComponent(String(requestParameters['downloadId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileSvcGetDownloadResponseFromJSON(jsonValue));
    }

    /**
     * Get a download by ID.  Requires the `file-svc:download:view` permission.
     * Get a Download
     */
    async getDownload(requestParameters: GetDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileSvcGetDownloadResponse> {
        const response = await this.getDownloadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch a list of all download details.  Requires the `file-svc:download:view` permission.
     * List Downloads
     */
    async listDownloadsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileSvcDownloadsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/file-svc/downloads`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileSvcDownloadsResponseFromJSON(jsonValue));
    }

    /**
     * Fetch a list of all download details.  Requires the `file-svc:download:view` permission.
     * List Downloads
     */
    async listDownloads(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileSvcDownloadsResponse> {
        const response = await this.listDownloadsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Pause a download that is currently in progress.  Requires the `file-svc:download:edit` permission.
     * Pause a Download
     */
    async pauseDownloadRaw(requestParameters: PauseDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['downloadId'] == null) {
            throw new runtime.RequiredError(
                'downloadId',
                'Required parameter "downloadId" was null or undefined when calling pauseDownload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/file-svc/download/{downloadId}/pause`.replace(`{${"downloadId"}}`, encodeURIComponent(String(requestParameters['downloadId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Pause a download that is currently in progress.  Requires the `file-svc:download:edit` permission.
     * Pause a Download
     */
    async pauseDownload(requestParameters: PauseDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.pauseDownloadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
