/* tslint:disable */
/* eslint-disable */
/**
 * Singulatron
 * AI management and development platform.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NodeSvcProcess } from './NodeSvcProcess';
import {
    NodeSvcProcessFromJSON,
    NodeSvcProcessFromJSONTyped,
    NodeSvcProcessToJSON,
} from './NodeSvcProcess';

/**
 * 
 * @export
 * @interface NodeSvcGPU
 */
export interface NodeSvcGPU {
    /**
     * 
     * @type {string}
     * @memberof NodeSvcGPU
     */
    busId?: string;
    /**
     * 
     * @type {string}
     * @memberof NodeSvcGPU
     */
    computeMode?: string;
    /**
     * 
     * @type {number}
     * @memberof NodeSvcGPU
     */
    gpuUtilization?: number;
    /**
     * Id Node.Hostname + IntraNodeId
     * @type {string}
     * @memberof NodeSvcGPU
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof NodeSvcGPU
     */
    intraNodeId?: number;
    /**
     * 
     * @type {number}
     * @memberof NodeSvcGPU
     */
    memoryTotal?: number;
    /**
     * 
     * @type {number}
     * @memberof NodeSvcGPU
     */
    memoryUsage?: number;
    /**
     * 
     * @type {string}
     * @memberof NodeSvcGPU
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof NodeSvcGPU
     */
    performanceState?: string;
    /**
     * 
     * @type {number}
     * @memberof NodeSvcGPU
     */
    powerCap?: number;
    /**
     * 
     * @type {number}
     * @memberof NodeSvcGPU
     */
    powerUsage?: number;
    /**
     * 
     * @type {Array<NodeSvcProcess>}
     * @memberof NodeSvcGPU
     */
    processDetails?: Array<NodeSvcProcess>;
    /**
     * 
     * @type {number}
     * @memberof NodeSvcGPU
     */
    temperature?: number;
}

/**
 * Check if a given object implements the NodeSvcGPU interface.
 */
export function instanceOfNodeSvcGPU(value: object): value is NodeSvcGPU {
    return true;
}

export function NodeSvcGPUFromJSON(json: any): NodeSvcGPU {
    return NodeSvcGPUFromJSONTyped(json, false);
}

export function NodeSvcGPUFromJSONTyped(json: any, ignoreDiscriminator: boolean): NodeSvcGPU {
    if (json == null) {
        return json;
    }
    return {
        
        'busId': json['busId'] == null ? undefined : json['busId'],
        'computeMode': json['computeMode'] == null ? undefined : json['computeMode'],
        'gpuUtilization': json['gpuUtilization'] == null ? undefined : json['gpuUtilization'],
        'id': json['id'] == null ? undefined : json['id'],
        'intraNodeId': json['intraNodeId'] == null ? undefined : json['intraNodeId'],
        'memoryTotal': json['memoryTotal'] == null ? undefined : json['memoryTotal'],
        'memoryUsage': json['memoryUsage'] == null ? undefined : json['memoryUsage'],
        'name': json['name'] == null ? undefined : json['name'],
        'performanceState': json['performanceState'] == null ? undefined : json['performanceState'],
        'powerCap': json['powerCap'] == null ? undefined : json['powerCap'],
        'powerUsage': json['powerUsage'] == null ? undefined : json['powerUsage'],
        'processDetails': json['processDetails'] == null ? undefined : ((json['processDetails'] as Array<any>).map(NodeSvcProcessFromJSON)),
        'temperature': json['temperature'] == null ? undefined : json['temperature'],
    };
}

export function NodeSvcGPUToJSON(value?: NodeSvcGPU | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'busId': value['busId'],
        'computeMode': value['computeMode'],
        'gpuUtilization': value['gpuUtilization'],
        'id': value['id'],
        'intraNodeId': value['intraNodeId'],
        'memoryTotal': value['memoryTotal'],
        'memoryUsage': value['memoryUsage'],
        'name': value['name'],
        'performanceState': value['performanceState'],
        'powerCap': value['powerCap'],
        'powerUsage': value['powerUsage'],
        'processDetails': value['processDetails'] == null ? undefined : ((value['processDetails'] as Array<any>).map(NodeSvcProcessToJSON)),
        'temperature': value['temperature'],
    };
}

