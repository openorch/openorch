/* tslint:disable */
/* eslint-disable */
/**
 * Singulatron
 * Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DatastoreEqualCondition } from './DatastoreEqualCondition';
import {
    DatastoreEqualConditionFromJSON,
    DatastoreEqualConditionFromJSONTyped,
    DatastoreEqualConditionToJSON,
} from './DatastoreEqualCondition';
import type { DatastoreContainsCondition } from './DatastoreContainsCondition';
import {
    DatastoreContainsConditionFromJSON,
    DatastoreContainsConditionFromJSONTyped,
    DatastoreContainsConditionToJSON,
} from './DatastoreContainsCondition';
import type { DatastoreStartsWithCondition } from './DatastoreStartsWithCondition';
import {
    DatastoreStartsWithConditionFromJSON,
    DatastoreStartsWithConditionFromJSONTyped,
    DatastoreStartsWithConditionToJSON,
} from './DatastoreStartsWithCondition';

/**
 * 
 * @export
 * @interface DatastoreCondition
 */
export interface DatastoreCondition {
    /**
     * All condition returns all objects.
     * @type {object}
     * @memberof DatastoreCondition
     */
    all?: object;
    /**
     * Contains condition returns all objects where the field(s) values contain a particular string.
     * @type {DatastoreContainsCondition}
     * @memberof DatastoreCondition
     */
    contains?: DatastoreContainsCondition;
    /**
     * Equal condition returns objects where value of a field equals (=) to the specified value in the query.
     * @type {DatastoreEqualCondition}
     * @memberof DatastoreCondition
     */
    equal?: DatastoreEqualCondition;
    /**
     * StartsWith condition returns all objects where the field(s) values start with a particular string.
     * @type {DatastoreStartsWithCondition}
     * @memberof DatastoreCondition
     */
    startsWith?: DatastoreStartsWithCondition;
}

/**
 * Check if a given object implements the DatastoreCondition interface.
 */
export function instanceOfDatastoreCondition(value: object): value is DatastoreCondition {
    return true;
}

export function DatastoreConditionFromJSON(json: any): DatastoreCondition {
    return DatastoreConditionFromJSONTyped(json, false);
}

export function DatastoreConditionFromJSONTyped(json: any, ignoreDiscriminator: boolean): DatastoreCondition {
    if (json == null) {
        return json;
    }
    return {
        
        'all': json['all'] == null ? undefined : json['all'],
        'contains': json['contains'] == null ? undefined : DatastoreContainsConditionFromJSON(json['contains']),
        'equal': json['equal'] == null ? undefined : DatastoreEqualConditionFromJSON(json['equal']),
        'startsWith': json['startsWith'] == null ? undefined : DatastoreStartsWithConditionFromJSON(json['startsWith']),
    };
}

export function DatastoreConditionToJSON(value?: DatastoreCondition | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'all': value['all'],
        'contains': DatastoreContainsConditionToJSON(value['contains']),
        'equal': DatastoreEqualConditionToJSON(value['equal']),
        'startsWith': DatastoreStartsWithConditionToJSON(value['startsWith']),
    };
}

