/* tslint:disable */
/* eslint-disable */
/**
 * Singulatron
 * Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DatastoreCondition } from './DatastoreCondition';
import {
    DatastoreConditionFromJSON,
    DatastoreConditionFromJSONTyped,
    DatastoreConditionToJSON,
} from './DatastoreCondition';

/**
 * 
 * @export
 * @interface GenerictypesDeleteRequest
 */
export interface GenerictypesDeleteRequest {
    /**
     * 
     * @type {Array<DatastoreCondition>}
     * @memberof GenerictypesDeleteRequest
     */
    conditions?: Array<DatastoreCondition>;
    /**
     * 
     * @type {string}
     * @memberof GenerictypesDeleteRequest
     */
    table?: string;
}

/**
 * Check if a given object implements the GenerictypesDeleteRequest interface.
 */
export function instanceOfGenerictypesDeleteRequest(value: object): value is GenerictypesDeleteRequest {
    return true;
}

export function GenerictypesDeleteRequestFromJSON(json: any): GenerictypesDeleteRequest {
    return GenerictypesDeleteRequestFromJSONTyped(json, false);
}

export function GenerictypesDeleteRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): GenerictypesDeleteRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'conditions': json['conditions'] == null ? undefined : ((json['conditions'] as Array<any>).map(DatastoreConditionFromJSON)),
        'table': json['table'] == null ? undefined : json['table'],
    };
}

export function GenerictypesDeleteRequestToJSON(value?: GenerictypesDeleteRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'conditions': value['conditions'] == null ? undefined : ((value['conditions'] as Array<any>).map(DatastoreConditionToJSON)),
        'table': value['table'],
    };
}

