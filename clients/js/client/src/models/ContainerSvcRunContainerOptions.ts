/* tslint:disable */
/* eslint-disable */
/**
 * OpenOrch
 * A language-agnostic microservices framework for building AI applications.
 *
 * The version of the OpenAPI document: 0.3.0-rc.25
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ContainerSvcRunContainerOptions
 */
export interface ContainerSvcRunContainerOptions {
    /**
     * Assets maps environment variable names to file URLs.
     * Example: {"MODEL": "https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.2-GGUF/resolve/main/mistral-7b-instruct-v0.2.Q2_K.gguf"}
     * These files are downloaded by the File Svc and mounted in the container.
     * The environment variable `MODEL` will point to the local file path in the container.
     * @type {{ [key: string]: string; }}
     * @memberof ContainerSvcRunContainerOptions
     */
    assets?: { [key: string]: string; };
    /**
     * Envs are environment variables to set in the container
     * @type {Array<string>}
     * @memberof ContainerSvcRunContainerOptions
     */
    envs?: Array<string>;
    /**
     * GPUEnabled specifies if GPU support is enabled
     * @type {boolean}
     * @memberof ContainerSvcRunContainerOptions
     */
    gpuEnabled?: boolean;
    /**
     * Hash is a unique identifier for the container
     * @type {string}
     * @memberof ContainerSvcRunContainerOptions
     */
    hash?: string;
    /**
     * Keeps are paths that persist across container restarts.
     * They function like mounts or volumes, but their external storage location is irrelevant.
     * @type {Array<string>}
     * @memberof ContainerSvcRunContainerOptions
     */
    keeps?: Array<string>;
    /**
     * Labels are metadata labels associated with the container
     * @type {{ [key: string]: string; }}
     * @memberof ContainerSvcRunContainerOptions
     */
    labels?: { [key: string]: string; };
    /**
     * Name is the name of the container
     * @type {string}
     * @memberof ContainerSvcRunContainerOptions
     */
    name?: string;
}

/**
 * Check if a given object implements the ContainerSvcRunContainerOptions interface.
 */
export function instanceOfContainerSvcRunContainerOptions(value: object): value is ContainerSvcRunContainerOptions {
    return true;
}

export function ContainerSvcRunContainerOptionsFromJSON(json: any): ContainerSvcRunContainerOptions {
    return ContainerSvcRunContainerOptionsFromJSONTyped(json, false);
}

export function ContainerSvcRunContainerOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContainerSvcRunContainerOptions {
    if (json == null) {
        return json;
    }
    return {
        
        'assets': json['assets'] == null ? undefined : json['assets'],
        'envs': json['envs'] == null ? undefined : json['envs'],
        'gpuEnabled': json['gpuEnabled'] == null ? undefined : json['gpuEnabled'],
        'hash': json['hash'] == null ? undefined : json['hash'],
        'keeps': json['keeps'] == null ? undefined : json['keeps'],
        'labels': json['labels'] == null ? undefined : json['labels'],
        'name': json['name'] == null ? undefined : json['name'],
    };
}

export function ContainerSvcRunContainerOptionsToJSON(json: any): ContainerSvcRunContainerOptions {
    return ContainerSvcRunContainerOptionsToJSONTyped(json, false);
}

export function ContainerSvcRunContainerOptionsToJSONTyped(value?: ContainerSvcRunContainerOptions | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'assets': value['assets'],
        'envs': value['envs'],
        'gpuEnabled': value['gpuEnabled'],
        'hash': value['hash'],
        'keeps': value['keeps'],
        'labels': value['labels'],
        'name': value['name'],
    };
}

