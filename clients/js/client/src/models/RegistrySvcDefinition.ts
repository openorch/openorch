/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RegistrySvcAPISpec } from './RegistrySvcAPISpec';
import {
    RegistrySvcAPISpecFromJSON,
    RegistrySvcAPISpecFromJSONTyped,
    RegistrySvcAPISpecToJSON,
} from './RegistrySvcAPISpec';
import type { RegistrySvcImageSpec } from './RegistrySvcImageSpec';
import {
    RegistrySvcImageSpecFromJSON,
    RegistrySvcImageSpecFromJSONTyped,
    RegistrySvcImageSpecToJSON,
} from './RegistrySvcImageSpec';
import type { RegistrySvcClient } from './RegistrySvcClient';
import {
    RegistrySvcClientFromJSON,
    RegistrySvcClientFromJSONTyped,
    RegistrySvcClientToJSON,
} from './RegistrySvcClient';

/**
 * 
 * @export
 * @interface RegistrySvcDefinition
 */
export interface RegistrySvcDefinition {
    /**
     * API Specs such as OpenAPI definitions etc.
     * @type {Array<RegistrySvcAPISpec>}
     * @memberof RegistrySvcDefinition
     */
    apiSpecs?: Array<RegistrySvcAPISpec>;
    /**
     * Programming language clients such as on npm or GitHub.
     * @type {Array<RegistrySvcClient>}
     * @memberof RegistrySvcDefinition
     */
    clients?: Array<RegistrySvcClient>;
    /**
     * 
     * @type {string}
     * @memberof RegistrySvcDefinition
     */
    id: string;
    /**
     * Container specifications for Docker, K8s, etc.
     * @type {RegistrySvcImageSpec}
     * @memberof RegistrySvcDefinition
     */
    image: RegistrySvcImageSpec;
}

/**
 * Check if a given object implements the RegistrySvcDefinition interface.
 */
export function instanceOfRegistrySvcDefinition(value: object): value is RegistrySvcDefinition {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('image' in value) || value['image'] === undefined) return false;
    return true;
}

export function RegistrySvcDefinitionFromJSON(json: any): RegistrySvcDefinition {
    return RegistrySvcDefinitionFromJSONTyped(json, false);
}

export function RegistrySvcDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegistrySvcDefinition {
    if (json == null) {
        return json;
    }
    return {
        
        'apiSpecs': json['apiSpecs'] == null ? undefined : ((json['apiSpecs'] as Array<any>).map(RegistrySvcAPISpecFromJSON)),
        'clients': json['clients'] == null ? undefined : ((json['clients'] as Array<any>).map(RegistrySvcClientFromJSON)),
        'id': json['id'],
        'image': RegistrySvcImageSpecFromJSON(json['image']),
    };
}

export function RegistrySvcDefinitionToJSON(value?: RegistrySvcDefinition | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'apiSpecs': value['apiSpecs'] == null ? undefined : ((value['apiSpecs'] as Array<any>).map(RegistrySvcAPISpecToJSON)),
        'clients': value['clients'] == null ? undefined : ((value['clients'] as Array<any>).map(RegistrySvcClientToJSON)),
        'id': value['id'],
        'image': RegistrySvcImageSpecToJSON(value['image']),
    };
}

