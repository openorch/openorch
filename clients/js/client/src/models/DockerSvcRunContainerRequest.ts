/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DockerSvcRunContainerOptions } from './DockerSvcRunContainerOptions';
import {
    DockerSvcRunContainerOptionsFromJSON,
    DockerSvcRunContainerOptionsFromJSONTyped,
    DockerSvcRunContainerOptionsToJSON,
} from './DockerSvcRunContainerOptions';

/**
 * 
 * @export
 * @interface DockerSvcRunContainerRequest
 */
export interface DockerSvcRunContainerRequest {
    /**
     * HostPort is the port on the host machine that will be mapped to the container's port
     * @type {number}
     * @memberof DockerSvcRunContainerRequest
     */
    hostPort?: number;
    /**
     * Image is the Docker image to use for the container
     * @type {string}
     * @memberof DockerSvcRunContainerRequest
     */
    image: string;
    /**
     * Options provides additional options for launching the container
     * @type {DockerSvcRunContainerOptions}
     * @memberof DockerSvcRunContainerRequest
     */
    options?: DockerSvcRunContainerOptions;
    /**
     * Port is the port number that the container will expose
     * @type {number}
     * @memberof DockerSvcRunContainerRequest
     */
    port: number;
}

/**
 * Check if a given object implements the DockerSvcRunContainerRequest interface.
 */
export function instanceOfDockerSvcRunContainerRequest(value: object): value is DockerSvcRunContainerRequest {
    if (!('image' in value) || value['image'] === undefined) return false;
    if (!('port' in value) || value['port'] === undefined) return false;
    return true;
}

export function DockerSvcRunContainerRequestFromJSON(json: any): DockerSvcRunContainerRequest {
    return DockerSvcRunContainerRequestFromJSONTyped(json, false);
}

export function DockerSvcRunContainerRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): DockerSvcRunContainerRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'hostPort': json['hostPort'] == null ? undefined : json['hostPort'],
        'image': json['image'],
        'options': json['options'] == null ? undefined : DockerSvcRunContainerOptionsFromJSON(json['options']),
        'port': json['port'],
    };
}

export function DockerSvcRunContainerRequestToJSON(value?: DockerSvcRunContainerRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'hostPort': value['hostPort'],
        'image': value['image'],
        'options': DockerSvcRunContainerOptionsToJSON(value['options']),
        'port': value['port'],
    };
}

