/* tslint:disable */
/* eslint-disable */
/**
 * Singulatron
 * Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UsertypesUser } from './UsertypesUser';
import {
    UsertypesUserFromJSON,
    UsertypesUserFromJSONTyped,
    UsertypesUserToJSON,
} from './UsertypesUser';

/**
 * 
 * @export
 * @interface UsertypesGetUsersResponse
 */
export interface UsertypesGetUsersResponse {
    /**
     * 
     * @type {string}
     * @memberof UsertypesGetUsersResponse
     */
    after?: string;
    /**
     * 
     * @type {number}
     * @memberof UsertypesGetUsersResponse
     */
    count?: number;
    /**
     * 
     * @type {Array<UsertypesUser>}
     * @memberof UsertypesGetUsersResponse
     */
    users?: Array<UsertypesUser>;
}

/**
 * Check if a given object implements the UsertypesGetUsersResponse interface.
 */
export function instanceOfUsertypesGetUsersResponse(value: object): value is UsertypesGetUsersResponse {
    return true;
}

export function UsertypesGetUsersResponseFromJSON(json: any): UsertypesGetUsersResponse {
    return UsertypesGetUsersResponseFromJSONTyped(json, false);
}

export function UsertypesGetUsersResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UsertypesGetUsersResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'after': json['after'] == null ? undefined : json['after'],
        'count': json['count'] == null ? undefined : json['count'],
        'users': json['users'] == null ? undefined : ((json['users'] as Array<any>).map(UsertypesUserFromJSON)),
    };
}

export function UsertypesGetUsersResponseToJSON(value?: UsertypesGetUsersResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'after': value['after'],
        'count': value['count'],
        'users': value['users'] == null ? undefined : ((value['users'] as Array<any>).map(UsertypesUserToJSON)),
    };
}

