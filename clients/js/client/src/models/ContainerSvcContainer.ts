/* tslint:disable */
/* eslint-disable */
/**
 * OpenOrch
 * A language-agnostic microservices framework for building AI applications.
 *
 * The version of the OpenAPI document: 0.3.0-rc.27
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ContainerSvcContainer
 */
export interface ContainerSvcContainer {
    /**
     * Envs are environment variables set within the container.
     * @type {Array<string>}
     * @memberof ContainerSvcContainer
     */
    envs?: Array<string>;
    /**
     * GPUEnabled specifies whether GPU support is enabled for the container.
     * @type {boolean}
     * @memberof ContainerSvcContainer
     */
    gpuEnabled?: boolean;
    /**
     * Hash is a unique identifier associated with the container.
     * @type {string}
     * @memberof ContainerSvcContainer
     */
    hash?: string;
    /**
     * HostPort is the port on the host machine mapped to the containerâ€™s internal port.
     * @type {number}
     * @memberof ContainerSvcContainer
     */
    hostPort?: number;
    /**
     * Id is the unique identifier for the container instance.
     * @type {string}
     * @memberof ContainerSvcContainer
     */
    id?: string;
    /**
     * Image is the Docker image used to create the container.
     * @type {string}
     * @memberof ContainerSvcContainer
     */
    image?: string;
    /**
     * Keeps are paths that persist across container restarts.
     * They function like mounts or volumes, but their external storage location is irrelevant.
     * @type {Array<string>}
     * @memberof ContainerSvcContainer
     */
    keeps?: Array<string>;
    /**
     * Labels are metadata tags assigned to the container.
     * @type {{ [key: string]: string; }}
     * @memberof ContainerSvcContainer
     */
    labels?: { [key: string]: string; };
    /**
     * Name is the human-readable name assigned to the container.
     * @type {string}
     * @memberof ContainerSvcContainer
     */
    name?: string;
    /**
     * Node Id
     * Please see the documentation for the envar OPENORCH_NODE_ID
     * @type {string}
     * @memberof ContainerSvcContainer
     */
    nodeId?: string;
    /**
     * Port is the internal port exposed by the container.
     * @type {number}
     * @memberof ContainerSvcContainer
     */
    port?: number;
    /**
     * Status indicates the current state of the container (e.g., running, stopped).
     * @type {string}
     * @memberof ContainerSvcContainer
     */
    status?: string;
}

/**
 * Check if a given object implements the ContainerSvcContainer interface.
 */
export function instanceOfContainerSvcContainer(value: object): value is ContainerSvcContainer {
    return true;
}

export function ContainerSvcContainerFromJSON(json: any): ContainerSvcContainer {
    return ContainerSvcContainerFromJSONTyped(json, false);
}

export function ContainerSvcContainerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContainerSvcContainer {
    if (json == null) {
        return json;
    }
    return {
        
        'envs': json['envs'] == null ? undefined : json['envs'],
        'gpuEnabled': json['gpuEnabled'] == null ? undefined : json['gpuEnabled'],
        'hash': json['hash'] == null ? undefined : json['hash'],
        'hostPort': json['hostPort'] == null ? undefined : json['hostPort'],
        'id': json['id'] == null ? undefined : json['id'],
        'image': json['image'] == null ? undefined : json['image'],
        'keeps': json['keeps'] == null ? undefined : json['keeps'],
        'labels': json['labels'] == null ? undefined : json['labels'],
        'name': json['name'] == null ? undefined : json['name'],
        'nodeId': json['nodeId'] == null ? undefined : json['nodeId'],
        'port': json['port'] == null ? undefined : json['port'],
        'status': json['status'] == null ? undefined : json['status'],
    };
}

export function ContainerSvcContainerToJSON(json: any): ContainerSvcContainer {
    return ContainerSvcContainerToJSONTyped(json, false);
}

export function ContainerSvcContainerToJSONTyped(value?: ContainerSvcContainer | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'envs': value['envs'],
        'gpuEnabled': value['gpuEnabled'],
        'hash': value['hash'],
        'hostPort': value['hostPort'],
        'id': value['id'],
        'image': value['image'],
        'keeps': value['keeps'],
        'labels': value['labels'],
        'name': value['name'],
        'nodeId': value['nodeId'],
        'port': value['port'],
        'status': value['status'],
    };
}

