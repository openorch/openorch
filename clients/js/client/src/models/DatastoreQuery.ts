/* tslint:disable */
/* eslint-disable */
/**
 * Singulatron
 * AI management and development platform.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DatastoreCondition } from './DatastoreCondition';
import {
    DatastoreConditionFromJSON,
    DatastoreConditionFromJSONTyped,
    DatastoreConditionToJSON,
} from './DatastoreCondition';
import type { DatastoreOrderBy } from './DatastoreOrderBy';
import {
    DatastoreOrderByFromJSON,
    DatastoreOrderByFromJSONTyped,
    DatastoreOrderByToJSON,
} from './DatastoreOrderBy';

/**
 * 
 * @export
 * @interface DatastoreQuery
 */
export interface DatastoreQuery {
    /**
     * After is used for paginations. Instead of offset-based pagination,
     * we support cursor-based pagination because it works better in a scalable,
     * distributed environment.
     * @type {Array<object>}
     * @memberof DatastoreQuery
     */
    after?: Array<object>;
    /**
     * Conditions are filtering options of a query. It is advised to use
     * It's advised to use helper functions in your respective client library such as condition constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
     * @type {Array<DatastoreCondition>}
     * @memberof DatastoreQuery
     */
    conditions?: Array<DatastoreCondition>;
    /**
     * Count true means return the count of the dataset filtered by Conditions
     * without after or limit.
     * @type {boolean}
     * @memberof DatastoreQuery
     */
    count?: boolean;
    /**
     * Limit the number of records in the result set.
     * @type {number}
     * @memberof DatastoreQuery
     */
    limit?: number;
    /**
     * OrderBys order the result set.
     * @type {Array<DatastoreOrderBy>}
     * @memberof DatastoreQuery
     */
    orderBys?: Array<DatastoreOrderBy>;
}

/**
 * Check if a given object implements the DatastoreQuery interface.
 */
export function instanceOfDatastoreQuery(value: object): value is DatastoreQuery {
    return true;
}

export function DatastoreQueryFromJSON(json: any): DatastoreQuery {
    return DatastoreQueryFromJSONTyped(json, false);
}

export function DatastoreQueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): DatastoreQuery {
    if (json == null) {
        return json;
    }
    return {
        
        'after': json['after'] == null ? undefined : json['after'],
        'conditions': json['conditions'] == null ? undefined : ((json['conditions'] as Array<any>).map(DatastoreConditionFromJSON)),
        'count': json['count'] == null ? undefined : json['count'],
        'limit': json['limit'] == null ? undefined : json['limit'],
        'orderBys': json['orderBys'] == null ? undefined : ((json['orderBys'] as Array<any>).map(DatastoreOrderByFromJSON)),
    };
}

export function DatastoreQueryToJSON(value?: DatastoreQuery | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'after': value['after'],
        'conditions': value['conditions'] == null ? undefined : ((value['conditions'] as Array<any>).map(DatastoreConditionToJSON)),
        'count': value['count'],
        'limit': value['limit'],
        'orderBys': value['orderBys'] == null ? undefined : ((value['orderBys'] as Array<any>).map(DatastoreOrderByToJSON)),
    };
}

