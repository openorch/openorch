/* tslint:disable */
/* eslint-disable */
/**
 * OpenOrch
 * A language-agnostic microservices framework for building AI applications.
 *
 * The version of the OpenAPI document: 0.3.0-rc.19
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DatastoreFilter } from './DatastoreFilter';
import {
    DatastoreFilterFromJSON,
    DatastoreFilterFromJSONTyped,
    DatastoreFilterToJSON,
    DatastoreFilterToJSONTyped,
} from './DatastoreFilter';
import type { DataSvcObject } from './DataSvcObject';
import {
    DataSvcObjectFromJSON,
    DataSvcObjectFromJSONTyped,
    DataSvcObjectToJSON,
    DataSvcObjectToJSONTyped,
} from './DataSvcObject';

/**
 * 
 * @export
 * @interface DataSvcUpdateObjectRequest
 */
export interface DataSvcUpdateObjectRequest {
    /**
     * 
     * @type {Array<DatastoreFilter>}
     * @memberof DataSvcUpdateObjectRequest
     */
    filters?: Array<DatastoreFilter>;
    /**
     * 
     * @type {DataSvcObject}
     * @memberof DataSvcUpdateObjectRequest
     */
    object?: DataSvcObject;
    /**
     * 
     * @type {string}
     * @memberof DataSvcUpdateObjectRequest
     */
    table?: string;
}

/**
 * Check if a given object implements the DataSvcUpdateObjectRequest interface.
 */
export function instanceOfDataSvcUpdateObjectRequest(value: object): value is DataSvcUpdateObjectRequest {
    return true;
}

export function DataSvcUpdateObjectRequestFromJSON(json: any): DataSvcUpdateObjectRequest {
    return DataSvcUpdateObjectRequestFromJSONTyped(json, false);
}

export function DataSvcUpdateObjectRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataSvcUpdateObjectRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'filters': json['filters'] == null ? undefined : ((json['filters'] as Array<any>).map(DatastoreFilterFromJSON)),
        'object': json['object'] == null ? undefined : DataSvcObjectFromJSON(json['object']),
        'table': json['table'] == null ? undefined : json['table'],
    };
}

export function DataSvcUpdateObjectRequestToJSON(json: any): DataSvcUpdateObjectRequest {
    return DataSvcUpdateObjectRequestToJSONTyped(json, false);
}

export function DataSvcUpdateObjectRequestToJSONTyped(value?: DataSvcUpdateObjectRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'filters': value['filters'] == null ? undefined : ((value['filters'] as Array<any>).map(DatastoreFilterToJSON)),
        'object': DataSvcObjectToJSON(value['object']),
        'table': value['table'],
    };
}

