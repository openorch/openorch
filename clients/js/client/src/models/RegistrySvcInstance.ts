/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.3.0-rc.1
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RegistrySvcInstanceStatus } from './RegistrySvcInstanceStatus';
import {
    RegistrySvcInstanceStatusFromJSON,
    RegistrySvcInstanceStatusFromJSONTyped,
    RegistrySvcInstanceStatusToJSON,
} from './RegistrySvcInstanceStatus';

/**
 * 
 * @export
 * @interface RegistrySvcInstance
 */
export interface RegistrySvcInstance {
    /**
     * The ID of the deployment that this instance is an instance of.
     * @type {string}
     * @memberof RegistrySvcInstance
     */
    deploymentId: string;
    /**
     * Details
     * @type {string}
     * @memberof RegistrySvcInstance
     */
    details?: string;
    /**
     * Host of the instance address. Required if URL is not provided
     * @type {string}
     * @memberof RegistrySvcInstance
     */
    host?: string;
    /**
     * Required: ID of the instance
     * @type {string}
     * @memberof RegistrySvcInstance
     */
    id: string;
    /**
     * IP of the instance address. Optional: to register by IP instead of host
     * @type {string}
     * @memberof RegistrySvcInstance
     */
    ip?: string;
    /**
     * Last time the instance gave a sign of life
     * @type {string}
     * @memberof RegistrySvcInstance
     */
    lastHeartbeat?: string;
    /**
     * URL of the Superplatform daemon
     * @type {string}
     * @memberof RegistrySvcInstance
     */
    nodeUrl?: string;
    /**
     * Path of the instance address. Optional (e.g., "/api")
     * @type {string}
     * @memberof RegistrySvcInstance
     */
    path?: string;
    /**
     * Port of the instance address. Required if URL is not provided
     * @type {number}
     * @memberof RegistrySvcInstance
     */
    port?: number;
    /**
     * Scheme of the instance address. Required if URL is not provided.
     * @type {string}
     * @memberof RegistrySvcInstance
     */
    scheme?: string;
    /**
     * Status
     * @type {RegistrySvcInstanceStatus}
     * @memberof RegistrySvcInstance
     */
    status: RegistrySvcInstanceStatus;
    /**
     * Full address URL of the instance.
     * @type {string}
     * @memberof RegistrySvcInstance
     */
    url: string;
}



/**
 * Check if a given object implements the RegistrySvcInstance interface.
 */
export function instanceOfRegistrySvcInstance(value: object): value is RegistrySvcInstance {
    if (!('deploymentId' in value) || value['deploymentId'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    return true;
}

export function RegistrySvcInstanceFromJSON(json: any): RegistrySvcInstance {
    return RegistrySvcInstanceFromJSONTyped(json, false);
}

export function RegistrySvcInstanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegistrySvcInstance {
    if (json == null) {
        return json;
    }
    return {
        
        'deploymentId': json['deploymentId'],
        'details': json['details'] == null ? undefined : json['details'],
        'host': json['host'] == null ? undefined : json['host'],
        'id': json['id'],
        'ip': json['ip'] == null ? undefined : json['ip'],
        'lastHeartbeat': json['lastHeartbeat'] == null ? undefined : json['lastHeartbeat'],
        'nodeUrl': json['nodeUrl'] == null ? undefined : json['nodeUrl'],
        'path': json['path'] == null ? undefined : json['path'],
        'port': json['port'] == null ? undefined : json['port'],
        'scheme': json['scheme'] == null ? undefined : json['scheme'],
        'status': RegistrySvcInstanceStatusFromJSON(json['status']),
        'url': json['url'],
    };
}

export function RegistrySvcInstanceToJSON(value?: RegistrySvcInstance | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'deploymentId': value['deploymentId'],
        'details': value['details'],
        'host': value['host'],
        'id': value['id'],
        'ip': value['ip'],
        'lastHeartbeat': value['lastHeartbeat'],
        'nodeUrl': value['nodeUrl'],
        'path': value['path'],
        'port': value['port'],
        'scheme': value['scheme'],
        'status': RegistrySvcInstanceStatusToJSON(value['status']),
        'url': value['url'],
    };
}

