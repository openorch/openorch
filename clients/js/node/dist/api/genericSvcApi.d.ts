/**
 * Singulatron
 * Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import http from 'http';
import { GenericSvcCreateObjectRequest } from '../model/genericSvcCreateObjectRequest';
import { GenericSvcCreateObjectResponse } from '../model/genericSvcCreateObjectResponse';
import { GenericSvcDeleteObjectRequest } from '../model/genericSvcDeleteObjectRequest';
import { GenericSvcQueryRequest } from '../model/genericSvcQueryRequest';
import { GenericSvcQueryResponse } from '../model/genericSvcQueryResponse';
import { GenericSvcUpdateObjectRequest } from '../model/genericSvcUpdateObjectRequest';
import { GenericSvcUpsertObjectRequest } from '../model/genericSvcUpsertObjectRequest';
import { GenericSvcUpsertObjectResponse } from '../model/genericSvcUpsertObjectResponse';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum GenericSvcApiApiKeys {
    BearerAuth = 0
}
export declare class GenericSvcApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BearerAuth: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: GenericSvcApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Creates a new object with the provided details. Requires authorization and user authentication.
     * @summary Create a Generic Object
     * @param body Create request payload
     */
    createObject(body: GenericSvcCreateObjectRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: GenericSvcCreateObjectResponse;
    }>;
    /**
     * Removes a generic object from the system based on the provided conditions. Requires authorization and user authentication.
     * @summary Delete a Generic Object
     * @param objectId Object ID
     * @param body Delete request payload
     */
    deleteObject(objectId: string, body: GenericSvcDeleteObjectRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Retrieves objects from a specified table based on search criteria. Requires authorization and user authentication.   Use helper functions in your respective client library such as condition constructors (`equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
     * @summary Find Generic Objects
     * @param body Query Request
     */
    query(body?: GenericSvcQueryRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: GenericSvcQueryResponse;
    }>;
    /**
     * Updates objects in a specified table based on provided conditions. Requires authorization and user authentication.
     * @summary Update Generic Objects
     * @param body Update request payload
     */
    updateObjects(body: GenericSvcUpdateObjectRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Creates a new generic object or updates an existing one based on the provided data. Requires authorization and user authentication.
     * @summary Upsert a Generic Object
     * @param objectId Object ID
     * @param body Upsert request payload
     */
    upsertObject(objectId: string, body: GenericSvcUpsertObjectRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: GenericSvcUpsertObjectResponse;
    }>;
}
