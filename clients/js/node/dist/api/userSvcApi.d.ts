/**
 * Singulatron
 * Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import http from 'http';
import { UserSvcChangePasswordAdminRequest } from '../model/userSvcChangePasswordAdminRequest';
import { UserSvcChangePasswordRequest } from '../model/userSvcChangePasswordRequest';
import { UserSvcCreateRoleRequest } from '../model/userSvcCreateRoleRequest';
import { UserSvcCreateRoleResponse } from '../model/userSvcCreateRoleResponse';
import { UserSvcCreateUserRequest } from '../model/userSvcCreateUserRequest';
import { UserSvcGetPermissionsResponse } from '../model/userSvcGetPermissionsResponse';
import { UserSvcGetPublicKeyResponse } from '../model/userSvcGetPublicKeyResponse';
import { UserSvcGetRolesResponse } from '../model/userSvcGetRolesResponse';
import { UserSvcGetUsersRequest } from '../model/userSvcGetUsersRequest';
import { UserSvcGetUsersResponse } from '../model/userSvcGetUsersResponse';
import { UserSvcIsAuthorizedRequest } from '../model/userSvcIsAuthorizedRequest';
import { UserSvcIsAuthorizedResponse } from '../model/userSvcIsAuthorizedResponse';
import { UserSvcLoginRequest } from '../model/userSvcLoginRequest';
import { UserSvcLoginResponse } from '../model/userSvcLoginResponse';
import { UserSvcReadUserByTokenRequest } from '../model/userSvcReadUserByTokenRequest';
import { UserSvcReadUserByTokenResponse } from '../model/userSvcReadUserByTokenResponse';
import { UserSvcRegisterRequest } from '../model/userSvcRegisterRequest';
import { UserSvcSaveProfileRequest } from '../model/userSvcSaveProfileRequest';
import { UserSvcSetRolePermissionsRequest } from '../model/userSvcSetRolePermissionsRequest';
import { UserSvcUpserPermissionRequest } from '../model/userSvcUpserPermissionRequest';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum UserSvcApiApiKeys {
    BearerAuth = 0
}
export declare class UserSvcApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BearerAuth: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: UserSvcApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Adds a specific permission to a role identified by roleId.  Requires the `user-svc:permission:assign` permission.
     * @summary Add Permission to Role
     * @param roleId Role ID
     * @param permissionId Permission ID
     */
    addPermissionToRole(roleId: string, permissionId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Allows an authenticated user to change their own password.
     * @summary Change User Password
     * @param request Change Password Request
     */
    changePassword(request: UserSvcChangePasswordRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Allows an administrator to change a user\'s password.
     * @summary Change User Password (Admin)
     * @param request Change Password Request
     */
    changePasswordAdmin(request: UserSvcChangePasswordAdminRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Create a new role. <b>The role ID must be prefixed by the callers username (email).</b> Eg. if the owner\'s email/username is `petstore-svc` the role should look like `petstore-svc:admin`. The user account who creates the role will become the owner of that role, and only the owner will be able to edit the role.  Requires the `user-svc:role:create` permission.
     * @summary Create a New Role
     * @param request Create Role Request
     */
    createRole(request: UserSvcCreateRoleRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcCreateRoleResponse;
    }>;
    /**
     * Allows an authenticated administrator to create a new user with specified details.
     * @summary Create a New User
     * @param request Create User Request
     */
    createUser(request: UserSvcCreateUserRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Delete a role based on the role ID.
     * @summary Delete a Role
     * @param roleId Role ID
     */
    deleteRole(roleId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Delete a user based on the user ID.
     * @summary Delete a User
     * @param userId User ID
     */
    deleteUser(userId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Retrieve permissions associated with a specific role ID.
     * @summary Get Permissions by Role
     * @param roleId Role ID
     */
    getPermissionsByRole(roleId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcGetPermissionsResponse;
    }>;
    /**
     * Get the public key to descrypt the JWT.
     * @summary Ge Public Key
     */
    getPublicKey(options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcGetPublicKeyResponse;
    }>;
    /**
     * Retrieve all roles from the user service.
     * @summary Get all Roles
     */
    getRoles(options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcGetRolesResponse;
    }>;
    /**
     * Fetches a list of users with optional query filters and pagination.
     * @summary List Users
     * @param request Get Users Request
     */
    getUsers(request?: UserSvcGetUsersRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcGetUsersResponse;
    }>;
    /**
     * Check if a user is authorized for a specific permission.
     * @summary Is Authorized
     * @param permissionId Permission ID
     * @param body Is Authorized Request
     */
    isAuthorized(permissionId: string, body: UserSvcIsAuthorizedRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcIsAuthorizedResponse;
    }>;
    /**
     * Authenticates a user and returns a token.
     * @summary Login
     * @param request Login Request
     */
    login(request: UserSvcLoginRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcLoginResponse;
    }>;
    /**
     * Retrieve user information based on an authentication token.
     * @summary Read User by Token
     * @param body Read User By Token Request
     */
    readUserByToken(body: UserSvcReadUserByTokenRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcReadUserByTokenResponse;
    }>;
    /**
     * Register a new user with a name, email, and password.
     * @summary Register a New User
     * @param body Register Request
     */
    register(body: UserSvcRegisterRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Save user profile information based on the provided user ID.
     * @summary Save User Profile
     * @param userId User ID
     * @param body Save Profile Request
     */
    saveUserProfile(userId: string, body: UserSvcSaveProfileRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Set permissions for a specified role. The caller can add permissions it owns to any role. If the caller tries to add a permission it doesn\'t own to a role, `StatusBadRequest` will be returned.
     * @summary Set Role Permissions
     * @param roleId Role ID
     * @param body Set Role Permissions Request
     */
    setRolePermission(roleId: string, body: UserSvcSetRolePermissionsRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Creates or updates a permission. <b>The permission ID must be prefixed by the callers username (email).</b> Eg. if the owner\'s email/username is `petstore-svc` the permission should look like `petstore-svc:pet:edit`.  Requires the `user-svc:permission:create` permission.
     * @summary Upsert a Permission
     * @param permissionId Permission ID
     * @param requestBody Permission Details
     */
    upsertPermission(permissionId: string, requestBody: UserSvcUpserPermissionRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
}
