/**
 * OpenOrch
 * A language-agnostic microservices framework for building AI applications.
 *
 * The version of the OpenAPI document: 0.3.0-rc.28
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class ContainerSvcContainer {
    /**
    * Envs are environment variables set within the container.
    */
    'envs'?: Array<string>;
    /**
    * GPUEnabled specifies whether GPU support is enabled for the container.
    */
    'gpuEnabled'?: boolean;
    /**
    * Hash is a unique identifier associated with the container.
    */
    'hash'?: string;
    /**
    * HostPort is the port on the host machine mapped to the containerâ€™s internal port.
    */
    'hostPort'?: number;
    /**
    * Id is the unique identifier for the container instance.
    */
    'id'?: string;
    /**
    * Image is the Docker image used to create the container.
    */
    'image'?: string;
    /**
    * Keeps are paths that persist across container restarts. They function like mounts or volumes, but their external storage location is irrelevant.
    */
    'keeps'?: Array<string>;
    /**
    * Labels are metadata tags assigned to the container.
    */
    'labels'?: { [key: string]: string; };
    /**
    * Name is the human-readable name assigned to the container.
    */
    'name'?: string;
    /**
    * Node Id Please see the documentation for the envar OPENORCH_NODE_ID
    */
    'nodeId'?: string;
    /**
    * Port is the internal port exposed by the container.
    */
    'port'?: number;
    /**
    * Status indicates the current state of the container (e.g., running, stopped).
    */
    'status'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "envs",
            "baseName": "envs",
            "type": "Array<string>"
        },
        {
            "name": "gpuEnabled",
            "baseName": "gpuEnabled",
            "type": "boolean"
        },
        {
            "name": "hash",
            "baseName": "hash",
            "type": "string"
        },
        {
            "name": "hostPort",
            "baseName": "hostPort",
            "type": "number"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "image",
            "baseName": "image",
            "type": "string"
        },
        {
            "name": "keeps",
            "baseName": "keeps",
            "type": "Array<string>"
        },
        {
            "name": "labels",
            "baseName": "labels",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "nodeId",
            "baseName": "nodeId",
            "type": "string"
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "number"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ContainerSvcContainer.attributeTypeMap;
    }
}

