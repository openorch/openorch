/**
 * Singulatron
 * AI management and development platform.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { DatastoreCondition } from './datastoreCondition';
import { DatastoreOrderBy } from './datastoreOrderBy';

export class DatastoreQuery {
    /**
    * After is used for paginations. Instead of offset-based pagination, we support cursor-based pagination because it works better in a scalable, distributed environment.
    */
    'after'?: Array<object>;
    /**
    * Conditions are filtering options of a query. It is advised to use It\'s advised to use helper functions in your respective client library such as condition constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
    */
    'conditions'?: Array<DatastoreCondition>;
    /**
    * Count true means return the count of the dataset filtered by Conditions without after or limit.
    */
    'count'?: boolean;
    /**
    * Limit the number of records in the result set.
    */
    'limit'?: number;
    /**
    * OrderBys order the result set.
    */
    'orderBys'?: Array<DatastoreOrderBy>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "after",
            "baseName": "after",
            "type": "Array<object>"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<DatastoreCondition>"
        },
        {
            "name": "count",
            "baseName": "count",
            "type": "boolean"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        },
        {
            "name": "orderBys",
            "baseName": "orderBys",
            "type": "Array<DatastoreOrderBy>"
        }    ];

    static getAttributeTypeMap() {
        return DatastoreQuery.attributeTypeMap;
    }
}

