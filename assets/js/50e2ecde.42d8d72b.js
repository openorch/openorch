"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[4644],{14642:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>f,contentTitle:()=>u,default:()=>T,frontMatter:()=>g,metadata:()=>i,toc:()=>b});const i=JSON.parse('{"id":"openorch/list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","source":"@site/docs/openorch/list-prompts.api.mdx","sourceDirName":"openorch","slug":"/openorch/list-prompts","permalink":"/docs/openorch/list-prompts","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","sidebar_label":"List Prompts","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/openorch/openorch","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Prompt an AI","permalink":"/docs/openorch/prompt"},"next":{"title":"Subscribe to Prompt Responses by Thread","permalink":"/docs/openorch/subscribe-to-prompt-responses"}}');var s=r(74848),o=r(28453),p=r(53746),n=r.n(p),a=r(56518),d=r.n(a),m=r(99972),c=r.n(m),l=r(25342),y=r.n(l),h=(r(44215),r(82223),r(24861));const g={id:"list-prompts",title:"List Prompts",description:"List prompts that satisfy a query.",sidebar_label:"List Prompts",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/openorch/openorch",custom_edit_url:null},u=void 0,f={},b=[];function S(e){const t={p:"p",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(h.default,{as:"h1",className:"openapi__heading",children:"List Prompts"}),"\n",(0,s.jsx)(n(),{method:"post",path:"/prompt-svc/prompts",context:"endpoint"}),"\n",(0,s.jsx)(t.p,{children:"List prompts that satisfy a query."}),"\n",(0,s.jsx)(h.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,s.jsx)(d(),{parameters:void 0}),"\n",(0,s.jsx)(c(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},jsonValues:{description:"JSONValues is a JSON marshalled array of values.\nIt's JSON marhalled due to the limitations of the\nSwaggo -> OpenAPI 2.0 -> OpenAPI Go generator toolchain.",type:"string"},op:{enum:["equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]}},type:"object"},type:"array"},jsonAfter:{description:"JSONAfter is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.\n\nJSONAfter is a JSON encoded string due to limitations of Swaggo (ie. []interface{} generates []map[stirng]interface{}).",type:"string"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},randomize:{description:"Randomize indicates that the results should be randomized instead of ordered by the `field` and `desc` criteria",type:"boolean"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"List Prompts Request"}}),"\n",(0,s.jsx)(y(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{after:{},count:{type:"integer"},prompts:{items:{properties:{createdAt:{description:"CreatedAt is the time of the prompt creation.",type:"string"},engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters"},error:{description:"Error that arose during prompt execution, if any.",type:"string"},id:{description:"Id is the unique ID of the prompt.",type:"string"},lastRun:{description:"LastRun is the time of the last prompt run.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the OpenOrch internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},requestMessageId:{type:"string"},responseMessageId:{type:"string"},runCount:{description:"RunCount is the number of times the prompt was retried due to errors",type:"integer"},status:{allOf:[{enum:["scheduled","running","completed","errored","abandoned","canceled"],type:"string","x-enum-varnames":["PromptStatusScheduled","PromptStatusRunning","PromptStatusCompleted","PromptStatusErrored","PromptStatusAbandoned","PromptStatusCanceled"]}],description:"Status of the prompt."},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"},type:{allOf:[{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]}],description:'Type is inferred from the `Parameters` or `EngineParameters` field.\nEg. A LLamaCpp prompt will be "Text-to-Text",\na Stabel Diffusion one will be "Text-to-Image" etc.'},updatedAt:{description:"UpdatedAt is the last time the prompt was updated.",type:"string"},userId:{description:"UserId contains the ID of the user who submitted the prompt.",type:"string"}},required:["prompt"],type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function T(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(S,{...e})}):S(e)}}}]);