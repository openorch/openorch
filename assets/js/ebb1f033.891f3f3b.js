"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[5925],{37726:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>g,contentTitle:()=>f,default:()=>O,frontMatter:()=>y,metadata:()=>s,toc:()=>b});const s=JSON.parse('{"id":"openorch/get-users","title":"List Users","description":"Fetches a list of users with optional query filters and pagination.","source":"@site/docs/openorch/get-users.api.mdx","sourceDirName":"openorch","slug":"/openorch/get-users","permalink":"/docs/openorch/get-users","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"get-users","title":"List Users","description":"Fetches a list of users with optional query filters and pagination.","sidebar_label":"List Users","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/openorch/openorch","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Read User by Token","permalink":"/docs/openorch/read-user-by-token"}}');var r=i(74848),o=i(28453),n=i(53746),a=i.n(n),p=i(56518),d=i.n(p),c=i(99972),l=i.n(c),h=i(25342),u=i.n(h),m=(i(44215),i(82223),i(24861));const y={id:"get-users",title:"List Users",description:"Fetches a list of users with optional query filters and pagination.",sidebar_label:"List Users",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/openorch/openorch",custom_edit_url:null},f=void 0,g={},b=[];function w(e){const t={p:"p",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(m.default,{as:"h1",className:"openapi__heading",children:"List Users"}),"\n",(0,r.jsx)(a(),{method:"post",path:"/user-svc/users",context:"endpoint"}),"\n",(0,r.jsx)(t.p,{children:"Fetches a list of users with optional query filters and pagination."}),"\n",(0,r.jsx)(m.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,r.jsx)(d(),{parameters:void 0}),"\n",(0,r.jsx)(l(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},jsonValues:{description:"JSONValues is a JSON marshalled array of values.\nIt's JSON marhalled due to the limitations of the\nSwaggo -> OpenAPI 2.0 -> OpenAPI Go generator toolchain.",type:"string"},op:{enum:["equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]}},type:"object"},type:"array"},jsonAfter:{description:"JSONAfter is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.\n\nJSONAfter is a JSON encoded string due to limitations of Swaggo (ie. []interface{} generates []map[stirng]interface{}).",type:"string"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},randomize:{description:"Randomize indicates that the results should be randomized instead of ordered by the `field` and `desc` criteria",type:"boolean"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"Get Users Request"}}),"\n",(0,r.jsx)(u(),{id:void 0,label:void 0,responses:{200:{description:"List of users retrieved successfully",content:{"application/json":{schema:{properties:{after:{type:"string"},count:{type:"integer"},users:{items:{properties:{contacts:{description:"Contacts are used for login and identification purposes.",items:{properties:{createdAt:{type:"string"},deletedAt:{type:"string"},id:{description:'The unique identifier, which can be a URL.\n\nExample values: "joe12" (openorch username), "twitter.com/thejoe" (twitter url), "joe@joesdomain.com" (email)',example:"twitter.com/thejoe",type:"string"},isPrimary:{description:"If this is the primary contact method",type:"boolean"},platform:{description:'Platform of the contact (e.g., "email", "phone", "twitter")',example:"twitter",type:"string"},updatedAt:{type:"string"},userId:{type:"string"},value:{description:'Value is the platform local unique identifier.\nIe. while the `id` of a Twitter contact is `twitter.com/thejoe`, the value will be only `thejoe`.\nFor email and phones the `id` and the `value` will be the same.\nThis field mostly exists for display purposes.\n\nExample values: "joe12" (openorch username), "thejoe" (twitter username), "joe@joesdomain.com" (email)',example:"thejoe",type:"string"},verified:{description:"Whether the contact is verified",type:"boolean"}},type:"object"},type:"array"},createdAt:{type:"string"},deletedAt:{type:"string"},id:{type:"string"},name:{description:"Full name of the organization.",example:"Jane Doe",type:"string"},passwordHash:{type:"string"},slug:{description:"URL-friendly unique (inside the Singularon platform) identifier for the `user`.",example:"jane-doe",type:"string"},updatedAt:{type:"string"}},type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function O(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(w,{...e})}):w(e)}}}]);