"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[4644],{14642:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>b,contentTitle:()=>g,default:()=>j,frontMatter:()=>h,metadata:()=>r,toc:()=>f});const r=JSON.parse('{"id":"openorch/list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","source":"@site/docs/openorch/list-prompts.api.mdx","sourceDirName":"openorch","slug":"/openorch/list-prompts","permalink":"/docs/openorch/list-prompts","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","sidebar_label":"List Prompts","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/openorch/openorch","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Prompt an AI","permalink":"/docs/openorch/prompt"},"next":{"title":"Subscribe to Prompt Responses by Thread","permalink":"/docs/openorch/subscribe-to-prompt-responses"}}');var s=i(74848),n=i(28453),o=i(53746),p=i.n(o),a=i(56518),d=i.n(a),m=i(99972),c=i.n(m),l=i(25342),u=i.n(l),y=(i(44215),i(82223),i(24861));const h={id:"list-prompts",title:"List Prompts",description:"List prompts that satisfy a query.",sidebar_label:"List Prompts",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/openorch/openorch",custom_edit_url:null},g=void 0,b={},f=[];function w(e){const t={p:"p",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(y.default,{as:"h1",className:"openapi__heading",children:"List Prompts"}),"\n",(0,s.jsx)(p(),{method:"post",path:"/prompt-svc/prompts",context:"endpoint"}),"\n",(0,s.jsx)(t.p,{children:"List prompts that satisfy a query."}),"\n",(0,s.jsx)(y.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,s.jsx)(d(),{parameters:void 0}),"\n",(0,s.jsx)(c(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},jsonValues:{description:"JSONValues is a JSON marshalled array of values.\nIt's JSON marhalled due to the limitations of the\nSwaggo -> OpenAPI 2.0 -> OpenAPI Go generator toolchain.",type:"string"},op:{enum:["equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]}},type:"object"},type:"array"},jsonAfter:{description:"JSONAfter is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.\n\nJSONAfter is a JSON-encoded string due to limitations in Swaggo (e.g., []interface{} gets converted to []map[string]interface{}).\nThere is no way to specify a type that results in an any/interface{} type in the `go -> openapi -> go` generation process.\nAs a result, JSONAfter is a JSON-marshalled string representing an array, e.g., `[42]`.",type:"string"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},randomize:{description:"Randomize indicates that the results should be randomized instead of ordered by the `field` and `desc` criteria",type:"boolean"},sortingType:{allOf:[{enum:["","numeric","text","date"],type:"string","x-enum-varnames":["SortingTypeDefault","SortingTypeNumeric","SortingTypeText","SortingTypeDate"]}],description:"Defines the type of sorting to apply (numeric, text, date, etc.)"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"List Prompts Request"}}),"\n",(0,s.jsx)(u(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{after:{},count:{type:"integer"},prompts:{items:{properties:{createdAt:{description:"CreatedAt is the time of the prompt creation.",type:"string"},engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters"},error:{description:"Error that arose during prompt execution, if any.",type:"string"},id:{description:"Id is the unique ID of the prompt.",type:"string"},lastRun:{description:"LastRun is the time of the last prompt run.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the OpenOrch internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},requestMessageId:{type:"string"},responseMessageId:{type:"string"},runCount:{description:"RunCount is the number of times the prompt was retried due to errors",type:"integer"},status:{allOf:[{enum:["scheduled","running","completed","errored","abandoned","canceled"],type:"string","x-enum-varnames":["PromptStatusScheduled","PromptStatusRunning","PromptStatusCompleted","PromptStatusErrored","PromptStatusAbandoned","PromptStatusCanceled"]}],description:"Status of the prompt."},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"},type:{allOf:[{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]}],description:'Type is inferred from the `Parameters` or `EngineParameters` field.\nEg. A LLamaCpp prompt will be "Text-to-Text",\na Stabel Diffusion one will be "Text-to-Image" etc.'},updatedAt:{description:"UpdatedAt is the last time the prompt was updated.",type:"string"},userId:{description:"UserId contains the ID of the user who submitted the prompt.",type:"string"}},required:["prompt"],type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function j(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(w,{...e})}):w(e)}}}]);