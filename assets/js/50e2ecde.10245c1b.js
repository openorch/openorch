"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[4644],{14642:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>f,contentTitle:()=>g,default:()=>T,frontMatter:()=>y,metadata:()=>r,toc:()=>b});const r=JSON.parse('{"id":"openorch/list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","source":"@site/docs/openorch/list-prompts.api.mdx","sourceDirName":"openorch","slug":"/openorch/list-prompts","permalink":"/docs/openorch/list-prompts","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","sidebar_label":"List Prompts","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/openorch/openorch","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Prompt an AI","permalink":"/docs/openorch/prompt"},"next":{"title":"Subscribe to Prompt Responses by Thread","permalink":"/docs/openorch/subscribe-to-prompt-responses"}}');var n=i(74848),s=i(28453),o=i(53746),p=i.n(o),a=i(56518),c=i.n(a),d=i(99972),m=i.n(d),l=i(25342),u=i.n(l),h=(i(44215),i(82223),i(24861));const y={id:"list-prompts",title:"List Prompts",description:"List prompts that satisfy a query.",sidebar_label:"List Prompts",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/openorch/openorch",custom_edit_url:null},g=void 0,f={},b=[];function v(e){const t={p:"p",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(h.default,{as:"h1",className:"openapi__heading",children:"List Prompts"}),"\n",(0,n.jsx)(p(),{method:"post",path:"/prompt-svc/prompts",context:"endpoint"}),"\n",(0,n.jsx)(t.p,{children:"List prompts that satisfy a query."}),"\n",(0,n.jsx)(h.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,n.jsx)(c(),{parameters:void 0}),"\n",(0,n.jsx)(m(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},jsonValues:{description:"JSONValues is a JSON marshalled array of values.\nIt's JSON marhalled due to the limitations of the\nSwaggo -> OpenAPI 2.0 -> OpenAPI Go generator toolchain.",type:"string"},op:{enum:["equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]}},type:"object"},type:"array"},jsonAfter:{description:"JSONAfter is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.\n\nJSONAfter is a JSON-encoded string due to limitations in Swaggo (e.g., []interface{} gets converted to []map[string]interface{}).\nThere is no way to specify a type that results in an any/interface{} type in the `go -> openapi -> go` generation process.\nAs a result, JSONAfter is a JSON-marshalled string representing an array, e.g., `[42]`.",type:"string"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},randomize:{description:"Randomize indicates that the results should be randomized instead of ordered by the `field` and `desc` criteria",type:"boolean"},sortingType:{allOf:[{enum:["","numeric","text","date"],type:"string","x-enum-varnames":["SortingTypeDefault","SortingTypeNumeric","SortingTypeText","SortingTypeDate"]}],description:"Defines the type of sorting to apply (numeric, text, date, etc.)"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"List Prompts Request"}}),"\n",(0,n.jsx)(u(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{after:{},count:{type:"integer"},prompts:{items:{properties:{createdAt:{description:"CreatedAt is the time of the prompt creation.",type:"string"},engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters"},error:{description:"Error that arose during prompt execution, if any.",type:"string"},id:{description:"Id is the unique ID of the prompt.",type:"string"},lastRun:{description:"LastRun is the time of the last prompt run.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the OpenOrch internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},requestMessageId:{type:"string"},responseMessageId:{type:"string"},runCount:{description:"RunCount is the number of times the prompt was retried due to errors",type:"integer"},status:{allOf:[{enum:["scheduled","running","completed","errored","abandoned","canceled"],type:"string","x-enum-varnames":["PromptStatusScheduled","PromptStatusRunning","PromptStatusCompleted","PromptStatusErrored","PromptStatusAbandoned","PromptStatusCanceled"]}],description:"Status of the prompt."},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"},type:{allOf:[{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]}],description:'Type is inferred from the `Parameters` or `EngineParameters` field.\nEg. A LLamaCpp prompt will be "Text-to-Text",\na Stabel Diffusion one will be "Text-to-Image" etc.'},updatedAt:{description:"UpdatedAt is the last time the prompt was updated.",type:"string"},userId:{description:"UserId contains the ID of the user who submitted the prompt.",type:"string"}},required:["prompt"],type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function T(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(v,{...e})}):v(e)}}}]);