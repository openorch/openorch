"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[4644],{14642:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>f,contentTitle:()=>y,default:()=>w,frontMatter:()=>h,metadata:()=>r,toc:()=>T});const r=JSON.parse('{"id":"openorch/list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","source":"@site/docs/openorch/list-prompts.api.mdx","sourceDirName":"openorch","slug":"/openorch/list-prompts","permalink":"/docs/openorch/list-prompts","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","sidebar_label":"List Prompts","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/openorch/openorch","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Prompt an AI","permalink":"/docs/openorch/prompt"},"next":{"title":"Subscribe to Prompt Responses by Thread","permalink":"/docs/openorch/subscribe-to-prompt-responses"}}');var s=i(74848),o=i(28453),n=i(53746),p=i.n(n),a=i(56518),d=i.n(a),c=i(99972),m=i.n(c),g=i(25342),u=i.n(g),l=(i(44215),i(82223),i(24861));const h={id:"list-prompts",title:"List Prompts",description:"List prompts that satisfy a query.",sidebar_label:"List Prompts",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/openorch/openorch",custom_edit_url:null},y=void 0,f={},T=[];function b(e){const t={p:"p",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(l.default,{as:"h1",className:"openapi__heading",children:"List Prompts"}),"\n",(0,s.jsx)(p(),{method:"post",path:"/prompt-svc/prompts",context:"endpoint"}),"\n",(0,s.jsx)(t.p,{children:"List prompts that satisfy a query."}),"\n",(0,s.jsx)(l.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,s.jsx)(d(),{parameters:void 0}),"\n",(0,s.jsx)(m(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},jsonValues:{description:"JSONValues is a JSON marshalled array of values.\nIt's JSON marhalled due to the limitations of the\nSwaggo -> OpenAPI 2.0 -> OpenAPI Go generator toolchain.",type:"string"},op:{enum:["equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]}},type:"object"},type:"array"},jsonAfter:{description:"JSONAfter is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.\n\nJSONAfter is a JSON encoded string due to limitations of Swaggo (ie. []interface{} generates []map[stirng]interface{}).",type:"string"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},randomize:{description:"Randomize indicates that the results should be randomized instead of ordered by the `field` and `desc` criteria",type:"boolean"},sortingType:{allOf:[{enum:["","numeric","text","date"],type:"string","x-enum-varnames":["SortingTypeDefault","SortingTypeNumeric","SortingTypeText","SortingTypeDate"]}],description:"Defines the type of sorting to apply (numeric, text, date, etc.)"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"List Prompts Request"}}),"\n",(0,s.jsx)(u(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{after:{},count:{type:"integer"},prompts:{items:{properties:{createdAt:{description:"CreatedAt is the time of the prompt creation.",type:"string"},engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters"},error:{description:"Error that arose during prompt execution, if any.",type:"string"},id:{description:"Id is the unique ID of the prompt.",type:"string"},lastRun:{description:"LastRun is the time of the last prompt run.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the OpenOrch internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},requestMessageId:{type:"string"},responseMessageId:{type:"string"},runCount:{description:"RunCount is the number of times the prompt was retried due to errors",type:"integer"},status:{allOf:[{enum:["scheduled","running","completed","errored","abandoned","canceled"],type:"string","x-enum-varnames":["PromptStatusScheduled","PromptStatusRunning","PromptStatusCompleted","PromptStatusErrored","PromptStatusAbandoned","PromptStatusCanceled"]}],description:"Status of the prompt."},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"},type:{allOf:[{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]}],description:'Type is inferred from the `Parameters` or `EngineParameters` field.\nEg. A LLamaCpp prompt will be "Text-to-Text",\na Stabel Diffusion one will be "Text-to-Image" etc.'},updatedAt:{description:"UpdatedAt is the last time the prompt was updated.",type:"string"},userId:{description:"UserId contains the ID of the user who submitted the prompt.",type:"string"}},required:["prompt"],type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function w(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(b,{...e})}):b(e)}}}]);