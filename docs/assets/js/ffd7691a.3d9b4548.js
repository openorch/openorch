"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[8797],{61470:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var t=s(74848),r=s(28453);const i={sidebar_position:3,tags:["test"]},a="Backend Environment Variables",o={id:"start/backend-environment-variables",title:"Backend Environment Variables",description:"SINGULATRONGPUPLATFORM",source:"@site/docs/start/backend-environment-variables.md",sourceDirName:"start",slug:"/start/backend-environment-variables",permalink:"/docs/start/backend-environment-variables",draft:!1,unlisted:!1,editUrl:"https://github.com/singulatron/singulatron/tree/main/docs-source/docs/docs/start/backend-environment-variables.md",tags:[{inline:!0,label:"test",permalink:"/docs/tags/test"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,tags:["test"]},sidebar:"tutorialSidebar",previous:{title:"Frontend Environment Variables",permalink:"/docs/start/frontend-environment-variables"},next:{title:"Once it's running",permalink:"/docs/start/using"}},l={},d=[{value:"<code>SINGULATRON_GPU_PLATFORM</code>",id:"singulatron_gpu_platform",level:2},{value:"<code>SINGULATRON_HOST_FOLDER</code>",id:"singulatron_host_folder",level:2},{value:"<code>SINGULATRON_LLM_HOST</code>",id:"singulatron_llm_host",level:2},{value:"<code>SINGULATRON_DB</code>",id:"singulatron_db",level:2},{value:"PostgreSQL",id:"postgresql",level:3},{value:"<code>SINGULARON_LOCAL_STORAGE_PATH</code>",id:"singularon_local_storage_path",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"backend-environment-variables",children:"Backend Environment Variables"}),"\n",(0,t.jsx)(n.h2,{id:"singulatron_gpu_platform",children:(0,t.jsx)(n.code,{children:"SINGULATRON_GPU_PLATFORM"})}),"\n",(0,t.jsx)(n.p,{children:"This envar is used to enabel GPU acceleration.\nSupported platforms:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cuda"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Do not set this if your card doesn't support the given architecture or things will break."}),"\n",(0,t.jsx)(n.h2,{id:"singulatron_host_folder",children:(0,t.jsx)(n.code,{children:"SINGULATRON_HOST_FOLDER"})}),"\n",(0,t.jsx)(n.p,{children:"This envar is needed when Singulatron runs as a container next to containers it starts:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"Host\n |\n |-> Singulatron Container\n |-> Container Launched By Singulatron\n"})}),"\n",(0,t.jsx)(n.p,{children:"To be able persist data, a host folder must be mounted by all containers."}),"\n",(0,t.jsxs)(n.p,{children:["In our example (",(0,t.jsx)(n.code,{children:"SINGULATRON_HOST_FOLDER=/var/lib/docker/volumes/singulatron-data/_data"}),") we basically pass down the full path of the ",(0,t.jsx)(n.code,{children:"singulatron-data"})," volume we created in the docker compose file to the containers created by Singulatron."]}),"\n",(0,t.jsx)(n.p,{children:"So cycle goes like this:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Singulatron container writes to ",(0,t.jsx)(n.code,{children:"/root/.singulatron"}),", which is mounted on host at ",(0,t.jsx)(n.code,{children:"/var/lib/docker/volumes/singulatron-data/_data"})]}),"\n",(0,t.jsxs)(n.li,{children:["Assets (which are basically downloaded files) will be passed to containers created by Singulatron by mounting files in ",(0,t.jsx)(n.code,{children:"/var/lib/docker/volumes/singulatron-data/_data"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"singulatron_llm_host",children:(0,t.jsx)(n.code,{children:"SINGULATRON_LLM_HOST"})}),"\n",(0,t.jsx)(n.p,{children:"When Singulatron is running in a container, it needs to know how to address its siblings (other containers it started):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"Host\n |\n |-> Singulatron Container\n |-> Container Launched By Singulatron\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Singulatron Container"})," uses the envar ",(0,t.jsx)(n.code,{children:"SINGULATRON_LLM_HOST"})," to address ",(0,t.jsx)(n.code,{children:"Container Launched By Singulatron"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Typically this value should be ",(0,t.jsx)(n.code,{children:"172.17.0.1"})," if you are using the default docker network."]}),"\n",(0,t.jsxs)(n.p,{children:["If you are using an other network than default, use ",(0,t.jsx)(n.code,{children:"docker network inspect"})," to find out the IP of your docker bridge for that network.\nUsually it's going to be ",(0,t.jsx)(n.code,{children:"172.18.0.1"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"This envar is not needed if Singulatron runs directly on the host:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"Host With Singulatron\n |\n |-> Container Launched By Singulatron\n"})}),"\n",(0,t.jsx)(n.h2,{id:"singulatron_db",children:(0,t.jsx)(n.code,{children:"SINGULATRON_DB"})}),"\n",(0,t.jsx)(n.p,{children:"You can use this envar to make Singulatron actually use a database instead of local file storage to store data."}),"\n",(0,t.jsx)(n.h3,{id:"postgresql",children:"PostgreSQL"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'SINGULATRON_DB=postgres\nSINGULATRON_DB_SQL_CONNECTION_STRING="postgres://postgres:mysecretpassword@localhost:5432/mydatabase?sslmode=disable"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Naturally, you should change the details of the connection string to reflect your environment."}),"\n",(0,t.jsx)(n.h2,{id:"singularon_local_storage_path",children:(0,t.jsx)(n.code,{children:"SINGULARON_LOCAL_STORAGE_PATH"})}),"\n",(0,t.jsxs)(n.p,{children:["By default the local file storage will place files into ",(0,t.jsx)(n.code,{children:"~/.singulatron/data"}),", but this flag (and other config options) can override that."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);