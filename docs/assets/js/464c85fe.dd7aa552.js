"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[8036],{817996:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var r=t(474848),s=t(28453);const i={sidebar_position:3,tags:["test"]},o="Your first service",l={id:"writing-custom-services/your-own-services",title:"Your first service",description:"Below is an example Go service that does the following things:",source:"@site/docs/writing-custom-services/your-own-services.md",sourceDirName:"writing-custom-services",slug:"/writing-custom-services/your-own-services",permalink:"/docs/writing-custom-services/your-own-services",draft:!1,unlisted:!1,editUrl:"https://github.com/openorch/openorch/tree/main/docs-source/docs/writing-custom-services/your-own-services.md",tags:[{inline:!0,label:"test",permalink:"/docs/tags/test"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,tags:["test"]},sidebar:"tutorialSidebar",previous:{title:"Writing Custom Services",permalink:"/docs/category/writing-custom-services"},next:{title:"Built-in Services",permalink:"/docs/category/built-in-services"}},c={},a=[{value:"Things to understand",id:"things-to-understand",level:2},{value:"Instance registration",id:"instance-registration",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"your-first-service",children:"Your first service"}),"\n",(0,r.jsx)(n.p,{children:"Below is an example Go service that does the following things:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Registers a user for itself with the slug ",(0,r.jsx)(n.code,{children:"skeleton-svc"})]}),"\n",(0,r.jsxs)(n.li,{children:["Registers/updates its own URL in the ",(0,r.jsx)(n.a,{href:"/docs/built-in-services/registry-svc",children:"Registry"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n"context"\n"fmt"\n"log"\n"net/http"\n"os"\n\n    "github.com/pkg/errors"\n    openapi "github.com/openorch/openorch/clients/go"\n    sdk "github.com/openorch/openorch/sdk/go"\n\n)\n\nfunc main() {\nskeletonService, err := NewService()\nif err != nil {\nlog.Fatalf("Failed to initialize skeleton service: %v", err)\n}\n\n    router := http.NewServeMux()\n\n    router.HandleFunc("/skeleton-svc/hello", func(w http.ResponseWriter, r *http.Request) {\n    \tskeletonService.Hello(w, r)\n    })\n\n    log.Println("Server started on :9311")\n    log.Fatal(http.ListenAndServe(":9311", router))\n\n}\n\ntype SkeletonService struct {\ntoken string\n}\n\nfunc NewService() (\\*SkeletonService, error) {\nspUrl := os.Getenv("SUPERPLATFORM_URL")\nif spUrl == "" {\nreturn nil, errors.New("SUPERPLATFORM_URL cannot be found")\n}\n\n    selfUrl := os.Getenv("SELF_URL")\n\n    dsf, err := sdk.NewDatastoreFactory("")\n    if err != nil {\n    \treturn nil, errors.Wrap(err, "cannot create datastore factory")\n    }\n\n    credentialStore, err := dsf("skeletonSvcCredentials", &sdk.Credential{})\n    if err != nil {\n    \treturn nil, errors.Wrap(err, "cannot create credential store")\n    }\n\n    client := sdk.NewApiClientFactory(spUrl).Client()\n    token, err := sdk.RegisterService(\n    \tclient.UserSvcAPI,\n    \t"skeleton-svc",\n    \t"Skeleton Service",\n    \tcredentialStore,\n    )\n    if err != nil {\n    \treturn nil, errors.Wrap(err, "cannot register service")\n    }\n\n    client = sdk.NewApiClientFactory(spUrl).Client(sdk.WithToken(token))\n    _, _, err = client.RegistrySvcAPI.RegisterInstance(context.Background()).Body(openapi.RegistrySvcRegisterInstanceRequest{\n    \tUrl: selfUrl,\n    }).Execute()\n    if err != nil {\n    \treturn nil, errors.Wrap(err, "cannot register instance")\n    }\n\n    repo := &SkeletonService{\n    \ttoken: token,\n    }\n\n    return repo, nil\n\n}\n\nfunc (skeleton *SkeletonService) Hello(w http.ResponseWriter, r *http.Request) {\nfmt.Fprintf(w, `{"hello": "world"}`)\n}\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"Just make sure you run it with the appropriate envars:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"SUPERPLATFORM_URL=http://127.0.0.1:58231 SELF_URL=http://127.0.0.1:9311 go run main.go\n"})}),"\n",(0,r.jsx)(n.p,{children:"Once it's running you will be able to call the Superplatform daemon proxy and that will proxy to your skeleton service:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'$ curl 127.0.0.1:58231/skeleton-svc/hello\n{"hello": "world"}\n'})}),"\n",(0,r.jsx)(n.p,{children:"This is obviously so you don't have to expose your skeleton service to the outside world, only your Superplatform."}),"\n",(0,r.jsx)(n.h2,{id:"things-to-understand",children:"Things to understand"}),"\n",(0,r.jsx)(n.h3,{id:"instance-registration",children:"Instance registration"}),"\n",(0,r.jsxs)(n.p,{children:["Like most other things on the platform, service instances become owned by a slug. When the skeleton service calls RegisterInstance, the host will be associated with the ",(0,r.jsx)(n.code,{children:"skeleton-svc"})," slug."]}),"\n",(0,r.jsx)(n.p,{children:"Updates to this host won't be possible unless the caller is the skeleton service. The service becomes the owner of that host."}),"\n",(0,r.jsx)(n.p,{children:"This is the same ownership model like in other parts of the system."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);