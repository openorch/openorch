"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[8036],{817996:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var r=n(474848),s=n(28453);const i={sidebar_position:3,tags:["test"]},o="Your first service",l={id:"writing-custom-services/your-own-services",title:"Your first service",description:"Below is an example Go service that does the following things:",source:"@site/docs/writing-custom-services/your-own-services.md",sourceDirName:"writing-custom-services",slug:"/writing-custom-services/your-own-services",permalink:"/docs/writing-custom-services/your-own-services",draft:!1,unlisted:!1,editUrl:"https://github.com/openorch/openorch/tree/main/docs-source/docs/writing-custom-services/your-own-services.md",tags:[{inline:!0,label:"test",permalink:"/docs/tags/test"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,tags:["test"]},sidebar:"tutorialSidebar",previous:{title:"Writing Custom Services",permalink:"/docs/category/writing-custom-services"},next:{title:"Built-in Services",permalink:"/docs/category/built-in-services"}},c={},a=[{value:"Things to understand",id:"things-to-understand",level:2},{value:"Instance registration",id:"instance-registration",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"your-first-service",children:"Your first service"}),"\n",(0,r.jsx)(t.p,{children:"Below is an example Go service that does the following things:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Registers a user for itself with the slug ",(0,r.jsx)(t.code,{children:"skeleton-svc"})]}),"\n",(0,r.jsxs)(t.li,{children:["Registers/updates its own URL in the ",(0,r.jsx)(t.a,{href:"/docs/built-in-services/registry-svc",children:"Registry"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n\t"context"\n\t"fmt"\n\t"log"\n\t"net/http"\n\t"os"\n\n\topenapi "github.com/openorch/openorch/clients/go"\n\tsdk "github.com/openorch/openorch/sdk/go"\n\t"github.com/pkg/errors"\n)\n\nfunc main() {\n\tskeletonService, err := NewService()\n\tif err != nil {\n\t\tlog.Fatalf("Failed to initialize skeleton service: %v", err)\n\t}\n\n\trouter := http.NewServeMux()\n\n\trouter.HandleFunc("/skeleton-svc/hello", func(w http.ResponseWriter, r *http.Request) {\n\t\tskeletonService.Hello(w, r)\n\t})\n\n\tlog.Println("Server started on :9311")\n\tlog.Fatal(http.ListenAndServe(":9311", router))\n\n}\n\ntype SkeletonService struct {\n\ttoken string\n}\n\nfunc NewService() (*SkeletonService, error) {\n\tspUrl := os.Getenv("OPENORCH_URL")\n\tif spUrl == "" {\n\t\treturn nil, errors.New("OPENORCH_URL cannot be found")\n\t}\n\n\tselfUrl := os.Getenv("SELF_URL")\n\n\tdsf, err := sdk.NewDatastoreFactory("")\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, "cannot create datastore factory")\n\t}\n\n\tcredentialStore, err := dsf("skeletonSvcCredentials", &sdk.Credential{})\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, "cannot create credential store")\n\t}\n\n\tclient := sdk.NewApiClientFactory(spUrl).Client()\n\ttoken, err := sdk.RegisterService(\n\t\tclient.UserSvcAPI,\n\t\t"skeleton-svc",\n\t\t"Skeleton Svc",\n\t\tcredentialStore,\n\t)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, "cannot register service")\n\t}\n\n\tclient = sdk.NewApiClientFactory(spUrl).Client(sdk.WithToken(token))\n\t_, _, err = client.RegistrySvcAPI.RegisterInstance(context.Background()).Body(openapi.RegistrySvcRegisterInstanceRequest{\n\t\tUrl: selfUrl,\n\t}).Execute()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, "cannot register instance")\n\t}\n\n\trepo := &SkeletonService{\n\t\ttoken: token,\n\t}\n\n\treturn repo, nil\n\n}\n\nfunc (skeleton *SkeletonService) Hello(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, `{"hello": "world"}`)\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Just make sure you run it with the appropriate envars:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:"OPENORCH_URL=http://127.0.0.1:58231 SELF_URL=http://127.0.0.1:9311 go run main.go\n"})}),"\n",(0,r.jsx)(t.p,{children:"Once it's running you will be able to call the Superplatform daemon proxy and that will proxy to your skeleton service:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:'$ curl 127.0.0.1:58231/skeleton-svc/hello\n{"hello": "world"}\n'})}),"\n",(0,r.jsx)(t.p,{children:"This is obviously so you don't have to expose your skeleton service to the outside world, only your Superplatform."}),"\n",(0,r.jsx)(t.h2,{id:"things-to-understand",children:"Things to understand"}),"\n",(0,r.jsx)(t.h3,{id:"instance-registration",children:"Instance registration"}),"\n",(0,r.jsxs)(t.p,{children:["Like most other things on the platform, service instances become owned by a slug. When the skeleton service calls RegisterInstance, the host will be associated with the ",(0,r.jsx)(t.code,{children:"skeleton-svc"})," slug."]}),"\n",(0,r.jsx)(t.p,{children:"Updates to this host won't be possible unless the caller is the skeleton service. The service becomes the owner of that host."}),"\n",(0,r.jsx)(t.p,{children:"This is the same ownership model like in other parts of the system."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);