// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "https://singulatron.com/home",
            "email": "sales@singulatron.com"
        },
        "license": {
            "name": "AGPL v3.0",
            "url": "https://www.gnu.org/licenses/agpl-3.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/chat/message/add": {
            "post": {
                "description": "Add a new message to a specific chat thread",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Add Message",
                "parameters": [
                    {
                        "description": "Add Message Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chattypes.AddMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message successfully added",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat/message/delete": {
            "post": {
                "description": "Delete a specific message from a chat thread by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Delete Message",
                "parameters": [
                    {
                        "description": "Delete Message Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chattypes.DeleteMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message successfully deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat/messages": {
            "post": {
                "description": "Fetch messages (and associated assets) for a specific chat thread.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Get Messages",
                "parameters": [
                    {
                        "description": "Get Messages Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chattypes.GetMessagesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Messages and assets successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/chattypes.GetMessagesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat/thread": {
            "post": {
                "description": "Fetch information about a specific chat thread by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Get Thread",
                "parameters": [
                    {
                        "description": "Get Thread Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chattypes.GetThreadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread details successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/chattypes.GetThreadResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat/thread/add": {
            "post": {
                "description": "Create a new chat thread and add the requesting user to it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Add Thread",
                "parameters": [
                    {
                        "description": "Add Thread Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chattypes.AddThreadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread successfully created",
                        "schema": {
                            "$ref": "#/definitions/chattypes.AddThreadResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat/thread/delete": {
            "post": {
                "description": "Delete a specific chat thread by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Delete Thread",
                "parameters": [
                    {
                        "description": "Delete Thread Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chattypes.DeleteThreadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread successfully deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat/thread/update": {
            "post": {
                "description": "Modify the details of a specific chat thread",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Update Thread",
                "parameters": [
                    {
                        "description": "Update Thread Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chattypes.UpdateThreadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread successfully updated",
                        "schema": {
                            "$ref": "#/definitions/chattypes.AddThreadResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat/threads": {
            "post": {
                "description": "Fetch all chat threads associated with a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Get Threads",
                "parameters": [
                    {
                        "description": "Get Threads Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chattypes.GetThreadsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Threads successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/chattypes.GetThreadsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/config/get": {
            "post": {
                "description": "Fetch the current configuration from the server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Get",
                "responses": {
                    "200": {
                        "description": "Current configuration retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/configtypes.ConfigGetResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/download/do": {
            "post": {
                "description": "Start a download for a specified URL and folder path",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "download"
                ],
                "summary": "Do",
                "parameters": [
                    {
                        "description": "Download Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/downloadtypes.DownloadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Download initiated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/download/list": {
            "post": {
                "description": "Fetch a list of all download details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "download"
                ],
                "summary": "List",
                "responses": {
                    "200": {
                        "description": "List of downloads",
                        "schema": {
                            "$ref": "#/definitions/downloadtypes.DownloadsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/download/pause": {
            "post": {
                "description": "Pause a download that is currently in progress",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "download"
                ],
                "summary": "Pause",
                "parameters": [
                    {
                        "description": "Download request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/downloadtypes.DownloadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/firehose/subscribe": {
            "get": {
                "description": "Establish a subscription to firehose events and stream them to the client in real-time.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "firehose"
                ],
                "summary": "Subscribe",
                "responses": {
                    "200": {
                        "description": "Event data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/generic/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new object with the provided details. Requires authorization and user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "generic"
                ],
                "summary": "Create a Generic Object",
                "parameters": [
                    {
                        "description": "Create request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/generictypes.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/generictypes.CreateResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/generic/delete": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a generic object from the system based on the provided conditions. Requires authorization and user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "generic"
                ],
                "summary": "Delete a Generic Object",
                "parameters": [
                    {
                        "description": "Delete request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/generictypes.DeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful deletion of object",
                        "schema": {
                            "$ref": "#/definitions/generictypes.DeleteResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/generic/find": {
            "post": {
                "description": "Retrieves objects from a specified table based on search criteria.\nRequires authorization and user authentication.\n\n\nUse helper functions in your respective client library such as condition constructors (` + "`" + `equal` + "`" + `, ` + "`" + `contains` + "`" + `, ` + "`" + `startsWith` + "`" + `) and field selectors (` + "`" + `field` + "`" + `, ` + "`" + `fields` + "`" + `, ` + "`" + `id` + "`" + `) for easier access.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "generic"
                ],
                "summary": "Find Generic Objects",
                "parameters": [
                    {
                        "description": "Find request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/generictypes.FindRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of objects",
                        "schema": {
                            "$ref": "#/definitions/generictypes.FindResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/generic/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates objects in a specified table based on provided conditions. Requires authorization and user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "generic"
                ],
                "summary": "Update Generic Objects",
                "parameters": [
                    {
                        "description": "Update request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/generictypes.UpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful update of objects",
                        "schema": {
                            "$ref": "#/definitions/generictypes.UpdateResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/generic/upsert": {
            "post": {
                "description": "Creates a new generic object or updates an existing one based on the provided data. Requires authorization and user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "generic"
                ],
                "summary": "Upsert a Generic Object",
                "parameters": [
                    {
                        "description": "Upsert request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/generictypes.UpsertRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful creation or update of object",
                        "schema": {
                            "$ref": "#/definitions/generictypes.UpsertResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prompt/add": {
            "post": {
                "description": "Adds a new prompt to the prompt queue and either waits for the response (if ` + "`" + `sync` + "`" + ` is set to true), or returns immediately.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prompts"
                ],
                "summary": "Add Prompt",
                "parameters": [
                    {
                        "description": "Add Prompt Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/prompttypes.AddPromptRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.AddPromptResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prompt/list": {
            "post": {
                "description": "List prompts that satisfy a query.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prompts"
                ],
                "summary": "List Prompts",
                "parameters": [
                    {
                        "description": "List Prompts Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ListPromptsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ListPromptsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prompt/remove": {
            "post": {
                "description": "Remove a prompt by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prompts"
                ],
                "summary": "Remove Prompt",
                "parameters": [
                    {
                        "description": "Remove Prompt Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/prompttypes.RemovePromptRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prompt/subscribe": {
            "get": {
                "description": "Subscribe to prompt responses via Server-Sent Events (SSE)",
                "tags": [
                    "prompts"
                ],
                "summary": "Subscribe to Prompt",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Streaming response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Missing threadId parameter",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "chattypes.AddMessageRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "$ref": "#/definitions/chattypes.Message"
                }
            }
        },
        "chattypes.AddThreadRequest": {
            "type": "object",
            "properties": {
                "thread": {
                    "$ref": "#/definitions/chattypes.Thread"
                }
            }
        },
        "chattypes.AddThreadResponse": {
            "type": "object",
            "properties": {
                "thread": {
                    "$ref": "#/definitions/chattypes.Thread"
                }
            }
        },
        "chattypes.Asset": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Content is the base64 encoded binary file direcly embedded in the asset itself",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "description": "Url of the asset where",
                    "type": "string"
                }
            }
        },
        "chattypes.DeleteMessageRequest": {
            "type": "object",
            "properties": {
                "messageId": {
                    "type": "string"
                }
            }
        },
        "chattypes.DeleteThreadRequest": {
            "type": "object",
            "properties": {
                "threadId": {
                    "type": "string"
                }
            }
        },
        "chattypes.GetMessagesRequest": {
            "type": "object",
            "properties": {
                "threadId": {
                    "type": "string"
                }
            }
        },
        "chattypes.GetMessagesResponse": {
            "type": "object",
            "properties": {
                "assets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chattypes.Asset"
                    }
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chattypes.Message"
                    }
                }
            }
        },
        "chattypes.GetThreadRequest": {
            "type": "object",
            "properties": {
                "threadId": {
                    "type": "string"
                }
            }
        },
        "chattypes.GetThreadResponse": {
            "type": "object",
            "properties": {
                "thread": {
                    "$ref": "#/definitions/chattypes.Thread"
                }
            }
        },
        "chattypes.GetThreadsRequest": {
            "type": "object"
        },
        "chattypes.GetThreadsResponse": {
            "type": "object",
            "properties": {
                "threads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chattypes.Thread"
                    }
                }
            }
        },
        "chattypes.Message": {
            "type": "object",
            "properties": {
                "assetIds": {
                    "description": "AssetIds defines the attachments the message has.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "content": {
                    "description": "Content of the message eg. \"Hi, what's up?\"",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "threadId": {
                    "description": "ThreadId of the message.",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "description": "UserId is the id of the user who wrote the message.\nFor AI messages this field is empty.",
                    "type": "string"
                }
            }
        },
        "chattypes.Thread": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "title": {
                    "description": "Title of the thread.",
                    "type": "string"
                },
                "topicIds": {
                    "description": "TopicIds defines which topics the thread belongs to.\nTopics can roughly be thought of as tags for threads.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "userIds": {
                    "description": "UserIds the ids of the users who can see this thread.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "chattypes.UpdateThreadRequest": {
            "type": "object",
            "properties": {
                "thread": {
                    "$ref": "#/definitions/chattypes.Thread"
                }
            }
        },
        "configtypes.AppServiceConfig": {
            "type": "object",
            "properties": {
                "loggingDisabled": {
                    "type": "boolean"
                }
            }
        },
        "configtypes.Config": {
            "type": "object",
            "properties": {
                "app": {
                    "$ref": "#/definitions/configtypes.AppServiceConfig"
                },
                "download": {
                    "$ref": "#/definitions/configtypes.DownloadServiceConfig"
                },
                "isRuntimeInstalled": {
                    "description": "* This flag drives a minor UX feature:\n\t * if the user has not installed the runtime we show an INSTALL\n\t * button, but if the user has already installed the runtime we show\n\t * we show a START runtime button.\n\t *",
                    "type": "boolean"
                },
                "model": {
                    "$ref": "#/definitions/configtypes.ModelServiceConfig"
                }
            }
        },
        "configtypes.ConfigGetResponse": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/configtypes.Config"
                }
            }
        },
        "configtypes.DownloadServiceConfig": {
            "type": "object",
            "properties": {
                "downloadFolder": {
                    "type": "string"
                }
            }
        },
        "configtypes.ModelServiceConfig": {
            "type": "object",
            "properties": {
                "currentModelId": {
                    "type": "string"
                }
            }
        },
        "datastore.AllCondition": {
            "type": "object"
        },
        "datastore.Condition": {
            "type": "object",
            "properties": {
                "all": {
                    "description": "All condition returns all objects.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/datastore.AllCondition"
                        }
                    ]
                },
                "contains": {
                    "description": "Contains condition returns all objects where the field(s) values contain a particular string.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/datastore.ContainsCondition"
                        }
                    ]
                },
                "equal": {
                    "description": "Equal condition returns objects where value of a field equals (=) to the specified value in the query.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/datastore.EqualCondition"
                        }
                    ]
                },
                "startsWith": {
                    "description": "StartsWith condition returns all objects where the field(s) values start with a particular string.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/datastore.StartsWithCondition"
                        }
                    ]
                }
            }
        },
        "datastore.ContainsCondition": {
            "type": "object",
            "properties": {
                "selector": {
                    "description": "Selector selects one, more or all fields",
                    "allOf": [
                        {
                            "$ref": "#/definitions/datastore.FieldSelector"
                        }
                    ]
                },
                "value": {}
            }
        },
        "datastore.EqualCondition": {
            "type": "object",
            "properties": {
                "selector": {
                    "description": "Selector selects one, more or all fields",
                    "allOf": [
                        {
                            "$ref": "#/definitions/datastore.FieldSelector"
                        }
                    ]
                },
                "value": {}
            }
        },
        "datastore.FieldSelector": {
            "type": "object",
            "properties": {
                "any": {
                    "description": "Any matches any fields in the object",
                    "type": "boolean"
                },
                "field": {
                    "description": "Field matchies a single field",
                    "type": "string"
                },
                "oneOf": {
                    "description": "OneOf matches a number of fields",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "datastore.OrderBy": {
            "type": "object",
            "properties": {
                "desc": {
                    "description": "Desc indicates whether the sorting should be in descending order.",
                    "type": "boolean"
                },
                "field": {
                    "description": "The field by which to order the results",
                    "type": "string"
                },
                "randomize": {
                    "description": "Randomize indicates that the results should be randomized instead of ordered by the ` + "`" + `field` + "`" + ` and ` + "`" + `desc` + "`" + ` criteria",
                    "type": "boolean"
                }
            }
        },
        "datastore.Query": {
            "type": "object",
            "properties": {
                "after": {
                    "description": "After is used for paginations. Instead of offset-based pagination,\nwe support cursor-based pagination because it works better in a scalable,\ndistributed environment.",
                    "type": "array",
                    "items": {}
                },
                "conditions": {
                    "description": "Conditions are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as condition constructors (` + "`" + `all` + "`" + `, ` + "`" + `equal` + "`" + `, ` + "`" + `contains` + "`" + `, ` + "`" + `startsWith` + "`" + `) and field selectors (` + "`" + `field` + "`" + `, ` + "`" + `fields` + "`" + `, ` + "`" + `id` + "`" + `) for easier access.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/datastore.Condition"
                    }
                },
                "count": {
                    "description": "Count true means return the count of the dataset filtered by Conditions\nwithout after or limit.",
                    "type": "boolean"
                },
                "limit": {
                    "description": "Limit the number of records in the result set.",
                    "type": "integer"
                },
                "orderBys": {
                    "description": "OrderBys order the result set.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/datastore.OrderBy"
                    }
                }
            }
        },
        "datastore.StartsWithCondition": {
            "type": "object",
            "properties": {
                "selector": {
                    "description": "Selector selects one, more or all fields",
                    "allOf": [
                        {
                            "$ref": "#/definitions/datastore.FieldSelector"
                        }
                    ]
                },
                "value": {}
            }
        },
        "downloadtypes.DownloadDetails": {
            "type": "object",
            "properties": {
                "cancelled": {
                    "type": "boolean"
                },
                "dir": {
                    "type": "string"
                },
                "downloadedBytes": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "filePath": {
                    "type": "string"
                },
                "fullFileSize": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "paused": {
                    "type": "boolean"
                },
                "progress": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "downloadtypes.DownloadRequest": {
            "type": "object",
            "properties": {
                "folderPath": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "downloadtypes.DownloadsResponse": {
            "type": "object",
            "properties": {
                "downloads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/downloadtypes.DownloadDetails"
                    }
                }
            }
        },
        "generictypes.CreateRequest": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/generictypes.GenericObjectCreateFields"
                }
            }
        },
        "generictypes.CreateResponse": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/generictypes.GenericObject"
                }
            }
        },
        "generictypes.DeleteRequest": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/datastore.Condition"
                    }
                },
                "table": {
                    "type": "string"
                }
            }
        },
        "generictypes.DeleteResponse": {
            "type": "object"
        },
        "generictypes.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "generictypes.FindRequest": {
            "type": "object",
            "properties": {
                "public": {
                    "type": "boolean"
                },
                "query": {
                    "$ref": "#/definitions/datastore.Query"
                },
                "table": {
                    "type": "string"
                }
            }
        },
        "generictypes.FindResponse": {
            "type": "object",
            "properties": {
                "objects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/generictypes.GenericObject"
                    }
                }
            }
        },
        "generictypes.GenericObject": {
            "type": "object",
            "required": [
                "data",
                "table"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "id": {
                    "type": "string"
                },
                "public": {
                    "description": "Public determines if the object is visible to all users.\nWhen it's false the entry is only visible to the user who created it.\nWhen it's true the entry is visible to everyone.",
                    "type": "boolean"
                },
                "table": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "generictypes.GenericObjectCreateFields": {
            "type": "object",
            "required": [
                "data",
                "table"
            ],
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "id": {
                    "type": "string"
                },
                "public": {
                    "description": "Public determines if the object is visible to all users.\nWhen it's false the entry is only visible to the user who created it.\nWhen it's true the entry is visible to everyone.",
                    "type": "boolean"
                },
                "table": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "generictypes.UpdateRequest": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/datastore.Condition"
                    }
                },
                "object": {
                    "$ref": "#/definitions/generictypes.GenericObject"
                },
                "table": {
                    "type": "string"
                }
            }
        },
        "generictypes.UpdateResponse": {
            "type": "object"
        },
        "generictypes.UpsertRequest": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/generictypes.GenericObjectCreateFields"
                }
            }
        },
        "generictypes.UpsertResponse": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/generictypes.GenericObject"
                }
            }
        },
        "prompttypes.AddPromptRequest": {
            "type": "object",
            "required": [
                "prompt"
            ],
            "properties": {
                "id": {
                    "description": "Id is the unique ID of the prompt.",
                    "type": "string"
                },
                "maxRetries": {
                    "description": "MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",
                    "type": "integer",
                    "example": 10
                },
                "modelId": {
                    "description": "ModelId is just the Singulatron internal ID of the model.",
                    "type": "string",
                    "example": "huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf"
                },
                "prompt": {
                    "description": "Prompt is the message itself eg. \"What's a banana?",
                    "type": "string",
                    "example": "What's a banana?"
                },
                "sync": {
                    "description": "Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",
                    "type": "boolean"
                },
                "template": {
                    "description": "Template of the prompt. Optional. If not present it's derived from ModelId.",
                    "type": "string",
                    "example": "[INST]{prompt}[/INST]"
                },
                "threadId": {
                    "description": "ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set ` + "`" + `prompt.sync` + "`" + ` to true for a blocking answer.",
                    "type": "string"
                }
            }
        },
        "prompttypes.AddPromptResponse": {
            "type": "object",
            "properties": {
                "answer": {
                    "type": "string"
                },
                "prompt": {
                    "$ref": "#/definitions/prompttypes.Prompt"
                }
            }
        },
        "prompttypes.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "prompttypes.ListPromptsRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "$ref": "#/definitions/datastore.Query"
                }
            }
        },
        "prompttypes.ListPromptsResponse": {
            "type": "object",
            "properties": {
                "after": {},
                "count": {
                    "type": "integer"
                },
                "prompts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/prompttypes.Prompt"
                    }
                }
            }
        },
        "prompttypes.Prompt": {
            "type": "object",
            "required": [
                "prompt"
            ],
            "properties": {
                "createdAt": {
                    "description": "CreatedAt is the time of the prompt creation.",
                    "type": "string"
                },
                "error": {
                    "description": "Error that arose during prompt execution, if any.",
                    "type": "string"
                },
                "id": {
                    "description": "Id is the unique ID of the prompt.",
                    "type": "string"
                },
                "lastRun": {
                    "description": "LastRun is the time of the last prompt run.",
                    "type": "string"
                },
                "maxRetries": {
                    "description": "MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",
                    "type": "integer",
                    "example": 10
                },
                "modelId": {
                    "description": "ModelId is just the Singulatron internal ID of the model.",
                    "type": "string",
                    "example": "huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf"
                },
                "prompt": {
                    "description": "Prompt is the message itself eg. \"What's a banana?",
                    "type": "string",
                    "example": "What's a banana?"
                },
                "runCount": {
                    "description": "RunCount is the number of times the prompt was retried due to errors",
                    "type": "integer"
                },
                "status": {
                    "description": "Status of the prompt.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/prompttypes.PromptStatus"
                        }
                    ]
                },
                "sync": {
                    "description": "Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",
                    "type": "boolean"
                },
                "template": {
                    "description": "Template of the prompt. Optional. If not present it's derived from ModelId.",
                    "type": "string",
                    "example": "[INST]{prompt}[/INST]"
                },
                "threadId": {
                    "description": "ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set ` + "`" + `prompt.sync` + "`" + ` to true for a blocking answer.",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "UpdatedAt is the last time the prompt was updated.",
                    "type": "string"
                },
                "userId": {
                    "description": "UserId contains the ID of the user who submitted the prompt.",
                    "type": "string"
                }
            }
        },
        "prompttypes.PromptStatus": {
            "type": "string",
            "enum": [
                "scheduled",
                "running",
                "completed",
                "errored",
                "abandoned",
                "canceled"
            ],
            "x-enum-varnames": [
                "PromptStatusScheduled",
                "PromptStatusRunning",
                "PromptStatusCompleted",
                "PromptStatusErrored",
                "PromptStatusAbandoned",
                "PromptStatusCanceled"
            ]
        },
        "prompttypes.RemovePromptRequest": {
            "type": "object",
            "properties": {
                "promptId": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "Singulatron API",
        "url": "https://superplatform.ai/docs/category/singulatron-api"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.2",
	Host:             "localhost:58231",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Singulatron",
	Description:      "Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
