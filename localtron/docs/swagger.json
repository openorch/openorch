{
    "swagger": "2.0",
    "info": {
        "description": "Run and develop self-hosted AI apps. Your programmable in-house GPT. The Firebase for the AI age.",
        "title": "Singulatron",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://superplatform.ai/",
            "email": "sales@singulatron.com"
        },
        "license": {
            "name": "AGPL v3.0",
            "url": "https://www.gnu.org/licenses/agpl-3.0.html"
        },
        "version": "0.2"
    },
    "host": "localhost:58231",
    "basePath": "/",
    "paths": {
        "/chat-service/message/{messageId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a specific message from a chat thread by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Service"
                ],
                "summary": "Delete Message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message successfully deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat-service/thread": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new chat thread and add the requesting user to it.\nRequires the `thread.create` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Service"
                ],
                "summary": "Add Thread",
                "parameters": [
                    {
                        "description": "Add Thread Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chattypes.AddThreadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread successfully created",
                        "schema": {
                            "$ref": "#/definitions/chattypes.AddThreadResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat-service/thread/{threadId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch information about a specific chat thread by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Service"
                ],
                "summary": "Get Thread",
                "responses": {
                    "200": {
                        "description": "Thread details successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/chattypes.GetThreadResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Modify the details of a specific chat thread",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Service"
                ],
                "summary": "Update Thread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Thread Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chattypes.UpdateThreadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread successfully updated",
                        "schema": {
                            "$ref": "#/definitions/chattypes.AddThreadResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a specific chat thread by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Service"
                ],
                "summary": "Delete Thread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread successfully deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat-service/thread/{threadId}/message": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new message to a specific thread.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Service"
                ],
                "summary": "Add Message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Add Message Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chattypes.AddMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message successfully added",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat-service/thread/{threadId}/messages": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch messages (and associated assets) for a specific chat thread.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Service"
                ],
                "summary": "Get Messages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Messages and assets successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/chattypes.GetMessagesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat-service/threads": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch all chat threads associated with a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Service"
                ],
                "summary": "Get Threads",
                "parameters": [
                    {
                        "description": "Get Threads Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chattypes.GetThreadsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Threads successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/chattypes.GetThreadsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/config/get": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch the current configuration from the server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config Service"
                ],
                "summary": "Get",
                "parameters": [
                    {
                        "description": "Get Config Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/configtypes.GetConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Current configuration retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/configtypes.GetConfigResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/config/save": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Save the provided configuration to the server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config Service"
                ],
                "summary": "Save",
                "parameters": [
                    {
                        "description": "Save Config Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/configtypes.SaveConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Save Config Response",
                        "schema": {
                            "$ref": "#/definitions/configtypes.SaveConfigResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/docker-service/container": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Launches a Docker container with the specified parameters.\n\nRequires the `docker.create` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Service"
                ],
                "summary": "Launch a Docker Container",
                "parameters": [
                    {
                        "description": "Launch Container Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dockertypes.LaunchContainerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.LaunchContainerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/docker-service/container/{hash}/is-running": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check if a Docker container identified by the hash is running",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Service"
                ],
                "summary": "Check If a Container Is Running",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container Hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.ContainerIsRunningResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/docker-service/container/{hash}/summary/{numberOfLines}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a summary of the Docker container identified by the hash, limited to a specified number of lines",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Service"
                ],
                "summary": "Get Container Summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container Hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of Lines",
                        "name": "numberOfLines",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.GetContainerSummaryResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/docker-service/host": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve information about the Docker host",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Service"
                ],
                "summary": "Get Docker Host",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.GetDockerHostResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/docker-service/info": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve detailed information about the Docker service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Service"
                ],
                "summary": "Get Docker Service Information",
                "responses": {
                    "200": {
                        "description": "Service Information",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.GetInfoResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dockertypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/download-service/download": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Start a download for a specified URL.\n\nRequires the `download.create` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Download Service"
                ],
                "summary": "Download a File",
                "parameters": [
                    {
                        "description": "Download Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/downloadtypes.DownloadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Download initiated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/downloadtypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/downloadtypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/downloadtypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/download-service/download/{downloadId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a download by ID.\n\nRequires the `download.view` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Download Service"
                ],
                "summary": "Get a Download",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Download ID",
                        "name": "downloadId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/downloadtypes.GetDownloadResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/download-service/download/{downloadId}/pause": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Pause a download that is currently in progress.\n\nRequires the `download.edit` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Download Service"
                ],
                "summary": "Pause a Download",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Download ID",
                        "name": "downloadId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/download-service/downloads": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch a list of all download details.\n\nRequires the `download.view` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Download Service"
                ],
                "summary": "List Downloads",
                "responses": {
                    "200": {
                        "description": "List of downloads",
                        "schema": {
                            "$ref": "#/definitions/downloadtypes.DownloadsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/firehose-service/publish": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Publishes an event to the firehose service after authorization check",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Firehose Service"
                ],
                "summary": "Publish an Event",
                "parameters": [
                    {
                        "description": "Event to publish",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/firehosetypes.PublishRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{}"
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/firehosetypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/firehosetypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/firehose-service/subscribe": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Establish a subscription to the firehose events and accept a real time stream of them.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "Firehose Service"
                ],
                "summary": "Subscribe to the Event Stream",
                "responses": {
                    "200": {
                        "description": "Event data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/firehosetypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/firehosetypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/generic/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new object with the provided details. Requires authorization and user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Generic Service"
                ],
                "summary": "Create a Generic Object",
                "parameters": [
                    {
                        "description": "Create request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/generictypes.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/generictypes.CreateResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/generic/object/{objectId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a generic object from the system based on the provided conditions. Requires authorization and user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Generic Service"
                ],
                "summary": "Delete a Generic Object",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container Hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Delete request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/generictypes.DeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful deletion of object",
                        "schema": {
                            "$ref": "#/definitions/generictypes.DeleteResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/generic/objects": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves objects from a specified table based on search criteria.\nRequires authorization and user authentication.\n\n\nUse helper functions in your respective client library such as condition constructors (`equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Generic Service"
                ],
                "summary": "Find Generic Objects",
                "parameters": [
                    {
                        "description": "Query Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/generictypes.QueryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of objects",
                        "schema": {
                            "$ref": "#/definitions/generictypes.QueryResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/generic/objects/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates objects in a specified table based on provided conditions. Requires authorization and user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Generic Service"
                ],
                "summary": "Update Generic Objects",
                "parameters": [
                    {
                        "description": "Update request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/generictypes.UpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful update of objects",
                        "schema": {
                            "$ref": "#/definitions/generictypes.UpdateResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/generic/upsert": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new generic object or updates an existing one based on the provided data. Requires authorization and user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Generic Service"
                ],
                "summary": "Upsert a Generic Object",
                "parameters": [
                    {
                        "description": "Upsert request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/generictypes.UpsertRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful creation or update of object",
                        "schema": {
                            "$ref": "#/definitions/generictypes.UpsertResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/generictypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/model-service/default/start": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Starts The Default Model.\n\nRequires the `model.create` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Service"
                ],
                "summary": "Start the Default Model",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.StartResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/model-service/models": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of models after checking authorization\nRequires \"model.view\" permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Service"
                ],
                "summary": "List Models",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.ListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/model-service/{id}/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the status of a model by ID.\n\nRequires the `model.view` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Service"
                ],
                "summary": "Get Model Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Model status retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.StatusResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/model-service/{modelId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the details of a model by its ID.\n\nthe Requires `model.view` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Service"
                ],
                "summary": "Get a Model",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.GetModelResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/model-service/{modelId}/make-default": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sets a model as the default model — when prompts are sent without a Model ID, the default model is used.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Service"
                ],
                "summary": "Make a Model Default",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.MakeDefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/model-service/{modelId}/start": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Starts a model by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Service"
                ],
                "summary": "Start a Model",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "modelId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.StartResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/modeltypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prompt-service/list": {
            "post": {
                "description": "List prompts that satisfy a query.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prompt Service"
                ],
                "summary": "List Prompts",
                "parameters": [
                    {
                        "description": "List Prompts Request",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ListPromptsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ListPromptsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prompt-service/prompt": {
            "post": {
                "description": "Adds a new prompt to the prompt queue and either waits for the response (if `sync` is set to true), or returns immediately.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prompt Service"
                ],
                "summary": "Add Prompt",
                "parameters": [
                    {
                        "description": "Add Prompt Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/prompttypes.AddPromptRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.AddPromptResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prompt-service/remove": {
            "post": {
                "description": "Remove a prompt by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prompt Service"
                ],
                "summary": "Remove Prompt",
                "parameters": [
                    {
                        "description": "Remove Prompt Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/prompttypes.RemovePromptRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{}",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.RemovePromptResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prompt-service/{threadId}/subscribe": {
            "get": {
                "description": "Subscribe to prompt responses via Server-Sent Events (SSE)",
                "tags": [
                    "Prompt Service"
                ],
                "summary": "Subscribe to Prompt",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Streaming response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Missing threadId parameter",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/prompttypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-service/change-password": {
            "post": {
                "description": "Allows an authenticated user to change their own password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Service"
                ],
                "summary": "Change User Password",
                "parameters": [
                    {
                        "description": "Change Password Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usertypes.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ChangePasswordResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-service/change-password-admin": {
            "post": {
                "description": "Allows an administrator to change a user's password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Service"
                ],
                "summary": "Change User Password (Admin)",
                "parameters": [
                    {
                        "description": "Change Password Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usertypes.ChangePasswordAdminRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ChangePasswordAdminResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-service/login": {
            "post": {
                "description": "Authenticates a user and returns a token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Service"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usertypes.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/usertypes.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-service/permission/{permissionId}": {
            "put": {
                "description": "Creates or updates a permission.\n\nRequires the `permission.create` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Service"
                ],
                "summary": "Upsert a Permission",
                "parameters": [
                    {
                        "type": "string",
                        "example": "123",
                        "description": "Permission ID",
                        "name": "permissionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Permission Details",
                        "name": "requestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usertypes.UpserPermissionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usertypes.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user-service/permission/{permissionId}/is-authorized": {
            "post": {
                "description": "Check if a user is authorized for a specific permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Service"
                ],
                "summary": "Is Authorized",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Permission ID",
                        "name": "permissionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Is Authorized Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usertypes.IsAuthorizedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usertypes.IsAuthorizedResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or missing permission id",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-service/register": {
            "post": {
                "description": "Register a new user with a name, email, and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Service"
                ],
                "summary": "Register a New User",
                "parameters": [
                    {
                        "description": "Register Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usertypes.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usertypes.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-service/role": {
            "post": {
                "description": "Create a new role.\n\nRequires the `role.create` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Service"
                ],
                "summary": "Create a New Role",
                "parameters": [
                    {
                        "description": "Create Role Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usertypes.CreateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role created successfully",
                        "schema": {
                            "$ref": "#/definitions/usertypes.CreateRoleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-service/role/{roleId}/permission/{permissionId}": {
            "put": {
                "description": "Adds a specific permission to a role identified by roleId.\n\nRequires the `permission.assign` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Service"
                ],
                "summary": "Add Permission to Role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Permission ID",
                        "name": "permissionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usertypes.CreateUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-service/role/{roleId}/permissions": {
            "put": {
                "description": "Set permissions for a specified role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Service"
                ],
                "summary": "Set Role Permissions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Set Role Permissions Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usertypes.SetRolePermissionsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usertypes.SetRolePermissionsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-service/user": {
            "post": {
                "description": "Allows an authenticated administrator to create a new user with specified details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Service"
                ],
                "summary": "Create a New User",
                "parameters": [
                    {
                        "description": "Create User Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usertypes.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/usertypes.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-service/user/by-token": {
            "post": {
                "description": "Retrieve user information based on an authentication token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Service"
                ],
                "summary": "Read User by Token",
                "parameters": [
                    {
                        "description": "Read User By Token Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usertypes.ReadUserByTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ReadUserByTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-service/users": {
            "post": {
                "description": "Fetches a list of users with optional query filters and pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Service"
                ],
                "summary": "List Users",
                "parameters": [
                    {
                        "description": "Get Users Request",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/usertypes.GetUsersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/usertypes.GetUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/usertypes.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "chattypes.AddMessageRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "$ref": "#/definitions/chattypes.Message"
                }
            }
        },
        "chattypes.AddThreadRequest": {
            "type": "object",
            "properties": {
                "thread": {
                    "$ref": "#/definitions/chattypes.Thread"
                }
            }
        },
        "chattypes.AddThreadResponse": {
            "type": "object",
            "properties": {
                "thread": {
                    "$ref": "#/definitions/chattypes.Thread"
                }
            }
        },
        "chattypes.Asset": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Content is the base64 encoded binary file direcly embedded in the asset itself",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "description": "Url of the asset where",
                    "type": "string"
                }
            }
        },
        "chattypes.GetMessagesResponse": {
            "type": "object",
            "properties": {
                "assets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chattypes.Asset"
                    }
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chattypes.Message"
                    }
                }
            }
        },
        "chattypes.GetThreadResponse": {
            "type": "object",
            "properties": {
                "exists": {
                    "type": "boolean"
                },
                "thread": {
                    "$ref": "#/definitions/chattypes.Thread"
                }
            }
        },
        "chattypes.GetThreadsRequest": {
            "type": "object"
        },
        "chattypes.GetThreadsResponse": {
            "type": "object",
            "properties": {
                "threads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chattypes.Thread"
                    }
                }
            }
        },
        "chattypes.Message": {
            "type": "object",
            "properties": {
                "assetIds": {
                    "description": "AssetIds defines the attachments the message has.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "content": {
                    "description": "Content of the message eg. \"Hi, what's up?\"",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "threadId": {
                    "description": "ThreadId of the message.",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "description": "UserId is the id of the user who wrote the message.\nFor AI messages this field is empty.",
                    "type": "string"
                }
            }
        },
        "chattypes.Thread": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "title": {
                    "description": "Title of the thread.",
                    "type": "string"
                },
                "topicIds": {
                    "description": "TopicIds defines which topics the thread belongs to.\nTopics can roughly be thought of as tags for threads.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "userIds": {
                    "description": "UserIds the ids of the users who can see this thread.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "chattypes.UpdateThreadRequest": {
            "type": "object",
            "properties": {
                "thread": {
                    "$ref": "#/definitions/chattypes.Thread"
                }
            }
        },
        "configtypes.AppServiceConfig": {
            "type": "object",
            "properties": {
                "loggingDisabled": {
                    "type": "boolean"
                }
            }
        },
        "configtypes.Config": {
            "type": "object",
            "properties": {
                "app": {
                    "$ref": "#/definitions/configtypes.AppServiceConfig"
                },
                "directory": {
                    "type": "string"
                },
                "download": {
                    "$ref": "#/definitions/configtypes.DownloadServiceConfig"
                },
                "isRuntimeInstalled": {
                    "description": "* This flag drives a minor UX feature:\n\t * if the user has not installed the runtime we show an INSTALL\n\t * button, but if the user has already installed the runtime we show\n\t * we show a START runtime button.\n\t *",
                    "type": "boolean"
                },
                "model": {
                    "$ref": "#/definitions/configtypes.ModelServiceConfig"
                }
            }
        },
        "configtypes.DownloadServiceConfig": {
            "type": "object",
            "properties": {
                "downloadFolder": {
                    "type": "string"
                }
            }
        },
        "configtypes.GetConfigRequest": {
            "type": "object"
        },
        "configtypes.GetConfigResponse": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/configtypes.Config"
                }
            }
        },
        "configtypes.ModelServiceConfig": {
            "type": "object",
            "properties": {
                "currentModelId": {
                    "type": "string"
                }
            }
        },
        "configtypes.SaveConfigRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/configtypes.Config"
                }
            }
        },
        "configtypes.SaveConfigResponse": {
            "type": "object"
        },
        "datastore.AllCondition": {
            "type": "object"
        },
        "datastore.Condition": {
            "type": "object",
            "properties": {
                "all": {
                    "description": "All condition returns all objects.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/datastore.AllCondition"
                        }
                    ]
                },
                "contains": {
                    "description": "Contains condition returns all objects where the field(s) values contain a particular string.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/datastore.ContainsCondition"
                        }
                    ]
                },
                "equal": {
                    "description": "Equal condition returns objects where value of a field equals (=) to the specified value in the query.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/datastore.EqualCondition"
                        }
                    ]
                },
                "startsWith": {
                    "description": "StartsWith condition returns all objects where the field(s) values start with a particular string.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/datastore.StartsWithCondition"
                        }
                    ]
                }
            }
        },
        "datastore.ContainsCondition": {
            "type": "object",
            "properties": {
                "selector": {
                    "description": "Selector selects one, more or all fields",
                    "allOf": [
                        {
                            "$ref": "#/definitions/datastore.FieldSelector"
                        }
                    ]
                },
                "value": {}
            }
        },
        "datastore.EqualCondition": {
            "type": "object",
            "properties": {
                "selector": {
                    "description": "Selector selects one, more or all fields",
                    "allOf": [
                        {
                            "$ref": "#/definitions/datastore.FieldSelector"
                        }
                    ]
                },
                "value": {}
            }
        },
        "datastore.FieldSelector": {
            "type": "object",
            "properties": {
                "any": {
                    "description": "Any matches any fields in the object",
                    "type": "boolean"
                },
                "field": {
                    "description": "Field matchies a single field",
                    "type": "string"
                },
                "oneOf": {
                    "description": "OneOf matches a number of fields",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "datastore.OrderBy": {
            "type": "object",
            "properties": {
                "desc": {
                    "description": "Desc indicates whether the sorting should be in descending order.",
                    "type": "boolean"
                },
                "field": {
                    "description": "The field by which to order the results",
                    "type": "string"
                },
                "randomize": {
                    "description": "Randomize indicates that the results should be randomized instead of ordered by the `field` and `desc` criteria",
                    "type": "boolean"
                }
            }
        },
        "datastore.Query": {
            "type": "object",
            "properties": {
                "after": {
                    "description": "After is used for paginations. Instead of offset-based pagination,\nwe support cursor-based pagination because it works better in a scalable,\ndistributed environment.",
                    "type": "array",
                    "items": {}
                },
                "conditions": {
                    "description": "Conditions are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as condition constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/datastore.Condition"
                    }
                },
                "count": {
                    "description": "Count true means return the count of the dataset filtered by Conditions\nwithout after or limit.",
                    "type": "boolean"
                },
                "limit": {
                    "description": "Limit the number of records in the result set.",
                    "type": "integer"
                },
                "orderBys": {
                    "description": "OrderBys order the result set.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/datastore.OrderBy"
                    }
                }
            }
        },
        "datastore.StartsWithCondition": {
            "type": "object",
            "properties": {
                "selector": {
                    "description": "Selector selects one, more or all fields",
                    "allOf": [
                        {
                            "$ref": "#/definitions/datastore.FieldSelector"
                        }
                    ]
                },
                "value": {}
            }
        },
        "dockertypes.ContainerIsRunningResponse": {
            "type": "object",
            "properties": {
                "isRunning": {
                    "type": "boolean"
                }
            }
        },
        "dockertypes.DockerInfo": {
            "type": "object",
            "properties": {
                "dockerDaemonAddress": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "hasDocker": {
                    "type": "boolean"
                }
            }
        },
        "dockertypes.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "dockertypes.GetContainerSummaryResponse": {
            "type": "object",
            "properties": {
                "summary": {
                    "type": "string"
                }
            }
        },
        "dockertypes.GetDockerHostResponse": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string"
                }
            }
        },
        "dockertypes.GetInfoResponse": {
            "type": "object",
            "properties": {
                "info": {
                    "$ref": "#/definitions/dockertypes.DockerInfo"
                }
            }
        },
        "dockertypes.LaunchContainerRequest": {
            "type": "object",
            "properties": {
                "hostPort": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/dockertypes.LaunchOptions"
                },
                "port": {
                    "type": "integer"
                }
            }
        },
        "dockertypes.LaunchContainerResponse": {
            "type": "object",
            "properties": {
                "info": {
                    "$ref": "#/definitions/dockertypes.LaunchInfo"
                }
            }
        },
        "dockertypes.LaunchInfo": {
            "type": "object",
            "properties": {
                "newContainerStarted": {
                    "type": "boolean"
                },
                "portNumber": {
                    "type": "integer"
                }
            }
        },
        "dockertypes.LaunchOptions": {
            "type": "object",
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gpuEnabled": {
                    "type": "boolean"
                },
                "hash": {
                    "type": "string"
                },
                "hostBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "downloadtypes.DownloadDetails": {
            "type": "object",
            "properties": {
                "cancelled": {
                    "type": "boolean"
                },
                "dir": {
                    "type": "string"
                },
                "downloadedBytes": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "filePath": {
                    "type": "string"
                },
                "fullFileSize": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "paused": {
                    "type": "boolean"
                },
                "progress": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "downloadtypes.DownloadRequest": {
            "type": "object",
            "properties": {
                "folderPath": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "downloadtypes.DownloadsResponse": {
            "type": "object",
            "properties": {
                "downloads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/downloadtypes.DownloadDetails"
                    }
                }
            }
        },
        "downloadtypes.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "downloadtypes.GetDownloadResponse": {
            "type": "object",
            "properties": {
                "download": {
                    "$ref": "#/definitions/downloadtypes.DownloadDetails"
                },
                "exists": {
                    "type": "boolean"
                }
            }
        },
        "firehosetypes.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "firehosetypes.Event": {
            "type": "object",
            "properties": {
                "data": {},
                "name": {
                    "type": "string"
                }
            }
        },
        "firehosetypes.PublishRequest": {
            "type": "object",
            "properties": {
                "event": {
                    "$ref": "#/definitions/firehosetypes.Event"
                }
            }
        },
        "generictypes.CreateRequest": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/generictypes.GenericObjectCreateFields"
                }
            }
        },
        "generictypes.CreateResponse": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/generictypes.GenericObject"
                }
            }
        },
        "generictypes.DeleteRequest": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/datastore.Condition"
                    }
                },
                "table": {
                    "type": "string"
                }
            }
        },
        "generictypes.DeleteResponse": {
            "type": "object"
        },
        "generictypes.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "generictypes.GenericObject": {
            "type": "object",
            "required": [
                "data",
                "table"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "id": {
                    "type": "string"
                },
                "public": {
                    "description": "Public determines if the object is visible to all users.\nWhen it's false the entry is only visible to the user who created it.\nWhen it's true the entry is visible to everyone.",
                    "type": "boolean"
                },
                "table": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "generictypes.GenericObjectCreateFields": {
            "type": "object",
            "required": [
                "data",
                "table"
            ],
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "id": {
                    "type": "string"
                },
                "public": {
                    "description": "Public determines if the object is visible to all users.\nWhen it's false the entry is only visible to the user who created it.\nWhen it's true the entry is visible to everyone.",
                    "type": "boolean"
                },
                "table": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "generictypes.QueryRequest": {
            "type": "object",
            "properties": {
                "public": {
                    "type": "boolean"
                },
                "query": {
                    "$ref": "#/definitions/datastore.Query"
                },
                "table": {
                    "type": "string"
                }
            }
        },
        "generictypes.QueryResponse": {
            "type": "object",
            "properties": {
                "objects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/generictypes.GenericObject"
                    }
                }
            }
        },
        "generictypes.UpdateRequest": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/datastore.Condition"
                    }
                },
                "object": {
                    "$ref": "#/definitions/generictypes.GenericObject"
                },
                "table": {
                    "type": "string"
                }
            }
        },
        "generictypes.UpdateResponse": {
            "type": "object"
        },
        "generictypes.UpsertRequest": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/generictypes.GenericObjectCreateFields"
                }
            }
        },
        "generictypes.UpsertResponse": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/generictypes.GenericObject"
                }
            }
        },
        "modeltypes.Architectures": {
            "type": "object",
            "properties": {
                "cuda": {
                    "$ref": "#/definitions/modeltypes.Container"
                },
                "default": {
                    "$ref": "#/definitions/modeltypes.Container"
                }
            }
        },
        "modeltypes.Container": {
            "type": "object",
            "properties": {
                "envars": {
                    "description": "Envars passed to the container. eg.\n\t'DEVICES=all'",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                },
                "persistentPaths": {
                    "description": "Paths in the container to persist.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "port": {
                    "description": "Port is the internal port of the Container",
                    "type": "integer"
                }
            }
        },
        "modeltypes.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "modeltypes.GetModelResponse": {
            "type": "object",
            "properties": {
                "exists": {
                    "type": "boolean"
                },
                "model": {
                    "$ref": "#/definitions/modeltypes.Model"
                },
                "platform": {
                    "$ref": "#/definitions/modeltypes.Platform"
                }
            }
        },
        "modeltypes.ListResponse": {
            "type": "object",
            "properties": {
                "models": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/modeltypes.Model"
                    }
                }
            }
        },
        "modeltypes.MakeDefaultResponse": {
            "type": "object"
        },
        "modeltypes.Model": {
            "type": "object",
            "properties": {
                "assets": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "bits": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "extension": {
                    "type": "string"
                },
                "flavour": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "max_bits": {
                    "type": "integer"
                },
                "max_ram": {
                    "type": "number"
                },
                "mirrors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "parameters": {
                    "type": "string"
                },
                "platformId": {
                    "type": "string"
                },
                "prompt_template": {
                    "type": "string"
                },
                "quality": {
                    "type": "string"
                },
                "quant_comment": {
                    "type": "string"
                },
                "size": {
                    "type": "number"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uncensored": {
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "modeltypes.ModelStatus": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "assetsReady": {
                    "type": "boolean"
                },
                "running": {
                    "description": "Running triggers onModelLaunch on the frontend.\n\tRunning is true when the model is both running and answering\n\t- fully loaded.",
                    "type": "boolean"
                }
            }
        },
        "modeltypes.Platform": {
            "type": "object",
            "properties": {
                "architectures": {
                    "$ref": "#/definitions/modeltypes.Architectures"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "modeltypes.StartResponse": {
            "type": "object"
        },
        "modeltypes.StatusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/modeltypes.ModelStatus"
                }
            }
        },
        "prompttypes.AddPromptRequest": {
            "type": "object",
            "required": [
                "prompt"
            ],
            "properties": {
                "id": {
                    "description": "Id is the unique ID of the prompt.",
                    "type": "string"
                },
                "maxRetries": {
                    "description": "MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",
                    "type": "integer",
                    "example": 10
                },
                "modelId": {
                    "description": "ModelId is just the Singulatron internal ID of the model.",
                    "type": "string",
                    "example": "huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf"
                },
                "prompt": {
                    "description": "Prompt is the message itself eg. \"What's a banana?",
                    "type": "string",
                    "example": "What's a banana?"
                },
                "sync": {
                    "description": "Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",
                    "type": "boolean"
                },
                "template": {
                    "description": "Template of the prompt. Optional. If not present it's derived from ModelId.",
                    "type": "string",
                    "example": "[INST]{prompt}[/INST]"
                },
                "threadId": {
                    "description": "ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",
                    "type": "string"
                }
            }
        },
        "prompttypes.AddPromptResponse": {
            "type": "object",
            "properties": {
                "answer": {
                    "type": "string"
                },
                "prompt": {
                    "$ref": "#/definitions/prompttypes.Prompt"
                }
            }
        },
        "prompttypes.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "prompttypes.ListPromptsRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "$ref": "#/definitions/datastore.Query"
                }
            }
        },
        "prompttypes.ListPromptsResponse": {
            "type": "object",
            "properties": {
                "after": {},
                "count": {
                    "type": "integer"
                },
                "prompts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/prompttypes.Prompt"
                    }
                }
            }
        },
        "prompttypes.Prompt": {
            "type": "object",
            "required": [
                "prompt"
            ],
            "properties": {
                "createdAt": {
                    "description": "CreatedAt is the time of the prompt creation.",
                    "type": "string"
                },
                "error": {
                    "description": "Error that arose during prompt execution, if any.",
                    "type": "string"
                },
                "id": {
                    "description": "Id is the unique ID of the prompt.",
                    "type": "string"
                },
                "lastRun": {
                    "description": "LastRun is the time of the last prompt run.",
                    "type": "string"
                },
                "maxRetries": {
                    "description": "MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",
                    "type": "integer",
                    "example": 10
                },
                "modelId": {
                    "description": "ModelId is just the Singulatron internal ID of the model.",
                    "type": "string",
                    "example": "huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf"
                },
                "prompt": {
                    "description": "Prompt is the message itself eg. \"What's a banana?",
                    "type": "string",
                    "example": "What's a banana?"
                },
                "runCount": {
                    "description": "RunCount is the number of times the prompt was retried due to errors",
                    "type": "integer"
                },
                "status": {
                    "description": "Status of the prompt.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/prompttypes.PromptStatus"
                        }
                    ]
                },
                "sync": {
                    "description": "Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",
                    "type": "boolean"
                },
                "template": {
                    "description": "Template of the prompt. Optional. If not present it's derived from ModelId.",
                    "type": "string",
                    "example": "[INST]{prompt}[/INST]"
                },
                "threadId": {
                    "description": "ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "UpdatedAt is the last time the prompt was updated.",
                    "type": "string"
                },
                "userId": {
                    "description": "UserId contains the ID of the user who submitted the prompt.",
                    "type": "string"
                }
            }
        },
        "prompttypes.PromptStatus": {
            "type": "string",
            "enum": [
                "scheduled",
                "running",
                "completed",
                "errored",
                "abandoned",
                "canceled"
            ],
            "x-enum-varnames": [
                "PromptStatusScheduled",
                "PromptStatusRunning",
                "PromptStatusCompleted",
                "PromptStatusErrored",
                "PromptStatusAbandoned",
                "PromptStatusCanceled"
            ]
        },
        "prompttypes.RemovePromptRequest": {
            "type": "object",
            "properties": {
                "promptId": {
                    "type": "string"
                }
            }
        },
        "prompttypes.RemovePromptResponse": {
            "type": "object"
        },
        "usertypes.AuthToken": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "usertypes.ChangePasswordAdminRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "newPassword": {
                    "type": "string"
                }
            }
        },
        "usertypes.ChangePasswordAdminResponse": {
            "type": "object"
        },
        "usertypes.ChangePasswordRequest": {
            "type": "object",
            "properties": {
                "currentPassword": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "newPassword": {
                    "type": "string"
                }
            }
        },
        "usertypes.ChangePasswordResponse": {
            "type": "object"
        },
        "usertypes.CreateRoleRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "permissionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "usertypes.CreateRoleResponse": {
            "type": "object",
            "properties": {
                "role": {
                    "$ref": "#/definitions/usertypes.Role"
                }
            }
        },
        "usertypes.CreateUserRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user": {
                    "$ref": "#/definitions/usertypes.User"
                }
            }
        },
        "usertypes.CreateUserResponse": {
            "type": "object"
        },
        "usertypes.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "usertypes.GetUsersRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "$ref": "#/definitions/datastore.Query"
                }
            }
        },
        "usertypes.GetUsersResponse": {
            "type": "object",
            "properties": {
                "after": {
                    "type": "string"
                },
                "count": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/usertypes.User"
                    }
                }
            }
        },
        "usertypes.IsAuthorizedRequest": {
            "type": "object",
            "properties": {
                "emailsGranted": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "usertypes.IsAuthorizedResponse": {
            "type": "object",
            "properties": {
                "authorized": {
                    "type": "boolean"
                },
                "user": {
                    "$ref": "#/definitions/usertypes.User"
                }
            }
        },
        "usertypes.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "usertypes.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "$ref": "#/definitions/usertypes.AuthToken"
                }
            }
        },
        "usertypes.Permission": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "description": "eg. \"user.viewer\"",
                    "type": "string"
                },
                "name": {
                    "description": "eg. \"User Viewer\"",
                    "type": "string"
                },
                "ownerId": {
                    "description": "Service who owns the permission",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "usertypes.ReadUserByTokenRequest": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "usertypes.ReadUserByTokenResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/usertypes.User"
                }
            }
        },
        "usertypes.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "usertypes.RegisterResponse": {
            "type": "object"
        },
        "usertypes.Role": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "permissionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "usertypes.SetRolePermissionsRequest": {
            "type": "object",
            "properties": {
                "permissionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "usertypes.SetRolePermissionsResponse": {
            "type": "object"
        },
        "usertypes.UpserPermissionRequest": {
            "type": "object",
            "properties": {
                "permissions": {
                    "$ref": "#/definitions/usertypes.Permission"
                }
            }
        },
        "usertypes.User": {
            "type": "object",
            "properties": {
                "authTokenIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "email": {
                    "description": "Email or username",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isService": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "passwordHash": {
                    "type": "string"
                },
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and token acquired from the User sService Login endpoint.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "Singulatron API",
        "url": "https://superplatform.ai/docs/category/singulatron-api"
    }
}