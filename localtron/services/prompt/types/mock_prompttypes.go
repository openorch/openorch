// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/prompt/types/interface.go
//
// Generated by this command:
//
//	mockgen -source=./services/prompt/types/interface.go -destination=./services/prompt/types/mock_prompttypes.go -package=prompttypes
//

// Package prompttypes is a generated GoMock package.
package prompttypes

import (
	context "context"
	reflect "reflect"

	llm "github.com/singulatron/singulatron/localtron/clients/llm"
	gomock "go.uber.org/mock/gomock"
)

// MockPromptServiceI is a mock of PromptServiceI interface.
type MockPromptServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockPromptServiceIMockRecorder
}

// MockPromptServiceIMockRecorder is the mock recorder for MockPromptServiceI.
type MockPromptServiceIMockRecorder struct {
	mock *MockPromptServiceI
}

// NewMockPromptServiceI creates a new mock instance.
func NewMockPromptServiceI(ctrl *gomock.Controller) *MockPromptServiceI {
	mock := &MockPromptServiceI{ctrl: ctrl}
	mock.recorder = &MockPromptServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromptServiceI) EXPECT() *MockPromptServiceIMockRecorder {
	return m.recorder
}

// AddPrompt mocks base method.
func (m *MockPromptServiceI) AddPrompt(ctx context.Context, prompt *AddPromptRequest, userId string) (*AddPromptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPrompt", ctx, prompt, userId)
	ret0, _ := ret[0].(*AddPromptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPrompt indicates an expected call of AddPrompt.
func (mr *MockPromptServiceIMockRecorder) AddPrompt(ctx, prompt, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPrompt", reflect.TypeOf((*MockPromptServiceI)(nil).AddPrompt), ctx, prompt, userId)
}

// Broadcast mocks base method.
func (m *MockPromptServiceI) Broadcast(threadId string, response *llm.CompletionResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", threadId, response)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockPromptServiceIMockRecorder) Broadcast(threadId, response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockPromptServiceI)(nil).Broadcast), threadId, response)
}

// ListPrompts mocks base method.
func (m *MockPromptServiceI) ListPrompts(options *ListPromptOptions) ([]*Prompt, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrompts", options)
	ret0, _ := ret[0].([]*Prompt)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPrompts indicates an expected call of ListPrompts.
func (mr *MockPromptServiceIMockRecorder) ListPrompts(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrompts", reflect.TypeOf((*MockPromptServiceI)(nil).ListPrompts), options)
}

// RemovePrompt mocks base method.
func (m *MockPromptServiceI) RemovePrompt(promptId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePrompt", promptId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePrompt indicates an expected call of RemovePrompt.
func (mr *MockPromptServiceIMockRecorder) RemovePrompt(promptId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePrompt", reflect.TypeOf((*MockPromptServiceI)(nil).RemovePrompt), promptId)
}

// Subscribe mocks base method.
func (m *MockPromptServiceI) Subscribe(threadId string, subscriber SubscriberChan) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", threadId, subscriber)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPromptServiceIMockRecorder) Subscribe(threadId, subscriber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPromptServiceI)(nil).Subscribe), threadId, subscriber)
}

// Unsubscribe mocks base method.
func (m *MockPromptServiceI) Unsubscribe(threadId string, subscriber SubscriberChan) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", threadId, subscriber)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockPromptServiceIMockRecorder) Unsubscribe(threadId, subscriber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockPromptServiceI)(nil).Unsubscribe), threadId, subscriber)
}
