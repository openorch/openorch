// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/generic/types/interface.go
//
// Generated by this command:
//
//	mockgen -source=./services/generic/types/interface.go -destination=./services/generic/types/mock_generictypes.go -package=generictypes
//

// Package generictypes is a generated GoMock package.
package generictypes

import (
	reflect "reflect"

	datastore "github.com/singulatron/singulatron/localtron/datastore"
	gomock "go.uber.org/mock/gomock"
)

// MockGenericServiceI is a mock of GenericServiceI interface.
type MockGenericServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockGenericServiceIMockRecorder
}

// MockGenericServiceIMockRecorder is the mock recorder for MockGenericServiceI.
type MockGenericServiceIMockRecorder struct {
	mock *MockGenericServiceI
}

// NewMockGenericServiceI creates a new mock instance.
func NewMockGenericServiceI(ctrl *gomock.Controller) *MockGenericServiceI {
	mock := &MockGenericServiceI{ctrl: ctrl}
	mock.recorder = &MockGenericServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenericServiceI) EXPECT() *MockGenericServiceIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGenericServiceI) Create(request *CreateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockGenericServiceIMockRecorder) Create(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGenericServiceI)(nil).Create), request)
}

// CreateMany mocks base method.
func (m *MockGenericServiceI) CreateMany(request *CreateManyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMany", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockGenericServiceIMockRecorder) CreateMany(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockGenericServiceI)(nil).CreateMany), request)
}

// Delete mocks base method.
func (m *MockGenericServiceI) Delete(tableName, userId string, conditions []datastore.Condition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", tableName, userId, conditions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGenericServiceIMockRecorder) Delete(tableName, userId, conditions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGenericServiceI)(nil).Delete), tableName, userId, conditions)
}

// Find mocks base method.
func (m *MockGenericServiceI) Find(options FindOptions) ([]*GenericObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", options)
	ret0, _ := ret[0].([]*GenericObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockGenericServiceIMockRecorder) Find(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGenericServiceI)(nil).Find), options)
}

// Update mocks base method.
func (m *MockGenericServiceI) Update(tableName, userId string, conditions []datastore.Condition, object *GenericObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", tableName, userId, conditions, object)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGenericServiceIMockRecorder) Update(tableName, userId, conditions, object any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGenericServiceI)(nil).Update), tableName, userId, conditions, object)
}

// Upsert mocks base method.
func (m *MockGenericServiceI) Upsert(request *UpsertRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockGenericServiceIMockRecorder) Upsert(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockGenericServiceI)(nil).Upsert), request)
}

// UpsertMany mocks base method.
func (m *MockGenericServiceI) UpsertMany(request *UpsertManyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMany", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMany indicates an expected call of UpsertMany.
func (mr *MockGenericServiceIMockRecorder) UpsertMany(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMany", reflect.TypeOf((*MockGenericServiceI)(nil).UpsertMany), request)
}
