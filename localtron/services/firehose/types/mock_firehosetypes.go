// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/firehose/types/interface.go
//
// Generated by this command:
//
//	mockgen -source=./services/firehose/types/interface.go -destination=./services/firehose/types/mock_firehosetypes.go -package=firehosetypes
//

// Package firehosetypes is a generated GoMock package.
package firehosetypes

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFirehoseServiceI is a mock of FirehoseServiceI interface.
type MockFirehoseServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockFirehoseServiceIMockRecorder
}

// MockFirehoseServiceIMockRecorder is the mock recorder for MockFirehoseServiceI.
type MockFirehoseServiceIMockRecorder struct {
	mock *MockFirehoseServiceI
}

// NewMockFirehoseServiceI creates a new mock instance.
func NewMockFirehoseServiceI(ctrl *gomock.Controller) *MockFirehoseServiceI {
	mock := &MockFirehoseServiceI{ctrl: ctrl}
	mock.recorder = &MockFirehoseServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirehoseServiceI) EXPECT() *MockFirehoseServiceIMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockFirehoseServiceI) Publish(event Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", event)
}

// Publish indicates an expected call of Publish.
func (mr *MockFirehoseServiceIMockRecorder) Publish(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockFirehoseServiceI)(nil).Publish), event)
}

// PublishMany mocks base method.
func (m *MockFirehoseServiceI) PublishMany(events ...Event) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range events {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "PublishMany", varargs...)
}

// PublishMany indicates an expected call of PublishMany.
func (mr *MockFirehoseServiceIMockRecorder) PublishMany(events ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMany", reflect.TypeOf((*MockFirehoseServiceI)(nil).PublishMany), events...)
}

// Subscribe mocks base method.
func (m *MockFirehoseServiceI) Subscribe(callback func([]Event)) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", callback)
	ret0, _ := ret[0].(int)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockFirehoseServiceIMockRecorder) Subscribe(callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockFirehoseServiceI)(nil).Subscribe), callback)
}

// Unsubscribe mocks base method.
func (m *MockFirehoseServiceI) Unsubscribe(id int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", id)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockFirehoseServiceIMockRecorder) Unsubscribe(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockFirehoseServiceI)(nil).Unsubscribe), id)
}
