// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/docker/types/interface.go
//
// Generated by this command:
//
//	mockgen -source=./services/docker/types/interface.go -destination=./services/docker/types/mock_dockertypes.go -package=dockertypes
//

// Package dockertypes is a generated GoMock package.
package dockertypes

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDockerServiceI is a mock of DockerServiceI interface.
type MockDockerServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockDockerServiceIMockRecorder
}

// MockDockerServiceIMockRecorder is the mock recorder for MockDockerServiceI.
type MockDockerServiceIMockRecorder struct {
	mock *MockDockerServiceI
}

// NewMockDockerServiceI creates a new mock instance.
func NewMockDockerServiceI(ctrl *gomock.Controller) *MockDockerServiceI {
	mock := &MockDockerServiceI{ctrl: ctrl}
	mock.recorder = &MockDockerServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerServiceI) EXPECT() *MockDockerServiceIMockRecorder {
	return m.recorder
}

// GetContainerLogsAndStatus mocks base method.
func (m *MockDockerServiceI) GetContainerLogsAndStatus(singulatronHash string, logCount int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerLogsAndStatus", singulatronHash, logCount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLogsAndStatus indicates an expected call of GetContainerLogsAndStatus.
func (mr *MockDockerServiceIMockRecorder) GetContainerLogsAndStatus(singulatronHash, logCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLogsAndStatus", reflect.TypeOf((*MockDockerServiceI)(nil).GetContainerLogsAndStatus), singulatronHash, logCount)
}

// GetDockerHost mocks base method.
func (m *MockDockerServiceI) GetDockerHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDockerHost indicates an expected call of GetDockerHost.
func (mr *MockDockerServiceIMockRecorder) GetDockerHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerHost", reflect.TypeOf((*MockDockerServiceI)(nil).GetDockerHost))
}

// HashIsRunning mocks base method.
func (m *MockDockerServiceI) HashIsRunning(hash string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashIsRunning", hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashIsRunning indicates an expected call of HashIsRunning.
func (mr *MockDockerServiceIMockRecorder) HashIsRunning(hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashIsRunning", reflect.TypeOf((*MockDockerServiceI)(nil).HashIsRunning), hash)
}

// Info mocks base method.
func (m *MockDockerServiceI) Info() (*OnDockerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(*OnDockerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockDockerServiceIMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockDockerServiceI)(nil).Info))
}

// LaunchContainer mocks base method.
func (m *MockDockerServiceI) LaunchContainer(image string, internalPort, hostPort int, options *LaunchOptions) (*LaunchInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchContainer", image, internalPort, hostPort, options)
	ret0, _ := ret[0].(*LaunchInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LaunchContainer indicates an expected call of LaunchContainer.
func (mr *MockDockerServiceIMockRecorder) LaunchContainer(image, internalPort, hostPort, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchContainer", reflect.TypeOf((*MockDockerServiceI)(nil).LaunchContainer), image, internalPort, hostPort, options)
}
