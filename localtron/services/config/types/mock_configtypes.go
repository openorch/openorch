// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/config/types/interface.go
//
// Generated by this command:
//
//	mockgen -source=./services/config/types/interface.go -destination=./services/config/types/mock_configtypes.go -package=configtypes
//

// Package configtypes is a generated GoMock package.
package configtypes

import (
	reflect "reflect"

	firehosetypes "github.com/singulatron/singulatron/localtron/services/firehose/types"
	usertypes "github.com/singulatron/singulatron/localtron/services/user/types"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigServiceI is a mock of ConfigServiceI interface.
type MockConfigServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServiceIMockRecorder
}

// MockConfigServiceIMockRecorder is the mock recorder for MockConfigServiceI.
type MockConfigServiceIMockRecorder struct {
	mock *MockConfigServiceI
}

// NewMockConfigServiceI creates a new mock instance.
func NewMockConfigServiceI(ctrl *gomock.Controller) *MockConfigServiceI {
	mock := &MockConfigServiceI{ctrl: ctrl}
	mock.recorder = &MockConfigServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigServiceI) EXPECT() *MockConfigServiceIMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockConfigServiceI) GetConfig() (Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConfigServiceIMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigServiceI)(nil).GetConfig))
}

// GetConfigDirectory mocks base method.
func (m *MockConfigServiceI) GetConfigDirectory() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigDirectory")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetConfigDirectory indicates an expected call of GetConfigDirectory.
func (mr *MockConfigServiceIMockRecorder) GetConfigDirectory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigDirectory", reflect.TypeOf((*MockConfigServiceI)(nil).GetConfigDirectory))
}

// SaveConfig mocks base method.
func (m *MockConfigServiceI) SaveConfig(config Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig.
func (mr *MockConfigServiceIMockRecorder) SaveConfig(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockConfigServiceI)(nil).SaveConfig), config)
}

// SetAddPermissionToRoleFunc mocks base method.
func (m *MockConfigServiceI) SetAddPermissionToRoleFunc(f func(string, string) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAddPermissionToRoleFunc", f)
}

// SetAddPermissionToRoleFunc indicates an expected call of SetAddPermissionToRoleFunc.
func (mr *MockConfigServiceIMockRecorder) SetAddPermissionToRoleFunc(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAddPermissionToRoleFunc", reflect.TypeOf((*MockConfigServiceI)(nil).SetAddPermissionToRoleFunc), f)
}

// SetEventCallback mocks base method.
func (m *MockConfigServiceI) SetEventCallback(f func(firehosetypes.Event)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEventCallback", f)
}

// SetEventCallback indicates an expected call of SetEventCallback.
func (mr *MockConfigServiceIMockRecorder) SetEventCallback(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventCallback", reflect.TypeOf((*MockConfigServiceI)(nil).SetEventCallback), f)
}

// SetUpsertPermissionFunc mocks base method.
func (m *MockConfigServiceI) SetUpsertPermissionFunc(f func(string, string, string) (*usertypes.Permission, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUpsertPermissionFunc", f)
}

// SetUpsertPermissionFunc indicates an expected call of SetUpsertPermissionFunc.
func (mr *MockConfigServiceIMockRecorder) SetUpsertPermissionFunc(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpsertPermissionFunc", reflect.TypeOf((*MockConfigServiceI)(nil).SetUpsertPermissionFunc), f)
}

// Start mocks base method.
func (m *MockConfigServiceI) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockConfigServiceIMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConfigServiceI)(nil).Start))
}
