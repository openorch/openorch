// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/model/types/interface.go
//
// Generated by this command:
//
//	mockgen -source=./services/model/types/interface.go -destination=./services/model/types/mock_modeltypes.go -package=modeltypes
//

// Package modeltypes is a generated GoMock package.
package modeltypes

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockModelServiceI is a mock of ModelServiceI interface.
type MockModelServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceIMockRecorder
}

// MockModelServiceIMockRecorder is the mock recorder for MockModelServiceI.
type MockModelServiceIMockRecorder struct {
	mock *MockModelServiceI
}

// NewMockModelServiceI creates a new mock instance.
func NewMockModelServiceI(ctrl *gomock.Controller) *MockModelServiceI {
	mock := &MockModelServiceI{ctrl: ctrl}
	mock.recorder = &MockModelServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelServiceI) EXPECT() *MockModelServiceIMockRecorder {
	return m.recorder
}

// GetModels mocks base method.
func (m *MockModelServiceI) GetModels() ([]*Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModels")
	ret0, _ := ret[0].([]*Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModels indicates an expected call of GetModels.
func (mr *MockModelServiceIMockRecorder) GetModels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModels", reflect.TypeOf((*MockModelServiceI)(nil).GetModels))
}

// GetPlatformByModelId mocks base method.
func (m *MockModelServiceI) GetPlatformByModelId(modelId string) (*Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformByModelId", modelId)
	ret0, _ := ret[0].(*Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformByModelId indicates an expected call of GetPlatformByModelId.
func (mr *MockModelServiceIMockRecorder) GetPlatformByModelId(modelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformByModelId", reflect.TypeOf((*MockModelServiceI)(nil).GetPlatformByModelId), modelId)
}

// MakeDefault mocks base method.
func (m *MockModelServiceI) MakeDefault(modelId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeDefault", modelId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeDefault indicates an expected call of MakeDefault.
func (mr *MockModelServiceIMockRecorder) MakeDefault(modelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDefault", reflect.TypeOf((*MockModelServiceI)(nil).MakeDefault), modelId)
}

// Start mocks base method.
func (m *MockModelServiceI) Start(modelId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", modelId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockModelServiceIMockRecorder) Start(modelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockModelServiceI)(nil).Start), modelId)
}

// Status mocks base method.
func (m *MockModelServiceI) Status(modelId string) (*ModelStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", modelId)
	ret0, _ := ret[0].(*ModelStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockModelServiceIMockRecorder) Status(modelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockModelServiceI)(nil).Status), modelId)
}
