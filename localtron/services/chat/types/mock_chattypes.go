// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/chat/types/interface.go
//
// Generated by this command:
//
//	mockgen -source=./services/chat/types/interface.go -destination=./services/chat/types/mock_chattypes.go -package=chattypes
//

// Package chattypes is a generated GoMock package.
package chattypes

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockChatServiceI is a mock of ChatServiceI interface.
type MockChatServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceIMockRecorder
}

// MockChatServiceIMockRecorder is the mock recorder for MockChatServiceI.
type MockChatServiceIMockRecorder struct {
	mock *MockChatServiceI
}

// NewMockChatServiceI creates a new mock instance.
func NewMockChatServiceI(ctrl *gomock.Controller) *MockChatServiceI {
	mock := &MockChatServiceI{ctrl: ctrl}
	mock.recorder = &MockChatServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatServiceI) EXPECT() *MockChatServiceIMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockChatServiceI) AddMessage(chatMessage *Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessage", chatMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockChatServiceIMockRecorder) AddMessage(chatMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockChatServiceI)(nil).AddMessage), chatMessage)
}

// AddThread mocks base method.
func (m *MockChatServiceI) AddThread(chatThread *Thread) (*Thread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddThread", chatThread)
	ret0, _ := ret[0].(*Thread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddThread indicates an expected call of AddThread.
func (mr *MockChatServiceIMockRecorder) AddThread(chatThread any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddThread", reflect.TypeOf((*MockChatServiceI)(nil).AddThread), chatThread)
}

// DeleteMessage mocks base method.
func (m *MockChatServiceI) DeleteMessage(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockChatServiceIMockRecorder) DeleteMessage(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockChatServiceI)(nil).DeleteMessage), id)
}

// DeleteThread mocks base method.
func (m *MockChatServiceI) DeleteThread(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThread", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteThread indicates an expected call of DeleteThread.
func (mr *MockChatServiceIMockRecorder) DeleteThread(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThread", reflect.TypeOf((*MockChatServiceI)(nil).DeleteThread), id)
}

// GetAssets mocks base method.
func (m *MockChatServiceI) GetAssets(assetIds []string) ([]*Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssets", assetIds)
	ret0, _ := ret[0].([]*Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssets indicates an expected call of GetAssets.
func (mr *MockChatServiceIMockRecorder) GetAssets(assetIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssets", reflect.TypeOf((*MockChatServiceI)(nil).GetAssets), assetIds)
}

// GetMessages mocks base method.
func (m *MockChatServiceI) GetMessages(threadId string) ([]*Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", threadId)
	ret0, _ := ret[0].([]*Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockChatServiceIMockRecorder) GetMessages(threadId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockChatServiceI)(nil).GetMessages), threadId)
}

// GetThread mocks base method.
func (m *MockChatServiceI) GetThread(threadId string) (*Thread, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThread", threadId)
	ret0, _ := ret[0].(*Thread)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetThread indicates an expected call of GetThread.
func (mr *MockChatServiceIMockRecorder) GetThread(threadId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThread", reflect.TypeOf((*MockChatServiceI)(nil).GetThread), threadId)
}

// GetThreads mocks base method.
func (m *MockChatServiceI) GetThreads(userId string) ([]*Thread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreads", userId)
	ret0, _ := ret[0].([]*Thread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThreads indicates an expected call of GetThreads.
func (mr *MockChatServiceIMockRecorder) GetThreads(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreads", reflect.TypeOf((*MockChatServiceI)(nil).GetThreads), userId)
}

// UpdateThread mocks base method.
func (m *MockChatServiceI) UpdateThread(chatThread *Thread) (*Thread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThread", chatThread)
	ret0, _ := ret[0].(*Thread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThread indicates an expected call of UpdateThread.
func (mr *MockChatServiceIMockRecorder) UpdateThread(chatThread any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThread", reflect.TypeOf((*MockChatServiceI)(nil).UpdateThread), chatThread)
}

// UpsertAssets mocks base method.
func (m *MockChatServiceI) UpsertAssets(assets []*Asset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAssets", assets)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAssets indicates an expected call of UpsertAssets.
func (mr *MockChatServiceIMockRecorder) UpsertAssets(assets any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAssets", reflect.TypeOf((*MockChatServiceI)(nil).UpsertAssets), assets)
}
