// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/user/types/interface.go
//
// Generated by this command:
//
//	mockgen -source=./services/user/types/interface.go -destination=./services/user/types/mock_usertypes.go -package=usertypes
//

// Package usertypes is a generated GoMock package.
package usertypes

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserServiceI is a mock of UserServiceI interface.
type MockUserServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceIMockRecorder
}

// MockUserServiceIMockRecorder is the mock recorder for MockUserServiceI.
type MockUserServiceIMockRecorder struct {
	mock *MockUserServiceI
}

// NewMockUserServiceI creates a new mock instance.
func NewMockUserServiceI(ctrl *gomock.Controller) *MockUserServiceI {
	mock := &MockUserServiceI{ctrl: ctrl}
	mock.recorder = &MockUserServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceI) EXPECT() *MockUserServiceIMockRecorder {
	return m.recorder
}

// AddPermissionToRole mocks base method.
func (m *MockUserServiceI) AddPermissionToRole(roleId, permissionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPermissionToRole", roleId, permissionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPermissionToRole indicates an expected call of AddPermissionToRole.
func (mr *MockUserServiceIMockRecorder) AddPermissionToRole(roleId, permissionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermissionToRole", reflect.TypeOf((*MockUserServiceI)(nil).AddPermissionToRole), roleId, permissionId)
}

// AddRole mocks base method.
func (m *MockUserServiceI) AddRole(userId string, role *Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole", userId, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRole indicates an expected call of AddRole.
func (mr *MockUserServiceIMockRecorder) AddRole(userId, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockUserServiceI)(nil).AddRole), userId, role)
}

// ChangePassword mocks base method.
func (m *MockUserServiceI) ChangePassword(email, currentPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", email, currentPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserServiceIMockRecorder) ChangePassword(email, currentPassword, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserServiceI)(nil).ChangePassword), email, currentPassword, newPassword)
}

// ChangePasswordAdmin mocks base method.
func (m *MockUserServiceI) ChangePasswordAdmin(email, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePasswordAdmin", email, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePasswordAdmin indicates an expected call of ChangePasswordAdmin.
func (mr *MockUserServiceIMockRecorder) ChangePasswordAdmin(email, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePasswordAdmin", reflect.TypeOf((*MockUserServiceI)(nil).ChangePasswordAdmin), email, newPassword)
}

// CreatePermission mocks base method.
func (m *MockUserServiceI) CreatePermission(id, name, description string) (*Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", id, name, description)
	ret0, _ := ret[0].(*Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockUserServiceIMockRecorder) CreatePermission(id, name, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockUserServiceI)(nil).CreatePermission), id, name, description)
}

// CreateRole mocks base method.
func (m *MockUserServiceI) CreateRole(name, description string, permissionIds []string) (*Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", name, description, permissionIds)
	ret0, _ := ret[0].(*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockUserServiceIMockRecorder) CreateRole(name, description, permissionIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockUserServiceI)(nil).CreateRole), name, description, permissionIds)
}

// CreateUser mocks base method.
func (m *MockUserServiceI) CreateUser(user *User, password string, roleIds []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user, password, roleIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceIMockRecorder) CreateUser(user, password, roleIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceI)(nil).CreateUser), user, password, roleIds)
}

// DeletePermission mocks base method.
func (m *MockUserServiceI) DeletePermission(permissionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", permissionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockUserServiceIMockRecorder) DeletePermission(permissionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockUserServiceI)(nil).DeletePermission), permissionId)
}

// DeleteRole mocks base method.
func (m *MockUserServiceI) DeleteRole(roleId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", roleId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockUserServiceIMockRecorder) DeleteRole(roleId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockUserServiceI)(nil).DeleteRole), roleId)
}

// DeleteUser mocks base method.
func (m *MockUserServiceI) DeleteUser(userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceIMockRecorder) DeleteUser(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserServiceI)(nil).DeleteUser), userId)
}

// GetPermissions mocks base method.
func (m *MockUserServiceI) GetPermissions() ([]*Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions")
	ret0, _ := ret[0].([]*Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockUserServiceIMockRecorder) GetPermissions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockUserServiceI)(nil).GetPermissions))
}

// GetRoles mocks base method.
func (m *MockUserServiceI) GetRoles() ([]*Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles")
	ret0, _ := ret[0].([]*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockUserServiceIMockRecorder) GetRoles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockUserServiceI)(nil).GetRoles))
}

// GetUserFromRequest mocks base method.
func (m *MockUserServiceI) GetUserFromRequest(request *http.Request) (*User, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFromRequest", request)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserFromRequest indicates an expected call of GetUserFromRequest.
func (mr *MockUserServiceIMockRecorder) GetUserFromRequest(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFromRequest", reflect.TypeOf((*MockUserServiceI)(nil).GetUserFromRequest), request)
}

// GetUsers mocks base method.
func (m *MockUserServiceI) GetUsers(options *GetUsersOptions) ([]*User, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", options)
	ret0, _ := ret[0].([]*User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserServiceIMockRecorder) GetUsers(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserServiceI)(nil).GetUsers), options)
}

// IsAuthorized mocks base method.
func (m *MockUserServiceI) IsAuthorized(permissionId string, request *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorized", permissionId, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *MockUserServiceIMockRecorder) IsAuthorized(permissionId, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*MockUserServiceI)(nil).IsAuthorized), permissionId, request)
}

// Login mocks base method.
func (m *MockUserServiceI) Login(email, password string) (*AuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", email, password)
	ret0, _ := ret[0].(*AuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceIMockRecorder) Login(email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServiceI)(nil).Login), email, password)
}

// ReadUserByToken mocks base method.
func (m *MockUserServiceI) ReadUserByToken(token string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserByToken", token)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserByToken indicates an expected call of ReadUserByToken.
func (mr *MockUserServiceIMockRecorder) ReadUserByToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserByToken", reflect.TypeOf((*MockUserServiceI)(nil).ReadUserByToken), token)
}

// Register mocks base method.
func (m *MockUserServiceI) Register(email, password, name string, roleIds []string) (*AuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", email, password, name, roleIds)
	ret0, _ := ret[0].(*AuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceIMockRecorder) Register(email, password, name, roleIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserServiceI)(nil).Register), email, password, name, roleIds)
}

// RemoveRole mocks base method.
func (m *MockUserServiceI) RemoveRole(userId, roleId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRole", userId, roleId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRole indicates an expected call of RemoveRole.
func (mr *MockUserServiceIMockRecorder) RemoveRole(userId, roleId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRole", reflect.TypeOf((*MockUserServiceI)(nil).RemoveRole), userId, roleId)
}

// SaveProfile mocks base method.
func (m *MockUserServiceI) SaveProfile(email, newName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProfile", email, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProfile indicates an expected call of SaveProfile.
func (mr *MockUserServiceIMockRecorder) SaveProfile(email, newName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProfile", reflect.TypeOf((*MockUserServiceI)(nil).SaveProfile), email, newName)
}

// SetRolePermissions mocks base method.
func (m *MockUserServiceI) SetRolePermissions(roleId string, permissionIds []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRolePermissions", roleId, permissionIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRolePermissions indicates an expected call of SetRolePermissions.
func (mr *MockUserServiceIMockRecorder) SetRolePermissions(roleId, permissionIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRolePermissions", reflect.TypeOf((*MockUserServiceI)(nil).SetRolePermissions), roleId, permissionIds)
}

// UpsertPermission mocks base method.
func (m *MockUserServiceI) UpsertPermission(id, name, description string) (*Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPermission", id, name, description)
	ret0, _ := ret[0].(*Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertPermission indicates an expected call of UpsertPermission.
func (mr *MockUserServiceIMockRecorder) UpsertPermission(id, name, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPermission", reflect.TypeOf((*MockUserServiceI)(nil).UpsertPermission), id, name, description)
}

// UpsertRole mocks base method.
func (m *MockUserServiceI) UpsertRole(id, name, description string, permissionIds []string) (*Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRole", id, name, description, permissionIds)
	ret0, _ := ret[0].(*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertRole indicates an expected call of UpsertRole.
func (mr *MockUserServiceIMockRecorder) UpsertRole(id, name, description, permissionIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRole", reflect.TypeOf((*MockUserServiceI)(nil).UpsertRole), id, name, description, permissionIds)
}
