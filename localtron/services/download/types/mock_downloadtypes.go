// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/download/types/interface.go
//
// Generated by this command:
//
//	mockgen -source=./services/download/types/interface.go -destination=./services/download/types/mock_downloadtypes.go -package=downloadtypes
//

// Package downloadtypes is a generated GoMock package.
package downloadtypes

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDownloadServiceI is a mock of DownloadServiceI interface.
type MockDownloadServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadServiceIMockRecorder
}

// MockDownloadServiceIMockRecorder is the mock recorder for MockDownloadServiceI.
type MockDownloadServiceIMockRecorder struct {
	mock *MockDownloadServiceI
}

// NewMockDownloadServiceI creates a new mock instance.
func NewMockDownloadServiceI(ctrl *gomock.Controller) *MockDownloadServiceI {
	mock := &MockDownloadServiceI{ctrl: ctrl}
	mock.recorder = &MockDownloadServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloadServiceI) EXPECT() *MockDownloadServiceIMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockDownloadServiceI) Do(url, downloadDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", url, downloadDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockDownloadServiceIMockRecorder) Do(url, downloadDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDownloadServiceI)(nil).Do), url, downloadDir)
}

// GetDownload mocks base method.
func (m *MockDownloadServiceI) GetDownload(url string) (*Download, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownload", url)
	ret0, _ := ret[0].(*Download)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetDownload indicates an expected call of GetDownload.
func (mr *MockDownloadServiceIMockRecorder) GetDownload(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownload", reflect.TypeOf((*MockDownloadServiceI)(nil).GetDownload), url)
}

// List mocks base method.
func (m *MockDownloadServiceI) List() ([]DownloadDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]DownloadDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDownloadServiceIMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDownloadServiceI)(nil).List))
}

// Pause mocks base method.
func (m *MockDownloadServiceI) Pause(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockDownloadServiceIMockRecorder) Pause(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockDownloadServiceI)(nil).Pause), url)
}

// SetDefaultFolder mocks base method.
func (m *MockDownloadServiceI) SetDefaultFolder(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDefaultFolder", arg0)
}

// SetDefaultFolder indicates an expected call of SetDefaultFolder.
func (mr *MockDownloadServiceIMockRecorder) SetDefaultFolder(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultFolder", reflect.TypeOf((*MockDownloadServiceI)(nil).SetDefaultFolder), arg0)
}

// SetStateFilePath mocks base method.
func (m *MockDownloadServiceI) SetStateFilePath(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStateFilePath", arg0)
}

// SetStateFilePath indicates an expected call of SetStateFilePath.
func (mr *MockDownloadServiceIMockRecorder) SetStateFilePath(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStateFilePath", reflect.TypeOf((*MockDownloadServiceI)(nil).SetStateFilePath), arg0)
}

// Start mocks base method.
func (m *MockDownloadServiceI) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockDownloadServiceIMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDownloadServiceI)(nil).Start))
}
