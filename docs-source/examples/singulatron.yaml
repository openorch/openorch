basePath: /
definitions:
  chattypes.AddMessageRequest:
    properties:
      message:
        $ref: '#/definitions/chattypes.Message'
    type: object
  chattypes.AddThreadRequest:
    properties:
      thread:
        $ref: '#/definitions/chattypes.Thread'
    type: object
  chattypes.AddThreadResponse:
    properties:
      thread:
        $ref: '#/definitions/chattypes.Thread'
    type: object
  chattypes.Asset:
    properties:
      content:
        description: Content is the base64 encoded binary file direcly embedded in
          the asset itself
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      type:
        type: string
      updatedAt:
        type: string
      url:
        description: Url of the asset where
        type: string
    type: object
  chattypes.DeleteMessageRequest:
    properties:
      messageId:
        type: string
    type: object
  chattypes.DeleteThreadRequest:
    properties:
      threadId:
        type: string
    type: object
  chattypes.GetMessagesRequest:
    properties:
      threadId:
        type: string
    type: object
  chattypes.GetMessagesResponse:
    properties:
      assets:
        items:
          $ref: '#/definitions/chattypes.Asset'
        type: array
      messages:
        items:
          $ref: '#/definitions/chattypes.Message'
        type: array
    type: object
  chattypes.GetThreadRequest:
    properties:
      threadId:
        type: string
    type: object
  chattypes.GetThreadResponse:
    properties:
      exists:
        type: boolean
      thread:
        $ref: '#/definitions/chattypes.Thread'
    type: object
  chattypes.GetThreadsRequest:
    type: object
  chattypes.GetThreadsResponse:
    properties:
      threads:
        items:
          $ref: '#/definitions/chattypes.Thread'
        type: array
    type: object
  chattypes.Message:
    properties:
      assetIds:
        description: AssetIds defines the attachments the message has.
        items:
          type: string
        type: array
      content:
        description: Content of the message eg. "Hi, what's up?"
        type: string
      createdAt:
        type: string
      id:
        type: string
      threadId:
        description: ThreadId of the message.
        type: string
      updatedAt:
        type: string
      userId:
        description: |-
          UserId is the id of the user who wrote the message.
          For AI messages this field is empty.
        type: string
    type: object
  chattypes.Thread:
    properties:
      createdAt:
        type: string
      id:
        type: string
      title:
        description: Title of the thread.
        type: string
      topicIds:
        description: |-
          TopicIds defines which topics the thread belongs to.
          Topics can roughly be thought of as tags for threads.
        items:
          type: string
        type: array
      updatedAt:
        type: string
      userIds:
        description: UserIds the ids of the users who can see this thread.
        items:
          type: string
        type: array
    type: object
  chattypes.UpdateThreadRequest:
    properties:
      thread:
        $ref: '#/definitions/chattypes.Thread'
    type: object
  configtypes.AppServiceConfig:
    properties:
      loggingDisabled:
        type: boolean
    type: object
  configtypes.Config:
    properties:
      app:
        $ref: '#/definitions/configtypes.AppServiceConfig'
      directory:
        type: string
      download:
        $ref: '#/definitions/configtypes.DownloadServiceConfig'
      isRuntimeInstalled:
        description: "* This flag drives a minor UX feature:\n\t * if the user has
          not installed the runtime we show an INSTALL\n\t * button, but if the user
          has already installed the runtime we show\n\t * we show a START runtime
          button.\n\t *"
        type: boolean
      model:
        $ref: '#/definitions/configtypes.ModelServiceConfig'
    type: object
  configtypes.DownloadServiceConfig:
    properties:
      downloadFolder:
        type: string
    type: object
  configtypes.GetConfigRequest:
    type: object
  configtypes.GetConfigResponse:
    properties:
      config:
        $ref: '#/definitions/configtypes.Config'
    type: object
  configtypes.ModelServiceConfig:
    properties:
      currentModelId:
        type: string
    type: object
  configtypes.SaveConfigRequest:
    properties:
      config:
        $ref: '#/definitions/configtypes.Config'
    type: object
  configtypes.SaveConfigResponse:
    type: object
  datastore.AllCondition:
    type: object
  datastore.Condition:
    properties:
      all:
        allOf:
        - $ref: '#/definitions/datastore.AllCondition'
        description: All condition returns all objects.
      contains:
        allOf:
        - $ref: '#/definitions/datastore.ContainsCondition'
        description: Contains condition returns all objects where the field(s) values
          contain a particular string.
      equal:
        allOf:
        - $ref: '#/definitions/datastore.EqualCondition'
        description: Equal condition returns objects where value of a field equals
          (=) to the specified value in the query.
      startsWith:
        allOf:
        - $ref: '#/definitions/datastore.StartsWithCondition'
        description: StartsWith condition returns all objects where the field(s) values
          start with a particular string.
    type: object
  datastore.ContainsCondition:
    properties:
      selector:
        allOf:
        - $ref: '#/definitions/datastore.FieldSelector'
        description: Selector selects one, more or all fields
      value: {}
    type: object
  datastore.EqualCondition:
    properties:
      selector:
        allOf:
        - $ref: '#/definitions/datastore.FieldSelector'
        description: Selector selects one, more or all fields
      value: {}
    type: object
  datastore.FieldSelector:
    properties:
      any:
        description: Any matches any fields in the object
        type: boolean
      field:
        description: Field matchies a single field
        type: string
      oneOf:
        description: OneOf matches a number of fields
        items:
          type: string
        type: array
    type: object
  datastore.OrderBy:
    properties:
      desc:
        description: Desc indicates whether the sorting should be in descending order.
        type: boolean
      field:
        description: The field by which to order the results
        type: string
      randomize:
        description: Randomize indicates that the results should be randomized instead
          of ordered by the `field` and `desc` criteria
        type: boolean
    type: object
  datastore.Query:
    properties:
      after:
        description: |-
          After is used for paginations. Instead of offset-based pagination,
          we support cursor-based pagination because it works better in a scalable,
          distributed environment.
        items: {}
        type: array
      conditions:
        description: |-
          Conditions are filtering options of a query. It is advised to use
          It's advised to use helper functions in your respective client library such as condition constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
        items:
          $ref: '#/definitions/datastore.Condition'
        type: array
      count:
        description: |-
          Count true means return the count of the dataset filtered by Conditions
          without after or limit.
        type: boolean
      limit:
        description: Limit the number of records in the result set.
        type: integer
      orderBys:
        description: OrderBys order the result set.
        items:
          $ref: '#/definitions/datastore.OrderBy'
        type: array
    type: object
  datastore.StartsWithCondition:
    properties:
      selector:
        allOf:
        - $ref: '#/definitions/datastore.FieldSelector'
        description: Selector selects one, more or all fields
      value: {}
    type: object
  downloadtypes.DownloadDetails:
    properties:
      cancelled:
        type: boolean
      dir:
        type: string
      downloadedBytes:
        type: integer
      error:
        type: string
      fileName:
        type: string
      filePath:
        type: string
      fullFileSize:
        type: integer
      id:
        type: string
      paused:
        type: boolean
      progress:
        type: number
      status:
        type: string
      url:
        type: string
    type: object
  downloadtypes.DownloadRequest:
    properties:
      folderPath:
        type: string
      url:
        type: string
    type: object
  downloadtypes.DownloadsResponse:
    properties:
      downloads:
        items:
          $ref: '#/definitions/downloadtypes.DownloadDetails'
        type: array
    type: object
  downloadtypes.GetDownloadResponse:
    properties:
      download:
        $ref: '#/definitions/downloadtypes.DownloadDetails'
      exists:
        type: boolean
    type: object
  generictypes.CreateRequest:
    properties:
      object:
        $ref: '#/definitions/generictypes.GenericObjectCreateFields'
    type: object
  generictypes.CreateResponse:
    properties:
      object:
        $ref: '#/definitions/generictypes.GenericObject'
    type: object
  generictypes.DeleteRequest:
    properties:
      conditions:
        items:
          $ref: '#/definitions/datastore.Condition'
        type: array
      table:
        type: string
    type: object
  generictypes.DeleteResponse:
    type: object
  generictypes.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  generictypes.FindRequest:
    properties:
      public:
        type: boolean
      query:
        $ref: '#/definitions/datastore.Query'
      table:
        type: string
    type: object
  generictypes.FindResponse:
    properties:
      objects:
        items:
          $ref: '#/definitions/generictypes.GenericObject'
        type: array
    type: object
  generictypes.GenericObject:
    properties:
      createdAt:
        type: string
      data:
        additionalProperties: {}
        type: object
      id:
        type: string
      public:
        description: |-
          Public determines if the object is visible to all users.
          When it's false the entry is only visible to the user who created it.
          When it's true the entry is visible to everyone.
        type: boolean
      table:
        type: string
      updatedAt:
        type: string
      userId:
        type: string
    required:
    - data
    - table
    type: object
  generictypes.GenericObjectCreateFields:
    properties:
      data:
        additionalProperties: {}
        type: object
      id:
        type: string
      public:
        description: |-
          Public determines if the object is visible to all users.
          When it's false the entry is only visible to the user who created it.
          When it's true the entry is visible to everyone.
        type: boolean
      table:
        type: string
      userId:
        type: string
    required:
    - data
    - table
    type: object
  generictypes.UpdateRequest:
    properties:
      conditions:
        items:
          $ref: '#/definitions/datastore.Condition'
        type: array
      object:
        $ref: '#/definitions/generictypes.GenericObject'
      table:
        type: string
    type: object
  generictypes.UpdateResponse:
    type: object
  generictypes.UpsertRequest:
    properties:
      object:
        $ref: '#/definitions/generictypes.GenericObjectCreateFields'
    type: object
  generictypes.UpsertResponse:
    properties:
      object:
        $ref: '#/definitions/generictypes.GenericObject'
    type: object
  modeltypes.Architectures:
    properties:
      cuda:
        $ref: '#/definitions/modeltypes.Container'
      default:
        $ref: '#/definitions/modeltypes.Container'
    type: object
  modeltypes.Container:
    properties:
      envars:
        description: "Envars passed to the container. eg.\n\t'DEVICES=all'"
        items:
          type: string
        type: array
      image:
        type: string
      persistentPaths:
        description: Paths in the container to persist.
        items:
          type: string
        type: array
      port:
        description: Port is the internal port of the Container
        type: integer
    type: object
  modeltypes.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  modeltypes.GetModelResponse:
    properties:
      exists:
        type: boolean
      model:
        $ref: '#/definitions/modeltypes.Model'
      platform:
        $ref: '#/definitions/modeltypes.Platform'
    type: object
  modeltypes.ListRequest:
    type: object
  modeltypes.ListResponse:
    properties:
      models:
        items:
          $ref: '#/definitions/modeltypes.Model'
        type: array
    type: object
  modeltypes.MakeDefaultResponse:
    type: object
  modeltypes.Model:
    properties:
      assets:
        additionalProperties:
          type: string
        type: object
      bits:
        type: integer
      description:
        type: string
      extension:
        type: string
      flavour:
        type: string
      full_name:
        type: string
      id:
        type: string
      max_bits:
        type: integer
      max_ram:
        type: number
      mirrors:
        items:
          type: string
        type: array
      name:
        type: string
      parameters:
        type: string
      platformId:
        type: string
      prompt_template:
        type: string
      quality:
        type: string
      quant_comment:
        type: string
      size:
        type: number
      tags:
        items:
          type: string
        type: array
      uncensored:
        type: boolean
      version:
        type: string
    type: object
  modeltypes.ModelStatus:
    properties:
      address:
        type: string
      assetsReady:
        type: boolean
      running:
        description: "Running triggers onModelLaunch on the frontend.\n\tRunning is
          true when the model is both running and answering\n\t- fully loaded."
        type: boolean
    type: object
  modeltypes.Platform:
    properties:
      architectures:
        $ref: '#/definitions/modeltypes.Architectures'
      id:
        type: string
      name:
        type: string
      version:
        type: integer
    type: object
  modeltypes.StartResponse:
    type: object
  modeltypes.StatusResponse:
    properties:
      status:
        $ref: '#/definitions/modeltypes.ModelStatus'
    type: object
  prompttypes.AddPromptRequest:
    properties:
      id:
        description: Id is the unique ID of the prompt.
        type: string
      maxRetries:
        description: MaxRetries specified how many times the system should retry a
          prompt when it keeps erroring.
        example: 10
        type: integer
      modelId:
        description: ModelId is just the Singulatron internal ID of the model.
        example: huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf
        type: string
      prompt:
        description: Prompt is the message itself eg. "What's a banana?
        example: What's a banana?
        type: string
      sync:
        description: |-
          Sync drives whether prompt add request should wait and hang until
          the prompt is done executing. By default the prompt just gets put on a queue
          and the client will just subscribe to a Thread Stream.
          For quick and dirty scripting however it's often times easier to do things syncronously.
          In those cases set Sync to true.
        type: boolean
      template:
        description: Template of the prompt. Optional. If not present it's derived
          from ModelId.
        example: '[INST]{prompt}[/INST]'
        type: string
      threadId:
        description: |-
          ThreadId is the ID of the thread a prompt belongs to.
          Clients subscribe to Thread Streams to see the answer to a prompt,
          or set `prompt.sync` to true for a blocking answer.
        type: string
    required:
    - prompt
    type: object
  prompttypes.AddPromptResponse:
    properties:
      answer:
        type: string
      prompt:
        $ref: '#/definitions/prompttypes.Prompt'
    type: object
  prompttypes.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  prompttypes.ListPromptsRequest:
    properties:
      query:
        $ref: '#/definitions/datastore.Query'
    type: object
  prompttypes.ListPromptsResponse:
    properties:
      after: {}
      count:
        type: integer
      prompts:
        items:
          $ref: '#/definitions/prompttypes.Prompt'
        type: array
    type: object
  prompttypes.Prompt:
    properties:
      createdAt:
        description: CreatedAt is the time of the prompt creation.
        type: string
      error:
        description: Error that arose during prompt execution, if any.
        type: string
      id:
        description: Id is the unique ID of the prompt.
        type: string
      lastRun:
        description: LastRun is the time of the last prompt run.
        type: string
      maxRetries:
        description: MaxRetries specified how many times the system should retry a
          prompt when it keeps erroring.
        example: 10
        type: integer
      modelId:
        description: ModelId is just the Singulatron internal ID of the model.
        example: huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf
        type: string
      prompt:
        description: Prompt is the message itself eg. "What's a banana?
        example: What's a banana?
        type: string
      runCount:
        description: RunCount is the number of times the prompt was retried due to
          errors
        type: integer
      status:
        allOf:
        - $ref: '#/definitions/prompttypes.PromptStatus'
        description: Status of the prompt.
      sync:
        description: |-
          Sync drives whether prompt add request should wait and hang until
          the prompt is done executing. By default the prompt just gets put on a queue
          and the client will just subscribe to a Thread Stream.
          For quick and dirty scripting however it's often times easier to do things syncronously.
          In those cases set Sync to true.
        type: boolean
      template:
        description: Template of the prompt. Optional. If not present it's derived
          from ModelId.
        example: '[INST]{prompt}[/INST]'
        type: string
      threadId:
        description: |-
          ThreadId is the ID of the thread a prompt belongs to.
          Clients subscribe to Thread Streams to see the answer to a prompt,
          or set `prompt.sync` to true for a blocking answer.
        type: string
      updatedAt:
        description: UpdatedAt is the last time the prompt was updated.
        type: string
      userId:
        description: UserId contains the ID of the user who submitted the prompt.
        type: string
    required:
    - prompt
    type: object
  prompttypes.PromptStatus:
    enum:
    - scheduled
    - running
    - completed
    - errored
    - abandoned
    - canceled
    type: string
    x-enum-varnames:
    - PromptStatusScheduled
    - PromptStatusRunning
    - PromptStatusCompleted
    - PromptStatusErrored
    - PromptStatusAbandoned
    - PromptStatusCanceled
  prompttypes.RemovePromptRequest:
    properties:
      promptId:
        type: string
    type: object
  prompttypes.RemovePromptResponse:
    type: object
externalDocs:
  description: Singulatron API
  url: https://superplatform.ai/docs/category/singulatron-api
host: localhost:58231
info:
  contact:
    email: sales@singulatron.com
    name: API Support
    url: http://superplatform.ai/
  description: Run and develop self-hosted AI apps. Your programmable in-house GPT.
    The Firebase for the AI age.
  license:
    name: AGPL v3.0
    url: https://www.gnu.org/licenses/agpl-3.0.html
  termsOfService: http://swagger.io/terms/
  title: Singulatron
  version: "0.2"
paths:
  /chat-service/message/add:
    post:
      consumes:
      - application/json
      description: Add a new message to a specific chat thread
      parameters:
      - description: Add Message Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chattypes.AddMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Message successfully added
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid JSON
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Add Message
      tags:
      - chat
  /chat-service/message/delete:
    post:
      consumes:
      - application/json
      description: Delete a specific message from a chat thread by its ID
      parameters:
      - description: Delete Message Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chattypes.DeleteMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Message successfully deleted
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid JSON
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Delete Message
      tags:
      - chat
  /chat-service/messages:
    post:
      consumes:
      - application/json
      description: Fetch messages (and associated assets) for a specific chat thread.
      parameters:
      - description: Get Messages Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chattypes.GetMessagesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Messages and assets successfully retrieved
          schema:
            $ref: '#/definitions/chattypes.GetMessagesResponse'
        "400":
          description: Invalid JSON
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get Messages
      tags:
      - chat
  /chat-service/thread:
    post:
      consumes:
      - application/json
      description: Fetch information about a specific chat thread by its ID
      parameters:
      - description: Get Thread Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chattypes.GetThreadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Thread details successfully retrieved
          schema:
            $ref: '#/definitions/chattypes.GetThreadResponse'
        "400":
          description: Invalid JSON
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get Thread
      tags:
      - chat
  /chat-service/thread/add:
    post:
      consumes:
      - application/json
      description: Create a new chat thread and add the requesting user to it
      parameters:
      - description: Add Thread Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chattypes.AddThreadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Thread successfully created
          schema:
            $ref: '#/definitions/chattypes.AddThreadResponse'
        "400":
          description: Invalid JSON
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Add Thread
      tags:
      - chat
  /chat-service/thread/delete:
    post:
      consumes:
      - application/json
      description: Delete a specific chat thread by its ID
      parameters:
      - description: Delete Thread Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chattypes.DeleteThreadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Thread successfully deleted
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid JSON
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Delete Thread
      tags:
      - chat
  /chat-service/thread/update:
    post:
      consumes:
      - application/json
      description: Modify the details of a specific chat thread
      parameters:
      - description: Update Thread Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chattypes.UpdateThreadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Thread successfully updated
          schema:
            $ref: '#/definitions/chattypes.AddThreadResponse'
        "400":
          description: Invalid JSON
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update Thread
      tags:
      - chat
  /chat-service/threads:
    post:
      consumes:
      - application/json
      description: Fetch all chat threads associated with a specific user
      parameters:
      - description: Get Threads Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chattypes.GetThreadsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Threads successfully retrieved
          schema:
            $ref: '#/definitions/chattypes.GetThreadsResponse'
        "400":
          description: Invalid JSON
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get Threads
      tags:
      - chat
  /config/get:
    post:
      consumes:
      - application/json
      description: Fetch the current configuration from the server
      parameters:
      - description: Get Config Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/configtypes.GetConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Current configuration retrieved successfully
          schema:
            $ref: '#/definitions/configtypes.GetConfigResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get
      tags:
      - config
  /config/save:
    post:
      consumes:
      - application/json
      description: Save the provided configuration to the server
      parameters:
      - description: Save Config Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/configtypes.SaveConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Save Config Response
          schema:
            $ref: '#/definitions/configtypes.SaveConfigResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Save
      tags:
      - config
  /download/do:
    post:
      consumes:
      - application/json
      description: Start a download for a specified URL and folder path
      parameters:
      - description: Download Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/downloadtypes.DownloadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Download initiated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid JSON
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Do
      tags:
      - download
  /download/get:
    post:
      consumes:
      - application/json
      description: Get a download by URL.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/downloadtypes.GetDownloadResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get Download
      tags:
      - download
  /download/list:
    post:
      consumes:
      - application/json
      description: Fetch a list of all download details
      produces:
      - application/json
      responses:
        "200":
          description: List of downloads
          schema:
            $ref: '#/definitions/downloadtypes.DownloadsResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: List
      tags:
      - download
  /download/pause:
    post:
      consumes:
      - application/json
      description: Pause a download that is currently in progress
      parameters:
      - description: Download request payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/downloadtypes.DownloadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success response
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid JSON
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Pause
      tags:
      - download
  /firehose/subscribe:
    get:
      consumes:
      - application/json
      description: Establish a subscription to firehose events and stream them to
        the client in real-time.
      produces:
      - text/event-stream
      responses:
        "200":
          description: Event data
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Subscribe
      tags:
      - firehose
  /generic/create:
    post:
      consumes:
      - application/json
      description: Creates a new object with the provided details. Requires authorization
        and user authentication.
      parameters:
      - description: Create request payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/generictypes.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/generictypes.CreateResponse'
        "400":
          description: Invalid JSON
          schema:
            $ref: '#/definitions/generictypes.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/generictypes.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/generictypes.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a Generic Object
      tags:
      - generic
  /generic/delete:
    post:
      consumes:
      - application/json
      description: Removes a generic object from the system based on the provided
        conditions. Requires authorization and user authentication.
      parameters:
      - description: Delete request payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/generictypes.DeleteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful deletion of object
          schema:
            $ref: '#/definitions/generictypes.DeleteResponse'
        "400":
          description: Invalid JSON
          schema:
            $ref: '#/definitions/generictypes.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/generictypes.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/generictypes.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a Generic Object
      tags:
      - generic
  /generic/find:
    post:
      consumes:
      - application/json
      description: |-
        Retrieves objects from a specified table based on search criteria.
        Requires authorization and user authentication.


        Use helper functions in your respective client library such as condition constructors (`equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
      parameters:
      - description: Find request payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/generictypes.FindRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of objects
          schema:
            $ref: '#/definitions/generictypes.FindResponse'
        "400":
          description: Invalid JSON
          schema:
            $ref: '#/definitions/generictypes.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/generictypes.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/generictypes.ErrorResponse'
      summary: Find Generic Objects
      tags:
      - generic
  /generic/update:
    post:
      consumes:
      - application/json
      description: Updates objects in a specified table based on provided conditions.
        Requires authorization and user authentication.
      parameters:
      - description: Update request payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/generictypes.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update of objects
          schema:
            $ref: '#/definitions/generictypes.UpdateResponse'
        "400":
          description: Invalid JSON
          schema:
            $ref: '#/definitions/generictypes.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/generictypes.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/generictypes.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Generic Objects
      tags:
      - generic
  /generic/upsert:
    post:
      consumes:
      - application/json
      description: Creates a new generic object or updates an existing one based on
        the provided data. Requires authorization and user authentication.
      parameters:
      - description: Upsert request payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/generictypes.UpsertRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful creation or update of object
          schema:
            $ref: '#/definitions/generictypes.UpsertResponse'
        "400":
          description: Invalid JSON
          schema:
            $ref: '#/definitions/generictypes.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/generictypes.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/generictypes.ErrorResponse'
      summary: Upsert a Generic Object
      tags:
      - generic
  /model:
    get:
      consumes:
      - application/json
      description: |-
        Retrieves a list of models after checking authorization
        Requires "model.view" permission.
      parameters:
      - description: Get models request
        in: body
        name: GetModelsRequest
        required: true
        schema:
          $ref: '#/definitions/modeltypes.ListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modeltypes.ListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/modeltypes.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/modeltypes.ErrorResponse'
      summary: List Models
      tags:
      - model
  /model/{id}:
    get:
      consumes:
      - application/json
      description: |-
        Retrieves the details of a model by its ID.

        Requires `model.view` permission.
      parameters:
      - description: Model ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modeltypes.GetModelResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/modeltypes.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/modeltypes.ErrorResponse'
      summary: Get a Model
      tags:
      - model
  /model/{id}/make-default:
    put:
      consumes:
      - application/json
      description: Sets a model as the default model — when prompts are sent without
        a Model ID, the default model is used.
      parameters:
      - description: Model ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modeltypes.MakeDefaultResponse'
        "400":
          description: Invalid JSON
          schema:
            $ref: '#/definitions/modeltypes.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/modeltypes.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/modeltypes.ErrorResponse'
      summary: Make a Model Default
      tags:
      - model
  /model/{id}/start:
    put:
      consumes:
      - application/json
      description: Starts a model by ID
      parameters:
      - description: Model ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modeltypes.StartResponse'
        "400":
          description: Invalid JSON
          schema:
            $ref: '#/definitions/modeltypes.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/modeltypes.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/modeltypes.ErrorResponse'
      summary: Start a Model
      tags:
      - model
  /model/{id}/status:
    get:
      consumes:
      - application/json
      description: |-
        Retrieves the status of a model by ID.

        Requires the `model.view` permission.
      parameters:
      - description: Model ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Model status retrieved successfully
          schema:
            $ref: '#/definitions/modeltypes.StatusResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get Model Status
      tags:
      - model
  /model/default/start:
    put:
      consumes:
      - application/json
      description: |-
        Starts The Default Model.

        Requires the `model.create` permission.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modeltypes.StartResponse'
        "400":
          description: Invalid JSON
          schema:
            $ref: '#/definitions/modeltypes.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/modeltypes.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/modeltypes.ErrorResponse'
      summary: Start the Default Model
      tags:
      - model
  '/prompt-service/add:
    post:
      consumes:
      - application/json
      description: Adds a new prompt to the prompt queue and either waits for the
        response (if `sync` is set to true), or returns immediately.
      parameters:
      - description: Add Prompt Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/prompttypes.AddPromptRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/prompttypes.AddPromptResponse'
        "400":
          description: Invalid JSON
          schema:
            $ref: '#/definitions/prompttypes.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/prompttypes.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/prompttypes.ErrorResponse'
      summary: Add Prompt
      tags:
      - prompts
  '/prompt-service/list:
    post:
      consumes:
      - application/json
      description: List prompts that satisfy a query.
      parameters:
      - description: List Prompts Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/prompttypes.ListPromptsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/prompttypes.ListPromptsResponse'
        "400":
          description: Invalid JSON
          schema:
            $ref: '#/definitions/prompttypes.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/prompttypes.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/prompttypes.ErrorResponse'
      summary: List Prompts
      tags:
      - prompts
  '/prompt-service/remove:
    post:
      consumes:
      - application/json
      description: Remove a prompt by ID.
      parameters:
      - description: Remove Prompt Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/prompttypes.RemovePromptRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{}'
          schema:
            $ref: '#/definitions/prompttypes.RemovePromptResponse'
        "400":
          description: Invalid JSON
          schema:
            $ref: '#/definitions/prompttypes.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/prompttypes.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/prompttypes.ErrorResponse'
      summary: Remove Prompt
      tags:
      - prompts
  '/prompt-service/subscribe:
    get:
      description: Subscribe to prompt responses via Server-Sent Events (SSE)
      parameters:
      - description: Thread ID
        in: query
        name: threadId
        required: true
        type: string
      responses:
        "200":
          description: Streaming response
          schema:
            type: string
        "400":
          description: Missing threadId parameter
          schema:
            $ref: '#/definitions/prompttypes.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/prompttypes.ErrorResponse'
      summary: Subscribe to Prompt
      tags:
      - prompts
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
