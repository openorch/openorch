// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//

// Package sdk is a generated GoMock package.
package sdk

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthorizer is a mock of Authorizer interface.
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
	isgomock struct{}
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer.
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance.
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// DecodeJWT mocks base method.
func (m *MockAuthorizer) DecodeJWT(userSvcPublicKey, token string) (*Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeJWT", userSvcPublicKey, token)
	ret0, _ := ret[0].(*Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeJWT indicates an expected call of DecodeJWT.
func (mr *MockAuthorizerMockRecorder) DecodeJWT(userSvcPublicKey, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeJWT", reflect.TypeOf((*MockAuthorizer)(nil).DecodeJWT), userSvcPublicKey, token)
}

// DecodeJWTFromRequest mocks base method.
func (m *MockAuthorizer) DecodeJWTFromRequest(userSvcPublicKey string, r *http.Request) (*Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeJWTFromRequest", userSvcPublicKey, r)
	ret0, _ := ret[0].(*Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeJWTFromRequest indicates an expected call of DecodeJWTFromRequest.
func (mr *MockAuthorizerMockRecorder) DecodeJWTFromRequest(userSvcPublicKey, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeJWTFromRequest", reflect.TypeOf((*MockAuthorizer)(nil).DecodeJWTFromRequest), userSvcPublicKey, r)
}

// IsAdmin mocks base method.
func (m *MockAuthorizer) IsAdmin(userSvcPublicKey, token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", userSvcPublicKey, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockAuthorizerMockRecorder) IsAdmin(userSvcPublicKey, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockAuthorizer)(nil).IsAdmin), userSvcPublicKey, token)
}

// IsAdminFromRequest mocks base method.
func (m *MockAuthorizer) IsAdminFromRequest(userSvcPublicKey string, r *http.Request) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdminFromRequest", userSvcPublicKey, r)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdminFromRequest indicates an expected call of IsAdminFromRequest.
func (mr *MockAuthorizerMockRecorder) IsAdminFromRequest(userSvcPublicKey, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdminFromRequest", reflect.TypeOf((*MockAuthorizer)(nil).IsAdminFromRequest), userSvcPublicKey, r)
}

// TokenFromRequest mocks base method.
func (m *MockAuthorizer) TokenFromRequest(r *http.Request) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenFromRequest", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// TokenFromRequest indicates an expected call of TokenFromRequest.
func (mr *MockAuthorizerMockRecorder) TokenFromRequest(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenFromRequest", reflect.TypeOf((*MockAuthorizer)(nil).TokenFromRequest), r)
}
